*WARNING: THIS DOCUMENTATION IS WORK IN PROGRESS!!*

---+!! !AutoPyFactory: How to write your own plugins
&lt;!--
%DOC_STATUS_TABLE%
--&gt;
%TOC{depth=&quot;3&quot;}%

---# About this Document

This document describes how to write new plugins in AutoPyFactory

%INCLUDE{&quot;Trash/DocumentationTeam/DocConventions&quot; section=&quot;Header&quot;}%
%INCLUDE{&quot;Trash/DocumentationTeam/DocConventions&quot; section=&quot;CommandLine&quot;}%

%INCLUDE{&quot;Documentation/Release3/AutoPyFactory&quot; section=&quot;Version&quot;}%

---# Understanding plugins in !AutoPyFactory

Basic description of the different types of plugins and their purposes can be found [[https://twiki.grid.iu.edu/bin/view/Documentation/Release3/AutoPyFactory#3_1_Plugins_based_architecture][here]]

There are two basic ideas to keep in mind to write a new plugin for !AutoPyFactory:
   * plugins have an !API
   * plugins use mappings to convert external information into internal abstract !AutoPyFactory language
   * the name of the plugin is also the name of the class implementing it, and the name of the .py module containing it
   * all plugins&#39; __init__() method always receive the same input parameters: 
      * a reference to the calling object
      * the !ConfigParser object containing configuration that may be relevant for the plugin
      * the corresponding section name for that !ConfigParser object

Therefore, to write a new plugin, one only needs to pay attention to the !API, which is defined in file =autopyfactory/interfaces.py=, 
and, when needed, add a new conversion table to file =etc/mappings.conf=

Plugins are placed in a well defined directory tree, depending on the type:
&lt;pre class=&quot;file&quot;&gt;
autopyfactory/
    plugins/
        factory/
        queue/
            batchstatus/
            batchsubmit/
            wmsstatus/
            monitor/
            sched/
        authmanager/
            auth/
&lt;/pre&gt;

For example, for the sched plugin =Ready=, there is a class =Ready= in module =autopyfactory/plugins/queue/sched/Ready.py=

---## Nomenclature

As mentioned, the name of the plugin is also the name of the class implementing it,  as well the name of the module containing it. 

In the !AutoPyFactory configuration files, there are a few convention rules that help to keep a consistent nomenclature between all plugins:
   * the key that refers to a given plugin is built as &amp;lt; type_of_plugin &amp;gt; + &quot;plugin&quot;
   * the name of the plugin is referred by its exact name (case sensitive)
   * keys for internal parameters to be digested by the plugins are always lower case, and built as &amp;lt; type_of_plugin &amp;gt; + &quot;.&quot; + &amp;lt; name_of_the_plugin_lower_case &amp;gt; + &quot;.&quot; + &amp;lt; parameter &amp;gt;

Example:

&lt;pre class=&quot;file&quot;&gt;
schedplugin = MinPerCycle
sched.minpercycle.minimum = 1
&lt;/pre&gt;

---## Singletons

Some plugins may act on behalf of many !AutoPyFactory internal components. For example, the =batchstatus= plugins in charge of running periodically =condor_q= commands does it for many !APFQueue objects.
In those cases, it makes sense to have that plugin be a [[https://en.wikipedia.org/wiki/Singleton_pattern][Singleton]]. 

!Singletons are implemented in !AutoPyFactory is by overriding the __new__ method of the plugin class, and moving the actual code of the plugin functionalities to a separate class whose instances are returned by that __new__() implementation.

Example, for a plugin called !MyPlugin, the module MyPlugin.py would have like this:

&lt;pre class=&quot;file&quot;&gt;

class _myplugin(....):

        def __init__(self, parent, config, section_name):
        ....
        ....

        def get(self):
        ...
        ...

        def put(self):
        ... 
        ...


class MyPlugin(object):

        instance = None

        def __new__(cls, *k, **kw):
                # here we check if an object
                # has already being created
                if not MyPlugin.instance:
                        MyPlugin.instance = _myplugin(*k, **kw)
                return MyPlugin.instance
&lt;/pre&gt;

There is a special kind of !Singletons in !AutoPyFactory: the so called &quot;MultiSingletons&quot;.
Those are plugins that, even doing the same for several parent calling objects, they may have differences in their setup. A typical example is the =batchstatus= plugin =Condor=, when it requires to query 2 different pools. 
In that case, we manage 2 plugin objects, each one being a !Singleton. 
The implementation is similar:


&lt;pre class=&quot;file&quot;&gt;

class _myplugin(....):

        def __init__(self, parent, config, section_name):
        ....
        ....

        def get(self):
        ...
        ...

        def put(self):
        ... 
        ...


class MyPlugin(object):

        instances = {}

        def __new__(cls, *k, **kw):
                # here we check if a new object
                # is needed or not,
                # usually by inspecting the content of input options
                # passed to the plugin via *k
                #       parent = k[0]
                #       config = k[1]
                #       section = k[2]
                # and generating, when needed, a new key
                ...
                ...
                if key not in MyPlugin.instances.keys():
                        MyPlugin.instances[key] = _myplugin(*k, **kw)
                return MyPlugin.instances[key]
&lt;/pre&gt;


---# Writing a new plugin

---## Write a new batchsubmit plugin

To write a new batchsubmit plugin, place the new module under directory =autopyfactory/plugins/queue/batchsubmit/=, and create a class inheriting the !API.

&lt;pre class=&quot;file&quot;&gt;

from autopyfactory.interfaces import BatchSubmitInterface

class MySubmit(BatchSubmitInterface):

        def __init__(self, apfqueue, config, section):
            qname = apfqueue.apfqname
            foo = conf.get(qname, &quot;batchsubmit.mysubmit.bar&quot;)    
   
        def submit(self, n):
             ...
             ...

&lt;/pre&gt;

The method submit receives the number of pilots to be submitted. This method implements the code to perform the actual submission. 

---## Write a new batchstatus plugin

To write a new batchstatus plugin, place the new module under directory =autopyfactory/plugins/queue/batchstatus/=, and create a class inheriting the !API.

&lt;pre class=&quot;file&quot;&gt;

from autopyfactory.interfaces import BatchStatusInterface
from autopyfactory.info import BatchStatusInfo
from autopyfactory.info import QueueInfo

class MyStatus(BatchStatusInterface):

        def __init__(self, apfqueue, config, section):
            qname = apfqueue.apfqname
            foo = conf.get(qname, &quot;batchstatus.mystatus.bar&quot;)    
            mytarget2info_dict = apfqueue.factory.mappingscl.section2dict(&#39;MAPPINGS-FOR-MY-TARGET&#39;)

       def getInfo(self):
            ...

&lt;/pre&gt;

An example of mappings is 

&lt;pre class=&quot;file&quot;&gt;
[CONDORBATCHSTATUS-APFINFO]
0 = pending
1 = pending
2 = running
3 = done
4 = done
5 = suspended
6 = running
&lt;/pre&gt;

The current list of internal !AutoPyFactory statuses is 

&lt;pre class=&quot;file&quot;&gt;
pending
running
suspended
done
&lt;/pre&gt;


Method getInfo() returns aggregate statistics about jobs in batch system, indexed by queue.
It returns an object of class !BatchStatusInfo, defined in =autopyfactory/info.py=, 
which is a dictionary of !QueueInfo objects, also defined in =autopyfactory/info.py=.

The !BatchStatusInfo dictionary is indexed by !APFQueue name, the !QueueInfo dictionary is filled via its method fill(), which receives as inputs a dictionary with status values and the corresponding mapping to convert those values into internal !AutoPyFactory agnostic vocabulary. 
An example of dictionary to be passed would be:
&lt;pre class=&quot;file&quot;&gt;
{&#39;0&#39;:5,
&#39;2&#39;:10}
&lt;/pre&gt;
where the mappings will then convert &#39;0&#39; into &#39;pending&#39; and &#39;2&#39; into &#39;running&#39;

---## Write a new sched plugin

The !Sched plugins have a very simple interface, implemented in module !SchedInterface: just a method =calcSubmitNum(self, n=0)=.
This method calculates how many new pilots to submit next time, implementing a given algorithm or policy. 

The output returned by the method is a tuple of two items =(out, msg)= where =out= is the number of pilots to be submitted (can be a negative number), and =msg= is a string representing the decision made. 
This string message can then be propagated to some monitoring services. 

&lt;pre class=&quot;file&quot;&gt;
...
from autopyfactory.interfaces import SchedInterface

class MySched(SchedInterface):
   
        def __init__(self, apfqueue, config, section):
                ...
   
        def calcSubmitNum(self, n=0):
                ...
                out = 123
                msg = &#39;MySched:in=%s;ret=%s&#39; %(n, out)
                return (out, msg)
&lt;/pre&gt;




---# UML diagrams 

---## Plugins interfaces

&lt;img src=&quot;https://twiki.grid.iu.edu/twiki/pub/Documentation/Release3/AutoPyFactoryWritePlugins/APF_plugins_interfaces.png&quot;&gt;


---## Info classes in !AutoPyFactory

&lt;img src=&quot;https://twiki.grid.iu.edu/twiki/pub/Documentation/Release3/AutoPyFactoryWritePlugins/APF_info_classes.png&quot;&gt;



-- Main.JoseCaballero - 21 Jun 2016

