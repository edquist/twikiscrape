---+!! !HTCondor/GlideinWMS AWS Probe Configuration
&lt;!--
   * Local SUPPORTED_OS = Red Hat Enterprise Linux 6, 32 and 64 bit and variants (Scientific Linux 6 and !CentOS) 
--&gt;
%TOC%

---+ Overview
This probe reports the usage in a HTCondor system which uses Virtual machines deployed in the Amazon web service console.

This probe will read the AWS console to read all the VMS running on it and report back the accounting details to gratia. The probe will set the GLIDEIN_ResourceType to AWS.

The usage will be forwarded to the production Gratia collector (gratia-osg-prod.opensciencegrid.org) by default.But this can be changed to point to a local gratia collector which has been setup.


---+ Requirements and Preparation

The Probe assumes that AWSVM binaries are in the default path (=/usr/lib/python2.6/site-packages/gratia/awsvm=). The Probe file itself will reside in default path (=/usr/share/gratia/awsvm=).

Host requirements (bare-bone installation):
   * Probe must be installed on the VO&#39;s schedd.
   * Currently most of our testing has been done on Scientific Linux 6.
   * Root access
   * Allow outbound network connection, on port 80, to the Gratia collector (default is http://gratia-osg-prod.opensciencegrid.org).  Gratia does not support HTTP proxies.

To be part of OSG your Submit host must be registered in OIM (e.g. as Submit Node). To register your resource:
   * Use your user certificate.  [[Documentation.Release3.CertificateUserGet][Here]] are instructions to request a user certificate.
   * Register in OIM as described in Operations.OIMRegistrationInstructions

%INCLUDE{&quot;Documentation.Release3.YumRepositories&quot; section=&quot;OSGRepoBrief&quot; TOC_SHIFT=&quot;+&quot;}%

---+ Installation
   1. Install the Gratia Common and Gratia Awsvm RPM on the host that runs the GlideinWMS schedd.  Assuming you previously installed the OSG repo and have the release repository enabled:
   &lt;pre class=&quot;screen&quot;&gt;
yum install gratia-probe-awsvm &lt;/pre&gt;
   1. The awsvm probe also requires pip and boto3 which can be installed by following the commands 
   &lt;pre class=&quot;file&quot;&gt;
rpm -ivh http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
yum install -y python-pip
pip install boto3
   &lt;/pre&gt;
Next ,the boto3 requires a ~/.aws/credentials file containing the AWS IAM access ID and key to be created
   &lt;pre class=&quot;file&quot;&gt;
mkdir ~/.aws
 vi ~/.aws/credentials
   &lt;/pre&gt;
The 
Access id and key must be placed in this format
   &lt;pre class=&quot;file&quot;&gt;
[default]
aws_access_key_id = AKIXXXXXXXXXXXXXXCOA
aws_secret_access_key = bFSXXXXXXXXXXXXXXXXXXXXXXXXXX3ey
   &lt;/pre&gt;
   1. Edit the ProbeConfig located in =/etc/gratia/awsvm/ProbeConfig=.  First, edit the =SiteName= and =ProbeName= to be a unique identifier for your !GlideinWMS Submit host.  There can be multiple probes (with different names) per site.   If you haven&#39;t already, you should register your !GlideinWMS submit host in [[https://oim.grid.iu.edu/oim/home][OIM]].  Then you can use the name you used to register the resource.
   &lt;pre class=&quot;file&quot;&gt;
ProbeName=&quot;awsvm:&amp;lt;hostname&gt;&quot;
SiteName=&quot;HCC-GlideinWMW-Frontend&quot;   &lt;/pre&gt;
   Next, turn the probe on by editing the =EnableProbe=:
   &lt;pre class=&quot;file&quot;&gt;
EnableProbe=&quot;1&quot;   &lt;/pre&gt;
   Also enable the ExcemptDuplicates to avoid sending records before the end of the hour
   &lt;pre class=&quot;file&quot;&gt;
ExcemptDuplicates=&quot;1&quot;
   &lt;/pre&gt;
   1. Start the services, and add them to be started automatically when the system reboots: &lt;pre class=&quot;screen&quot;&gt;
$ service gratia-probes-cron start
$ chkconfig --level 345 gratia-probes-cron on &lt;/pre&gt;


---+ Usage Graphs
Usage graphs can be found under the heading Glidein Bar Graphs at 
http://gratiaweb.grid.iu.edu/gratia/xml

Specifically, [[http://gratiaweb.grid.iu.edu/gratia/xml/glidein_hours_bar_smry][this page]] may be useful.  Replace the variable =probe= with the name of your probe that you configured above.

*NOTE:* Usage could be delayed up to a few hours after the job has completed.

---+ Unusual Use Cases
---++ Users without Certificates
If you have users that submit jobs without a certificate explicitly declared in the submit file, you will need to add =MapUnknownToGroup= to the ProbeConfig.  In the file =/etc/gratia/awsvm/ProbeConfig=, add the value after the =EnableProbe=.

&lt;pre class=&quot;file&quot;&gt;
    ...
    SuppressGridLocalRecords=&quot;0&quot;
    EnableProbe=&quot;1&quot;
    %RED%MapUnknownToGroup=&quot;1&quot;%ENDCOLOR%

    Title3=&quot;Tuning parameter&quot;
    ...
&lt;/pre&gt;

Further, if you want to record all usage as coming from a single VO, you can configure the probe to override the &#39;guessed&#39; VO.  In the below example, replace the %RED%Engage%ENDCOLOR% with a registered VO that you would like to report as.  If you don&#39;t have a VO that you are affiliated with, you may use Engage.

&lt;pre class=&quot;file&quot;&gt;
...
    MapUnknownToGroup=&quot;1&quot;
    %RED%MapGroupToRole=&quot;1&quot;%ENDCOLOR%
    %RED%VOOverride=&quot;Engage&quot;%ENDCOLOR%
...
&lt;/pre&gt;



---+++ New Data Directory
In =/etc/gratia/awsvm/ProbeConfig=, the value of =DataFolder= (near the bottom) needs to be the same as the awsvm configuration variable =PER_JOB_HISTORY_DIR=.  You can get the value of =PER_JOB_HISTORY_DIR= with the command:
&lt;pre class=&quot;screen&quot;&gt;
awsvm_config_val PER_JOB_HISTORY_DIR &lt;/pre&gt;.

---++ Different collector and other customizations
By default the probe reposts to the OSG Gratia service (Collector). To change that you must edit the configuration file, =/etc/gratia/awsvm/ProbeConfig=, and replace the OSG production host with your desired one:
&lt;pre class=&quot;file&quot;&gt;
...
    CollectorHost=&quot;gratia-osg-prod.opensciencegrid.org:80&quot;
    SSLHost=&quot;gratia-osg-prod.opensciencegrid.org:443&quot;
    SSLRegistrationHost=&quot;gratia-osg-prod.opensciencegrid.org:80&quot;
...
&lt;/pre&gt;

---+++ In case it says filelock doesnt exist in log
IF the excempt duplicates is set and the filelock throws erroscheck whether the filelock file exists at =/var/lib/gratia/filelock= and also where it is set properly in ProbeConfig file =DuplicateFilelock=&quot;/var/lib/gratia/filelock&quot;=
---+++ In case it says hardwareinst doesnt exist
If it says hardwareinst doesnt exist check whether the file exists and the value is it properly in probe
        HardwareDetails=&quot;/usr/lib/python2.6/site-packages/gratia/awsvm/hardwareinst&quot;
---+++If you want to update the hardware details of aws instances
If u need to add or update the values to the table in hardwareinst plf follow the syntax
&lt;pre class=&quot;file&quot;&gt;
        instance-type(\tab)vcpu(\tab)ram(\tab)price(\tab)(\newline)
        value1(\tab)value2(\tab)value3(\tab)value4(\tab)(\newline)
        eg : m3.medium(\tab)1(\tab)3.75(\tab)0.067(\tab)(\newline)
&lt;/pre&gt;
Also the file needs to be updated manually incase AWS changes any of the specs of the instances.

You can find more information about the content of the configuration file and how to change it in Accounting.ProbeConfig .


---+ References
Some links about OSG Accounting with Gratia:
   * [[Accounting.WebHome][OSG Accounting (Gratia)]]
   * [[Accounting.ProbeConfig][Gratia probes configuration]]
   * [[Accounting.ProbeConfigCondor][Gratia HTCondor probe]]
The !GlideinWMS 
   * [[Documentation/Release3.NavTechGlideinWMS][The Glidein Workflow Management System]]

&lt;!-- CONTENT MANAGEMENT PROJECT

   DEAR DOCUMENT OWNER
   ===================

   Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER          = MarcoMambelli

   Please define the document area, choose one of the defined areas from the next line
   DOC_AREA = (ComputeElement|Storage|VO|Security|User|Monitoring|General|Trash/Trash/Integration|Operations|Tier3)
   * Local DOC_AREA       = General

   define the primary role the document serves, choose one of the defined roles from the next line
   DOC_ROLE = (Scientist|Student|Developer|SysAdmin|VOManager)
   * Local DOC_ROLE       = SysAdmin

   Please define the document type, choose one of the defined types from the next line
   DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = Navigation
   
   Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

   Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %YES%

   change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

   change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %YES%

   change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %NO%


   DEAR DOCUMENT REVIEWER
   ======================

   Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       =  TanyaLevshina
  
   Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %IN_PROGRESS%


   DEAR DOCUMENT TESTER
   ====================

   Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = 
  
   Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %IN_PROGRESS%
 
--&gt;

