%DOC_STATUS_TABLE%


---+!! *&lt;noop&gt;%SPACEOUT{ &quot;%TOPIC%&quot; }%*
%TOC%


---++ Introduction

The Open Science Grid provides a BDII service which aggregates LDAP information provided by sites. The information describes the resources being made available by the sites. For example, some site configuration parameters may be published from which it can be determined whether an application submitted by a VO may successfully run. In some applications, knowledge of site configuration values is needed in order to correctly use a resource. As an example, in the use of storage, a site may offer a Storage Element for which particular VOs are authorized. Each authorized VO would be able to access the Storage Element through a protocol published in the BDII, directing data to and from a storage area assigned to them.

The OSG Discovery Tool allows users to discover the BDII information they need in order to use grid resources. The version of the tool described here is focussed on storage applications.  

More detailed information on the requirements and design of the tool can be found at

[[InformationServices/OSGStorageDiscoveryRequirements][OSG Storage Discovery Requirements Document]]

[[InformationServices/OSGStorageDiscoveryDesign][OSG Storage Discovery Design Document]]

---++ Installation

This tool is installed with the OSG client. Please see the [[Documentation/Release3.InstallOSGClient][ClientInstallationGuide]] for instructions on how to install the full client.

You can also install the discovery tools standalone from the OSG repository by installing the =osg-discovery= package.

---++ Setting the environment

The following environment variables are defined in =/etc/osg-discovery/xpathsearch.rc= and are read at the invocation of every command.

   * The URI of the LDAP server and the base to be queried may be set with LDAP_URI and LDAP_BASE, respectively. These default to the OSG production BDII server and &quot;o=grid&quot; base.

   * The cache location (see below) may be set with XPATHCACHE_DIR. The expiration time of the cache is set with MAX_CACHE_AGE. The default value is 86400 seconds.

The values can be overridden by defining the variables in your environment. They can also be changed in the rc file. For example, to set the LDAP server to that of the OSG Integrated Test Bed (ITB), change the line to

&lt;pre class=&quot;file&quot;&gt;
LDAP_URI=ldap://is-itb.grid.iu.edu:2170
&lt;/pre&gt;

---++ Running the Scripts

---+++ Loading the Cache

The cache is loaded automatically when a query is run and the cache file is not present or is older than the value of MAX_CACHE_AGE. To load the cache manually, type

&lt;pre class=&quot;screen&quot;&gt;
load_bdii_cache
&lt;/pre&gt;

This gathers all needed information from the BDII. Queries are evaluated against the cache (except for xpathsearh, see Advanced Usage below). The above command replaces any existing cache with a new one. By default, the cache location is =~/.osg-discovery/bdii.xml=. This may be changed by setting XPATHCACHE_DIR in the xpathsearch.rc file.  Note that the RPM default is for each user to use their own bdii cache file.


---+++ Java Version

Java version 1.5 or higher is required. Discovery tools will use the system binary, unless JAVA_HOME is defined.

---+++ General Command Line Format

Each script is called with a set of parameters specified on the command line, some of which may be optional. The command line format is as follows

&lt;pre class=&quot;screen&quot;&gt;
script_name --parameter_name1 value1 --parameter_name2 value2 ... [--format &lt;columns | html | cat&gt;]
&lt;/pre&gt;

All scripts use this form of name/value pair command line arguments. A help argument in the form of  &quot;-h&quot;, &quot;-help&quot;, or &quot;--help&quot;, is supported by all scripts and must be the first argument when used. When the help argument is specified, a script will print it&#39;s purpose and the list of parameters that it takes, with descriptions and indications of which are optional.

The other argument supported by all scripts is the format argument. It is useful when the command prints multiple values per line, such as a resource name and some datum about the resource. Such scripts will display the output using the &quot;columns&quot; format, which will align the text fields vertically. This can be overridden by explicitly specifying the format. The &quot;html&quot; value of the format argument will cause the script to output  an html page containing the result in a table. The &quot;cat&quot; value of the format argument will cause the output to not be formatted at all.

---++ The Discovery Scripts with Examples

The current tool release covers two categories: discovery related Storage Elements, and discovery related to Compute Elements.

---+++ Storage-related discovery 

These commands support making data transfers in SRM and gridftp Storage Elements, and making space reservations. Each script searches the cached information loaded from the BDII and displays a result as output. The command for a particular site can then be run by the user to make a space reservation or to do a test transfer. The use of each script supplied in the bundle is described in the following topic, with examples provided.

   * [[Documentation/Release3.OpportunisticStorageSearchScripts][Opportunistic Storage Discovery Scripts]]

For further information on the specific space reservation and srm copy commands supported, see the [[https://twiki.grid.iu.edu/bin/view/Storage][OSG Storage Documentation]].

---+++ Compute-related discovery 

These commands show various Compute Element information, such as versioning information of installed software and the mount path of any associated Storage Elements. Usage is described in

   * [[Documentation/Release3.ComputeElementDiscoveryScripts][Compute Element Discovery Scripts]]

---++ Advanced Usage

---+++ How the Scripts Work

The scripts work by evaluating xqueries on the BDII data which has been transformed to XML. The evaluation is done using two components. The caching component extracts the paths from all xquery scripts and converts them to LDAP queries. The query is done on the OSG BDII endpoint, and the results are converted into XML. The XML output is saved in the &quot;cache&quot; directory as a file. All is done using the Glue Schema, version 1.3, employed by the BDII service. In the second step, the xquery script is evaluated on the resulting XML file using the Saxon processor.

---+++ Running XQuery Scripts

If you have written your own xquery script, you may run it against the OSG BDII using the included &quot;xquerybase&quot; utility, as in this example

&lt;pre class=&quot;screen&quot;&gt;
xquerybase $VDT_LOCATION/discovery/bin/surl.xq --vo engage --storage_element_id &quot;&quot; --free_online_size 0 --show_storage_element_id false --show_site_name false
&lt;/pre&gt;

The parameters are external variables defined in your script. For  more details, please [[Documentation/Release3.OpportunisticStorageXqueryScripts][XQuery scripts for composition of commands]].

---+++ Searching the BDII using XPath Expressions

You may query the BDII directly using XPath expressions written using Glue Schema 1.3 as in this example

&lt;pre class=&quot;screen&quot;&gt;
xpathsearch //GlueCE/@GlueCEName
&lt;/pre&gt;

This is most useful for reading relatively simple information out of the BDII without the need for additional operations provided by XQuery. Please see the following topic for a more complete description: [[Documentation/Release3.StorageDiscoveryXpathSearch][Storage Discovery XPath Search]].

&lt;!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
 DEAR DOCUMENT OWNER
 ===================

 Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER = DouglasStrain

 Please define the document area, choose one of the defined areas from the next line
 DOC_AREA = (ComputeElement|Storage|VO|Security|User|Monitoring|General|Trash/Trash/Integration|Operations|Tier3)
   * Local DOC_AREA       = Storage

 define the primary role the document serves, choose one of the defined roles from the next line
 DOC_ROLE = (EndUser|Student|Developer|SysAdmin|VOManager)
   * Local DOC_ROLE       = Scientist

 Please define the document type, choose one of the defined types from the next line
 DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = HowTo
  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

 Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %YES%

 change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

 change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %YES%

 change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %YES%


 DEAR DOCUMENT REVIEWER
 ======================

 Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = NehaSharma
 Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %YES%


 DEAR DOCUMENT TESTER
 ====================

 Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = NehaSharma
 Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %YES%
############################################################################################################
--&gt;


-- Main.DouglasStrain - 11 Oct 2011

