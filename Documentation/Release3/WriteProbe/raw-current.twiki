---+!! How to write an !RSV probe:

This page contains the technical details for how to write an !RSV probe.  The [[WriteYourOwnRSVProbe][overview of the probe writing process is here]].

Writing a probe has become *much* easier with the !RSV 3.3 release! Instead of writing a script that fits into the framework of RSV you simply write a script that does the interesting work, and then the new RSV architecture will do the RSV bits automatically for you.  Specifically, the RSV framework will now 
   * wrap your probe&#39;s status and output in the WLCG Probe Specification Output.  Now you can provide a very simple output format.
   * transfer your job to the remote CE (via Condor- G or globus-job-run) if it should execute remotely.  Your job does not need to understand job submission anymore

[[RSVV33ProbeComparison][Compare the old and new style probes]]

%TOC{depth=&quot;3&quot;}%

---++ Language constraints:
Your probe can be written in any standard language that will be available on a !CE or !RSV installation (e.g. sh, Perl, Python).  Be careful which Perl and Python modules you use - ensure they are available in a CE install.

---++ Naming your probe

Your probe must end in the suffix =-probe= to be recognized by the !RSV infrastructure.

---++ Probe input:

Your probe will get the following parameters as input.  Depending on the probe it may use them or ignore them.

   * -m &amp;lt;metric&amp;gt; - the metric to run.  e.g. =org.osg.general.ping-host=.  You can use this input to differentiate what to run if your probe implements multiple metrics.
   * -u &amp;lt;host&amp;gt; - the fully qualified hostname to run against, e.g. =osg-edu.cs.wisc.edu=

---++ Probe output:
   * Your probe must return status and details on STDOUT
   * Your probe can (and should) write any other debugging info to STDERR.  STDERR can come before/after/in-the-middle of STDOUT, the order does not matter.

The status can be in one of two formats, &#39;brief&#39; and &#39;wlcg&#39;.


---+++ Brief format
The brief output format has been developed so that probe authors do not need to fully understand the wlcg format.  =rsv-control= will parse the brief output and create a wlcg-style record.

The brief mode is defined as follows:
   * 1st line: &#39;RSV BRIEF RESULTS:&#39; (without the quotes)
   * 2nd line: the metric status (OK, CRITICAL, etc.)
   * All remaining lines are the details
   * A trailing EOT is *not* necessary

Status can be one of:
|  *Status*  |  *Description*  |
|  OK  |  Service is running as expected  |
|  WARNING  |  Service may be degraded in some way, or about to become degraded  |
|  CRITICAL  |  Service has a problem affecting functionality and/or availability  |
|  UNKNOWN  |  Cannot determine service status  |

Here are some examples

Metric run resulting in &#39;OK&#39; status:
&lt;pre class=&quot;screen&quot;&gt;
RSV BRIEF RESULTS:
OK
Ping succeeded
&lt;/pre&gt;

Metric run resulting in a non-OK status:
&lt;pre class=&quot;screen&quot;&gt;
RSV BRIEF RESULTS:
CRITICAL
Ping unsuccessful against host foo.cs.wisc.edu

Troubleshooting tips:
 - Is the network available?
 - Is the remote computer available?

Ping output:
ping: unknown host foo
&lt;/pre&gt;

---+++ wlcg format
The wlcg output mode will look familiar to anyone who has used !RSV in the past.  It is provided for historical reasons and you probably want to use the brief format (see above) instead.

&lt;pre class=&quot;screen&quot;&gt;
metricName: org.osg.certificates.crl-expiry
metricType: status
timestamp: 2010-10-01T16:30:00Z
metricStatus: OK
serviceType: OSG-CE
serviceURI: pg.ihepa.ufl.edu
gatheredAt: pg.ihepa.ufl.edu
summaryData: OK
detailsData: OK: All CRLs have been recently updated
88 CRLs tested.
	0 had not been updated for atleast 72 hours;
	0 CRLs have not been updated for atleast 9 hours;
	88 CRLs have been updated with the last 9 hours.
EOT
&lt;/pre&gt;

(There is probably somewhere I could link to in the twiki to fully explain the syntax but I don&#39;t know where that is currently).


---++ Return code:
   * always return 0 if the job produced a status and details (even if the status is not OK)
   * return non-zero if the job fails for a different reason (such as bad inputs, missing exes, etc)

---++ Where will your probe run?
In order to simplify probe development we have added a concept of &#39;local&#39; and &#39;grid&#39; metrics.  If your probe should run on the remote CE then you probably want the &#39;grid&#39; option.  If your probe should run on the same computer that RSV is running you want the &#39;local&#39; option.  Note which type you need, you will use this info when installing your probe.

   * remotely on a CE
      * The !RSV infrastructure will execute the probe via Condor-G on the host being monitored.  
      * This means that when the probe starts executing it will already be on the remote host with the appropriate environment set (e.g. OSG_LOCATION).
      * Some good candidates for this type of probe would be checking the osg-version, CA Certificates, or CE directory permissions.
      * This simplifies the probe development significantly since it does not need to understand Globus, proxies, authentication, etc.  
   * locally
      * The probe will execute on the same computer !RSV is running on.  
      * The probe must use the appropriate commands to monitor the remote host (e.g. =ping=, =globus-url-copy=, =srm-ping=).  
      * If the probe is going to run =globus-job-run= to execute some code on the remote computer, it is a good candidate to use the &#39;remote&#39; universe instead (described above).  
   * remote-batch
      * This is not supported yet, but we may add a way to run a metric on the remote batch system instead of running a fork job.  If this will be useful to you let us know.

---++ OSG 1.2 vs. OSG 3.0:
Probes should support monitoring both OSG 1.2 and OSG 3.0 CEs (unless it does not make sense to support one of the versions).  The way to determine whether your probe is executing on an OSG 1.2 vs. OSG 3.0 CE is to look for OSG_LOCATION in the environment.  If OSG_LOCATION is defined, the CE is 1.2.  If OSG_LOCATION is not defined, the CE is 3.0.  

For non-CE probes, if there is a notable difference between OSG 1.2 and 3.0 then a detection method will need to be determined on a case-by-case basis. 

Here is a sample code snippet in Perl that shows what your probe should do to detect 1.2 vs. 3.0.  In this example, =monitor_12()= and =monitor_30()= would be subroutines that would do the interesting work.
&lt;pre class=&quot;screen&quot;&gt;
if(defined $ENV{OSG_LOCATION}) {
    monitor_12();
}
else {
    monitor_30();
}
&lt;/pre&gt;
