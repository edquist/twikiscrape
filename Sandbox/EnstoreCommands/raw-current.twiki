Enstore provides commands that allow you to communicate with various components of the system. The basic syntax of all Enstore commands is 

&lt;verbatim&gt;
 % enstore &lt;command&gt; [--option [argument] ...]
&lt;/verbatim&gt;

All options start with a double dash (--). The return codes are 0 (zero) for success, non-zero for failure (currently all failures return number 1). 


---+ enstore info 
As of encp v3_2, the command enstore info supersedes enstore file and enstore volume. The developers may decide to remove these latter two commands in future versions of encp. 

This command communicates with the File Clerk (see section 8.1 File Clerk) and the Volume Clerk (see section 8.2 Volume Clerk). It returns information about specified file(s) or volume(s). 

---++ Syntax: 

&lt;verbatim&gt;
 % enstore info [--option [argument] ... ]
&lt;/verbatim&gt;

---++ Options: 

---+++ -h, --help 

Prints the options (i.e., prints this message). Example: 

&lt;verbatim&gt;
 $ enstore info --help
&lt;/verbatim&gt;


---+++ --bfid &amp;lt;BFID&amp;gt; 

Returns information (metadata) about the file corresponding to the specified bfid.

You can get the bfid of a file from the enstore pnfs --bfid &amp;lt;FILE_NAME&amp;gt; command (section 9.4 enstore pnfs); get the filename from searching PNFS namespace.

_Example:_


&lt;verbatim&gt;
 $ enstore info --bfid CDMS105770745000000

	{&#39;bfid&#39;: &#39;CDMS105770745000000&#39;, 
	&#39;complete_crc&#39;: 1191066979L, 
	&#39;deleted&#39;: &#39;no&#39;, 
	&#39;drive&#39;: &#39;stkenmvr7a:/dev/rmt/tps0d1n:4560000022&#39;, 
	&#39;external_label&#39;: &#39;VO3222&#39;, 
	&#39;location_cookie&#39;: &#39;0000_000000000_0005661&#39;, 
	&#39;pnfs_mapname&#39;: &#39;&#39;, 
	&#39;pnfs_name0&#39;: &#39;/pnfs/fs/usr/test/xyz/srmtest/ar017983.0001phys_10&#39;, 
	&#39;pnfsid&#39;: &#39;000500000000000000190EA8&#39;, 
	&#39;pnfsvid&#39;: &#39;&#39;, 
	&#39;sanity_cookie&#39;: (65536L, 3203712884L), 
	&#39;size&#39;: 197354833L}
&lt;/verbatim&gt;

This option may be used in any of four ways to return the same information, depending on what information you initially know about the file. 

---+++ --file &amp;lt;PATH&amp;gt; 

---+++ --file &amp;lt;BFID&amp;gt;
Equivalent to enstore info --bfid &amp;lt;BFID&amp;gt; 

---+++ --file &amp;lt;PNFSID&amp;gt;

---+++ --file &amp;lt;VOLUME:LOCATION&amp;gt; 

Returns information on the specified file. This example uses the path: 

&lt;verbatim&gt;
 $ enstore info --file /pnfs/test/NULL/1KB_251

	{&#39;bfid&#39;: &#39;WAMS111453908000000&#39;, 
	&#39;complete_crc&#39;: 0L, 
	&#39;deleted&#39;: &#39;no&#39;, 
	&#39;drive&#39;: &#39;rain:/dev/null:0&#39;, 
	&#39;external_label&#39;: &#39;NULL01&#39;, 
	&#39;gid&#39;: 6209, 
	&#39;location_cookie&#39;: &#39;0000_000000000_0000609&#39;, 
	&#39;pnfs_name0&#39;: &#39;/pnfs/test/NULL/1KB_251&#39;, 
	&#39;pnfsid&#39;: &#39;000100000000000000056258&#39;, 
	&#39;sanity_cookie&#39;: (1024L, 0L), 
	&#39;size&#39;: 1024L, 
	&#39;uid&#39;: 5744}
&lt;/verbatim&gt;

The file could also be specified as one of the following (BFID, PNFSID or VOLUME:LOCATION (external_label:location_cookie): 

&lt;verbatim&gt;
 $ enstore info --file WAMS111453908000000

 $ enstore info --file 000100000000000000056258

 $ enstore info --file NULL01:0000_000000000_0000609
&lt;/verbatim&gt;

---+++ --gvol &amp;lt;VOLUME_NAME&amp;gt; 
This is just like enstore info --vol &amp;lt;VOLUME_NAME&amp;gt;, except that this one prints human-readable time fields (e.g., &amp;#8220;declared&amp;#8221;, &amp;#8220;first_access&amp;#8221; and &amp;#8220;last_access&amp;#8221; fields). 

_Example:_ 

&lt;verbatim&gt;
 $ enstore info --gvol VO3332 
	{&#39;blocksize&#39;: 131072, 
	&#39;capacity_bytes&#39;: 64424509440L, 
	&#39;declared&#39;: &#39;Wed Jan 16 16:13:57 2002&#39;, 
	&#39;eod_cookie&#39;: &#39;0000_000000000_0000044&#39;, 
	&#39;external_label&#39;: &#39;VO3332&#39;, 
	&#39;first_access&#39;: &#39;Fri May 10 12:59:35 2002&#39;, 
	&#39;last_access&#39;: &#39;Mon Oct 27 22:35:45 2003&#39;, 
	&#39;library&#39;: &#39;9940&#39;, 
	&#39;media_type&#39;: &#39;9940&#39;, 
	&#39;non_del_files&#39;: 43, 
	&#39;remaining_bytes&#39;: 1785262080L, 
	&#39;sum_mounts&#39;: 234, 
	&#39;sum_rd_access&#39;: 213, 
	&#39;sum_rd_err&#39;: 0, 
	&#39;sum_wr_access&#39;: 43, 
	&#39;sum_wr_err&#39;: 0, 
	&#39;system_inhibit&#39;: [&#39;none&#39;, &#39;full&#39;], 
	&#39;user_inhibit&#39;: [&#39;none&#39;, &#39;none&#39;], 
	&#39;volume_family&#39;: &#39;cms.objy_data_files.cpio_odc&#39;, 
	&#39;wrapper&#39;: &#39;cpio_odc&#39;} 
&lt;/verbatim&gt;

---+++ --just
Used with --pvols to list problem. See enstore info --pvols.

---+++ --list &amp;lt;VOLUME_NAME&amp;gt;: Lists the files in the specified volume with their volume name, bfid, size, location (file number) on volume, delete flag, and the original filename in pnfs. 

You can get the volume name from the enstore pnfs command, using either --xref or --layer (section 9.4 enstore pnfs), or from the &amp;#8220;external_label&amp;#8221; field of the enstore info --bfid &amp;lt;BFID&amp;gt; command (shown above). 

This replaces both enstore file --list &amp;lt;VOLUME_NAME&amp;gt; and enstore volume --list &amp;lt;VOLUME_NAME&amp;gt;. 

_Example:_

&lt;verbatim&gt;
 $ enstore info --list VO3222 
	label bfid size location_cookie delflag 
	original_name 
	VO3222 CDMS106503213600000 983803 0000_000000000_0011536 deleted 
	/pnfs/fs/usr/eagle/dcache-tests/274.dcache_page_p_27750 
&lt;/verbatim&gt;
	
(This shows one of many lines appearing in the real output, and is 
reformatted to two lines for readability.) 


---+++ --ls-active &amp;lt;VOLUME_NAME&amp;gt; 

Lists active files in a volume. 

You can get the volume name from the enstore pnfs command, using either --xref or --layer (section 9.4 enstore pnfs), or from the &amp;#8220;external_label&amp;#8221; field of the enstore info --bfid &amp;lt;BFID&amp;gt; command (shown above). 

_Example:_ 

&lt;verbatim&gt;
 $ enstore info --ls-active VO3222
	
	/pnfs/fs/usr/eagle/dcache-tests/101.dcache_page_a_24401
	/pnfs/fs/usr/eagle/dcache-tests/101.dcache_page_24401
	/pnfs/fs/usr/test/stress-test/myfile1
	/pnfs/fs/usr/test/stress-test/myfile3
	/pnfs/fs/usr/test/stress-test/file128m-11
	...
&lt;/verbatim&gt;

---+++ --ls-sg-count &amp;lt;VOLUME_NAME&amp;gt; 

Lists allocated tape counts by library and by storage group. If &amp;#8220;storage group&amp;#8221; has value &amp;#8220;none&amp;#8221;, the negative number under &amp;#8220;allocated&amp;#8221; gives the number of tapes that are available in the robot, but not yet assigned to a storage group. 

_Example:_ 

&lt;verbatim&gt;
 $ enstore info --ls-sg-count VO3332

	 library storage group allocated
	========================================
	
	
	... 
	9940 ktev 189 
	9940 lqcd 150 
	9940 miniboone 132 
	9940 minos 109 
	9940 none -13 
	9940 patriot 20 
	9940 sdss 608 
	9940 test 28 
	9940 theory 70 
	CD-9940B cms 129 
	... 
&lt;/verbatim&gt;


---+++ --pvols [--just &amp;lt;VOLUME_1&amp;gt; VOLUME_2&amp;gt; ...] 
Without --just, this lists all problem volumes. 

With --just followed by a space-separated list of volume names, it lists only the problem volumes among the given list. The columns returned are: volume name, primary status, primary status time, secondary status, secondary status time. (The time fields are relatively new; not all volumes will display them.) 

_Example:_

&lt;verbatim&gt;
 $ enstore info --pvols 
		==== readonly 
		LEGL10 none * readonly 0913-1540 
		LEGL98 none * readonly 0819-2329 
		... 
		==== full 
		... 
		VO4845 none * full * 
		VO4846 none 1023-1032 full * 
		VO4847 none * full * 
		VO4848 none * full * 
		VO4849 none * full * 
		VO4850 none * full 1016-2315 
		VO4851 none * full 1017-0409 
	... 
	$ enstore volume --pvols --just VO3332 
&lt;/verbatim&gt;
	
(no sample output available) 

---+++ --show-bad 
Lists all files that are currently unavailable due to media problems. When a tape problem is discovered, the tape is sent to the vendor for file recovery. In the interim, a cloned tape is made available to users, with the bad files marked. This command option lets you list the bad files. The output lists the tape number, BFID, file size in bites, and pnfs path of file. 

_Example:_

&lt;verbatim&gt;
 $ enstore info --show-bad 
	... 
	VO0053 CDMS105770745000000 95530315 
	/pnfs/fs/usr/xyz/my_data/2004-4/.bad.F000xyz43_0000.mdaq.root 
	... 
&lt;/verbatim&gt;
We show only one output line, and it is displayed on two lines for readability. Notice the &amp;#8220;.bad.&amp;#8221; at the front of the filename; this is how the bad files are marked. 

---+++ --usage 
Prints short help message. 

_Example:_ 

&lt;verbatim&gt;
 $ enstore info --usage 
	Usage: 
		info [ -h --bfid= --help --list= --ls-active= --usage ] 
&lt;/verbatim&gt;

---+++ --vol &amp;lt;VOLUME_NAME&amp;gt; 

Returns detailed information about specified volume 

_Example:_ 

&lt;verbatim&gt;
 $ enstore info --vol VO3332
	
	{&#39;blocksize&#39;: 131072, 
	&#39;capacity_bytes&#39;: 64424509440L, 
	&#39;declared&#39;: 1011219237.849051, 
	&#39;eod_cookie&#39;: &#39;0000_000000000_0000044&#39;, 
	&#39;external_label&#39;: &#39;VO3332&#39;, 
	&#39;first_access&#39;: 1021053575.259737, 
	&#39;last_access&#39;: 1067315745.238969, 
	&#39;library&#39;: &#39;9940&#39;, 
	&#39;media_type&#39;: &#39;9940&#39;, 
	&#39;non_del_files&#39;: 43, 
	&#39;remaining_bytes&#39;: 1785262080L, 
	&#39;sum_mounts&#39;: 234, 
	&#39;sum_rd_access&#39;: 213, 
	&#39;sum_rd_err&#39;: 0, 
	&#39;sum_wr_access&#39;: 43, 
	&#39;sum_wr_err&#39;: 0,
	&#39;system_inhibit&#39;: [&#39;none&#39;, &#39;full&#39;],
	&#39;user_inhibit&#39;: [&#39;none&#39;, &#39;none&#39;], 
	&#39;volume_family&#39;: &#39;cms.objy_data_files.cpio_odc&#39;, 
	&#39;wrapper&#39;: &#39;cpio_odc&#39;}
&lt;/verbatim&gt;

---+++ --vols or --vols &amp;lt;VOLUME_STATUS&amp;gt; or --vols &amp;lt;KEY&amp;gt; &amp;lt;VALUE&amp;gt; 

Lists all volumes with their available space, the system inhibits, the library, the volume family (period-separated concatenation of storage group, file family and file family wrapper) and any comments. 

The VOLUME_STATUS argument is optional. If left off, all volumes are listed. Possible values for this argument include: NOACCESS, NOTALLOWED, full, read_only, migrated. 

The KEY option accepts: storage_group, library and media_type 

_Example: _

&lt;verbatim&gt;
 $ enstore info --vols

	label avail. system_inhibit library vol_family comment 
	... 
	VO0053 1.19GB (none full ) eagle cms.objy_data_files.cpio_odc 
	VO0054 0.51GB (none full ) eagle cms.objy_data_files.cpio_odc 
	VO0055 0.17GB (none full ) eagle theory.theory-canopy-C.cpio_odc 
	VO0056 0.65GB (none full ) eagle theory.theory-canopy-D.cpio_odc 
	... 
&lt;/verbatim&gt;

---+ enstore library
This command communicates with the Library Manager (see section 8.3 Library Manager). You can use it to get information pertaining to a particular Library Manager. Use the online monitoring pages (see Chapter 10: Monitoring Enstore on the Web) to find the library manager of interest. 

---++ Syntax: 

&lt;verbatim&gt;
 % enstore library [--option [argument] ... ] &lt;library&gt;
&lt;/verbatim&gt;

The &lt;library&gt; argument is required except when using the --help option; the &amp;#8220;.library_manager&amp;#8221; portion of the library name is optional. 

---++ Options: 

---+++ -h, --help
Prints this message (i.e., prints the options). Example:


$ enstore library --help


Usage: 
library [OPTIONS]... library


---+++ --get-asserts &lt;library&gt; 
print sorted lists of pending volume asserts 

---+++ --get-queue &amp;lt;HOST_NAME&amp;gt; 
print queue submitted from the specified host. 

If empty string specified, print the whole queue

---+++ --get-suspect-vols 
print suspect volume list

---+++ --get-work-sorted 
print sorted lists of pending and active requests


---+++  -h, --help 
Prints brief help messge

---+++ --usage 
Prints short help message

---+++ --get-asserts &amp;lt;LIBRARY&amp;gt;
Prints sorted lists of pending volume asserts for specified library. 

_Example:_

&lt;verbatim&gt;
 $ enstore library --get-asserts 9940.library_manager

	Pending assert requests: 0
	Active assert requests: 0
	{&#39;status&#39;: (&#39;ok&#39;, None)}
&lt;/verbatim&gt;

---+++ --get-queue &amp;lt;HOST_NAME&amp;gt; &amp;lt;LIBRARY&amp;gt; 

Prints queue submitted from the specified encp client host. Both arguments are required. If quoted empty string is specified for host name, it prints the whole queue (for all hosts). 

Examples: 

&lt;verbatim&gt;
 $ enstore library --get-queue stkensrv3 9940.library_manager
	
	Pending write requests
	Active requests
	Pending read requests: 0
	Pending write requests: 2
	Active read requests: 0
	Active write requests: 0
	{&#39;status&#39;: (&#39;ok&#39;, None)}
&lt;/verbatim&gt;

The top two lines tell us that there are no pending or active transfers involving stkensrv3 for the 9940 library manager. The 4th line tells us there are 2 pending write requests for this library manager from hosts other than stkensrv3. 

If all hosts are specified (the next example), the command returns the fields: host name, library manager, username (of encp request), input filename, and output filename for each pending and/or active request (3 shown here), and ends with a summary: 

&lt;verbatim&gt;
$ enstore library --get-queue &quot;&quot; 9940.library_manager
	
	Active requests
	
	fnsimu2 9940.library_manager lixn 
	/pnfs/btev/geant2003/xiaonan/dstar_xiaonan_1.evt.gz 
	/scr/bphys6/lixn/dstar_xiaonan_1.evt.gz M 9944
	
	
	fsgi01 9940.library_manager rschultz 
	/usr/bdms/rschultz/fl_066_uplsr7/fl_ed_066_uplsr7.ldhi 
	/pnfs/BDMS/lens/fl_066_uplsr7/fl_ed_0663
	
	
	fnsfh 9940.library_manager minfarm 
	/export/stage02_minos/C00040259_0000.tdaq.root 
	/pnfs/minos/caldet_reco/tdaq_data/2002-09/C0004027
	
	
	Pending read requests: 0
	Pending write requests: 0
	Active read requests: 1
	Active write requests: 2
	{&#39;status&#39;: (&#39;ok&#39;, None)}
&lt;/verbatim&gt;

---+++ &lt;code&gt;--get-suspect-vols &amp;lt;LIBRARY&amp;gt;&lt;/code&gt; 

Prints suspect volume list for specified library manager. See 10.6.1 Suspect Volumes. 

_Example:_ 
&lt;verbatim&gt;
$ enstore library --get-suspect-vols 9940.library_manager
	
	[{&#39;movers&#39;: [&#39;994071.mover&#39;], &#39;external_label&#39;: &#39;VO4523&#39;,
	&#39;time&#39;: 1067290586.907726}, {&#39;movers&#39;: [&#39;994051.mover&#39;, &#39;994061.mover&#39;, &#39;]
&lt;/verbatim&gt;

---+++ --get-work-sorted &amp;lt;LIBRARY&amp;gt;
Prints sorted lists of pending and active requests. It sorts by queue. 

_Example:_
&lt;verbatim&gt;
$ enstore library --get-work-sorted 9940.library_manager
	
	{&#39;write_queue&#39;: [], &#39;read_queue&#39;: [], &#39;admin_queue&#39;: []}
	[{&#39;status&#39;: (&#39;ok&#39;, None), &#39;vc&#39;: {&#39;status&#39;: (&#39;ok&#39;, None), 
	&#39;declared&#39;: 1011741604.130481, &#39;si_time&#39;: [1041612783.99499, 0], &#39;blocksiz]
&lt;/verbatim&gt;


---+ enstore monitor
This command communicates with the Monitor Server (see Chapter 10: Monitoring Enstore on the Web) to get network speed information. 

On machines with an enstore.conf file (see Appendix A: Network Control), the enstore monitor command uses the routing already established there. If enstore monitor set up its own, it would interfere with the routes currently in use. 

---++ Syntax: 

&lt;verbatim&gt;
 % enstore monitor [--option [argument] ...]
&lt;/verbatim&gt;

---+++ -h, --help 
Prints the options. 

---+++ --host &amp;lt;HOSTIP&amp;gt; 
Selects a single host 

---+++ --port &amp;lt;PORT&amp;gt; 
Selects a port 

---+++ --usage 
Prints short help message 

---+++ --verbose &amp;lt;VERBOSE&amp;gt; 
Print out information. 

---+++ --host [HOST_NAME or IP_ADDRESS] 
Returns network rate for the specified host (Enstore node). If you don&amp;#8217;t specify host, it runs the command for all hosts. Example below shows results for a single host. 

_Example:_ 
&lt;verbatim&gt;
$ enstore monitor --host stkensrv3 
	Trying stkensrv3.fnal.gov 
	Network rate measured at 11.33 MB/S recieving and 11.1 MB/S sending. 
&lt;/verbatim&gt;

---+++ --port &amp;lt;PORT&amp;gt; 
Selects the specified port. If you don&amp;#8217;t specify port, it runs the command for the default port. 

---+++ --verbose &amp;lt;INTEGER_VALUE&amp;gt; 

This command is used to help find and fix network problems. It prints detailed information about actions taken. The higher the number you give as an argument, the more info displayed. Example: 

&lt;verbatim&gt;
$ enstore monitor --host stkensrv3 --verbose 20
	
	6 Tue Oct 28 10:48:13 2003 msc called with args: [&#39;monitor&#39;, &#39;--host&#39;,
	&#39;stkensrv3&#39;, &#39;--verbose=20&#39;]
	13 Tue Oct 28 10:48:13 2003 Get monitor_server config info from server
	Trying stkensrv0.fnal.gov
	13 Tue Oct 28 10:48:13 2003 Get None config info from server
	13 Tue Oct 28 10:48:13 2003 Get None config info from server
	13 Tue Oct 28 10:48:13 2003 Get log_server config info from server
	13 Tue Oct 28 10:48:13 2003 Get log_server config info from server
	13 Tue Oct 28 10:48:13 2003 Get None config info from server
	13 Tue Oct 28 10:48:13 2003 Get alarm_server config info from server
	...
	10 Tue Oct 28 10:48:14 2003 Connecting to monitor server.
	10 Tue Oct 28 10:48:14 2003 Obtaining error status for data socket.
	10 Tue Oct 28 10:48:15 2003 Get the final dialog rate information.
	Network rate measured at 11.34 MB/S recieving and 11.23 MB/S sending.
&lt;/verbatim&gt;


---+ enstore pnfs
Enstore has a pnfs command that allows you to retrieve a variety of information, as listed in the option table below. Off-site users cannot mount /pnfs, and therefore cannot run this command. 

Using this command to perform PNFS manipulations and/or change PNFS tags is restricted to Enstore administrators and/or their designated gurus, and is covered in Appendix B: Changing PNFS Tags. 

---++ Syntax: 

&lt;verbatim&gt;
 % enstore pnfs [--option [argument] ... ]
&lt;/verbatim&gt;

---+++ --help 
List the options for the enstore pnfs command.

---+++ --bfid &amp;lt;FILENAME&amp;gt; 
lists the bit file id for file 

---+++ --cat &amp;lt;FILENAME&amp;gt; [LAYER] 
see --layer 

---+++ --file-family [FILE_FAMILY] 
Gets file family tag, default; sets file family tag, optional 

---+++ --file-family-width [FILE_FAMILY_WIDTH] 
Gets file family width tag, default; sets file family tag, optional 

---+++ --file-family-wrapper [FILE_FAMILY_WRAPPER] 
Gets file family width tag, default; sets file family tag, optional 

---+++ --filesize &amp;lt;FILE&amp;gt; 
Print out real filesize 

---+++ -h, --help 
Prints this messge 

---+++ --info &amp;lt;FILENAME&amp;gt; 
See --xref 

---+++ --layer &amp;lt;FILENAME&amp;gt; [LAYER] 
Lists the layer of the file 

---+++ --library [LIBRARY] 
Gets library tag, default; sets library tag, optional 

---+++ --tag &amp;lt;TAG&amp;gt; [DIRECTORY] 
Lists the tag of the directory 

---+++ --tagchmod &amp;lt;PERMISSIONS&amp;gt; &amp;lt;TAG&amp;gt; 
Changes the permissions for the tag; use UNIX chmod style permissions 

---+++ --tagchown &amp;lt;OWNER&amp;gt; &amp;lt;TAG&amp;gt; 
Changes the ownership for the tag; OWNER can be &#39;owner&#39; or &#39;owner.group&#39; 

---+++ --tags [DIRECTORY] 
lists tag values and permissions 

---+++ --usage 
prints short help message 

---+++ --xref &amp;lt;FILENAME&amp;gt; 
lists the cross reference data for file 

---+++ --bfid &amp;lt;FILE_NAME&amp;gt; 
Returns the BFID of the file; select file name to specify from within pnfs space and use relative/absolute path as needed. 

_Example:_ 
&lt;verbatim&gt;
 $ enstore pnfs --bfid /pnfs/mist/zuu/100MB_002 
	WAMS104102942800000
&lt;/verbatim&gt;

---+++ --cat &amp;lt;PATH_TO_FILE&amp;gt; [LAYER] 
--cat is an alias for --layer; see --layer. 

---+++ --file-family 
Prints the file family name associated with the current pnfs directory. 

_Example:_ 
&lt;verbatim&gt;
 $ enstore pnfs --file-family 
	dcache 
&lt;/verbatim&gt;

---+++ --file-family-width 
Prints the file family width associated with the current pnfs directory. 

_Example:_ 
&lt;verbatim&gt;
 $ enstore pnfs --file-family-width 
	 1
&lt;/verbatim&gt;

---+++ --file-family-wrapper 
Prints the file family wrapper associated with the current pnfs directory. 

_Example:_ 
&lt;verbatim&gt;
 $ enstore pnfs --file-family-wrapper 
	cpio_odc 
&lt;/verbatim&gt;

---+++ --filesize &amp;lt;PATH_TO_FILE&amp;gt; 
Prints the real filesize in bytes; useful for files of size greater than (2G-1) bytes, since PNFS stores file size as 1 in this case. 

_Example:_ 
&lt;verbatim&gt;
 $ enstore pnfs --filesize a01 
	24198 
&lt;/verbatim&gt;

---+++ --info &amp;lt;PATH_TO_FILE&amp;gt; 
Prints information about the file, this is an alias for the --xref option. See 

---+++ --xref. 

---+++ --layer &amp;lt;PATH-TO-FILE&amp;gt; &amp;lt;LAYER&amp;gt; 

Prints information about the file. Layer 0 is used internally by pnfs and it can&amp;#8217;t be viewed. Layer 1, the default, gives the file&amp;#8217;s BFID. Layer 2 is used by dCache. Layers 3, 5, 6, 7 are not currently used. Layer 4 produces output equivalent to --xref, but returns info without field labels. 

The option --cat is an alias for this option. 

_Examples:_ 

Layer 1 gives BFID (default): 
&lt;verbatim&gt;
$ enstore pnfs --layer a01

	CDMS105889726300000


$ enstore pnfs --layer a01 1

	CDMS105889726300000
&lt;/verbatim&gt;

Layer 2 is used for dCache: 
&lt;verbatim&gt;
$ enstore pnfs --layer a01 2

	2,0,0,0.0,0.0
	:c=1:d15ef6a3;l=554423;
	w-fcdfdata018-1
&lt;/verbatim&gt;

The file has a version1 crc of c=1:d15ef6a3, it has a length l=554423, and it is in pool w-fcdfdata018-1. 

&lt;verbatim&gt;
$ enstore pnfs --layer a01 2

	2,0,0,0.0,0.0
	:
&lt;/verbatim&gt;

Layer 4 gives --xref output (see --xref): 
&lt;verbatim&gt;
$ enstore pnfs --layer a01 4

	VO3222
	0000_000000000_0006264
	24198
	dcache
	/pnfs/fs/usr/test/xyz/srmtest/test_1_1/a01
	
	
	000500000000000000191030
	
	
	CDMS105889726300000
	stkenmvr5a:/dev/rmt/tps3d1n:4560000022
&lt;/verbatim&gt;

---+++ --tags [DIRECTORY] 

List the tag values of specified PNFS directory (if no directory argument, it lists tags for current working directory (cwd or pwd)). Example: 
&lt;verbatim&gt;
 $ pwd

	/pnfs/test/xyz/srmtest/test_1_1

 $ enstore pnfs --tags

	.(tag)(file_family) = dcache
	.(tag)(file_family_width) = 1
	.(tag)(file_family_wrapper) = cpio_odc
	.(tag)(library) = 9940
	.(tag)(storage_group) = test
	
	
	-rw-rw-r-- 11 root sys 6 Jul 26 2001 
	/pnfs/test/xyz/srmtest/test_1_1/.(tag)(file_family) 
	-rw-rw-r-- 11 root sys 1 May 5 2000 
	/pnfs/test/xyz/srmtest/test_1_1/.(tag)(file_family_width) 
	-rw-rw-r-- 11 root sys 8 May 5 2000 
	/pnfs/test/xyz/srmtest/test_1_1/.(tag)(file_family_wrapper) 
	-rw-rw-r-- 11 root sys 4 Jul 3 10:59 
	/pnfs/test/xyz/srmtest/test_1_1/.(tag)(library) 
	-rw-r--r-- 11 root sys 4 Jul 26 2001 
	/pnfs/test/xyz/srmtest/test_1_1/.(tag)(storage_group) 
&lt;/verbatim&gt;

(minor reformatting done to enhance readability) 

---+++ --xref &amp;lt;FILE_NAME&amp;gt; 

List cross-reference information (metadata) for specified file. (--info is an alias for --xref.) The information includes: 

   * volume: storage media volume label 
   * location cookie: file position on tape (the number of the file on tape) 
   * size: file size in bytes 
   * file family: file family 
   * original name: original name in /pnfs before any move/copy command issued; i.e., the destination filename given in the encp command used to copy the file to Enstore 
   * map file: obsolete, but some older files may have a value here 
   * pnfsid file: unique id for the file as assigned by PNFS 
   * pnfsid map: obsolete, but some older files may have a value here 
   * bfid: unique id for the file as assigned by Enstore (matches layer 1) 
   * origdrive: id of drive used when file was written to media (files generated prior to 10/2000, encp v2_5 or earlier, will not have a value here) 
   * crc: CRC of the file (appears for files after 10/2003, using encp v3_1 or greater) 

_Example:_
&lt;verbatim&gt;
 $ enstore pnfs --xref a01

	volume: VO3222
	location_cookie: 0000_000000000_0006264
	size: 24198
	file_family: dcache
	original_name: /pnfs/fs/usr/test/xyz/srmtest/test_1_1/a01
	map_file: 
	pnfsid_file: 000500000000000000191030
	pnfsid_map:
	bfid: CDMS105889726300000
	origdrive: stkenmvr5a:/dev/rmt/tps3d1n:4560000022
	crc: unknown
&lt;/verbatim&gt;

---+++ --library 
Returns the value of the library tag (the virtual library associated with files in the directory) for the current pnfs directory. Example: 
&lt;verbatim&gt;
$ enstore pnfs --library 

	9940
&lt;/verbatim&gt;


---+ enstore file (deprecated)
This command has been deprecated for users as of encp v3_2, and (along with enstore volume) replaced with enstore info (see section 9.1 enstore info). 

This command communicates with the File Clerk (see section 8.1 File Clerk). It returns information about a specified file or files on a specified volume. 

---++ Syntax: 

&lt;verbatim&gt;
 % enstore file [--option [argument] ... ]
&lt;/verbatim&gt;

---++ Options: 

---+++ -h, --help
Prints the options (i.e., prints this message). 
--bfid &amp;lt;BFID&amp;gt; get info of a file


---+++  -h, --help print this message


---+++ --list &amp;lt;VOLUME_NAME&amp;gt; list the files in a volume


---+++ --ls-active &amp;lt;VOLUME_NAME&amp;gt; list active files in a volume


---+++ --show-bad lists all bad files


---+++ --usage print short help message


---+++ --bfid &amp;lt;BFID&amp;gt; 

Returns information (metadata) about the file corresponding to the specified bfid. 

You can get the bfid of a file from the enstore pnfs --bfid &amp;lt;FILE_NAME&amp;gt; command (section 9.4 enstore pnfs); get the filename from searching PNFS namespace. 

_Example:_ 

&lt;verbatim&gt;
 $ enstore file --bfid CDMS105770745000000
	
	{&#39;bfid&#39;: &#39;CDMS105770745000000&#39;,
	
	 &#39;complete_crc&#39;: 1191066979L,
	
	 &#39;deleted&#39;: &#39;no&#39;,
	
	 &#39;drive&#39;: &#39;stkenmvr7a:/dev/rmt/tps0d1n:4560000022&#39;,
	
	 &#39;external_label&#39;: &#39;VO3222&#39;,
	
	 &#39;location_cookie&#39;: &#39;0000_000000000_0005661&#39;,
	
	 &#39;pnfs_mapname&#39;: &#39;&#39;,
	
	 &#39;pnfs_name0&#39;: &#39;/pnfs/fs/usr/test/xyz/srmtest/ar017983.0001phys_10&#39;,
	
	 &#39;pnfsid&#39;: &#39;000500000000000000190EA8&#39;,
	
	 &#39;pnfsvid&#39;: &#39;&#39;,
	
	 &#39;sanity_cookie&#39;: (65536L, 3203712884L),
	
	 &#39;size&#39;: 197354833L}
&lt;/verbatim&gt;

---+++ --list &amp;lt;VOLUME_NAME&amp;gt; 

Lists the files in the specified volume with their volume name, bfid, size, location (file number) on volume, delete flag, and the original filename in pnfs. 

You can get the volume name from the enstore pnfs command, using either --xref or --layer (section 9.4 enstore pnfs), or from the &amp;#8220;external_label&amp;#8221; field of the enstore file --bfid &amp;lt;BFID&amp;gt; command (shown above). 

The enstore info --list &amp;lt;VOLUME_NAME&amp;gt; is an alias for this command. 

_Example:_ 

&lt;verbatim&gt;
 $ enstore file --list VO3222

	label bfid size location_cookie delflag
	original_name
	
	VO3222 CDMS106503213600000 983803 0000_000000000_0011536 deleted
	/pnfs/fs/usr/eagle/dcache-tests/274.dcache_page_p_27750
&lt;/verbatim&gt;

(This shows one of many lines appearing in the real output, and isreformatted to two lines for readability.)

---+++ --ls-active &amp;lt;VOLUME_NAME&amp;gt;

Lists active files in a volume.

You can get the volume name from the enstore pnfs command, using either --xref or --layer (section 9.4 enstore pnfs), or from the &amp;#8220;external_label&amp;#8221; field of the enstore file --bfid &amp;lt;BFID&amp;gt; command (shown above).

_Example:_

&lt;verbatim&gt;
 $ enstore file --ls-active VO3222

	/pnfs/fs/usr/eagle/dcache-tests/101.dcache_page_a_24401
	/pnfs/fs/usr/eagle/dcache-tests/101.dcache_page_24401
	/pnfs/fs/usr/test/stress-test/myfile1
	/pnfs/fs/usr/test/stress-test/myfile3
	/pnfs/fs/usr/test/stress-test/file128m-11
	...
&lt;/verbatim&gt;

---+++ --show-bad 

Lists all files that are currently unavailable due to media problems. When a tape problem is discovered, the tape is sent to the vendor for file recovery. In the interim, a cloned tape is made available to users, with the bad files marked. This command option lets you list the bad files. The output lists the tape number, BFID, file size in bites, and pnfs path of file. 

Example: 

&lt;verbatim&gt;
 $ enstore info --show-bad
	
	...
	VO0053 CDMS105770745000000 95530315 
	/pnfs/fs/usr/xyz/my_data/2004-4/.bad.F000xyz43_0000.mdaq.root
	...
&lt;/verbatim&gt;

We show only one output line, and it is displayed on two lines for readability. Notice the &amp;#8220;.bad.&amp;#8221; at the front of the filename; this is how the bad files are marked. 

_Replaced by:_ enstore info --show-bad. 

---+++ --usage
Prints short help message. 

---+ enstore volume (deprecated)
This command has been deprecated for users as of encp v3_2, and replaced (along with enstore file) with enstore info (see section 9.1 enstore info).

This command communicates with the Volume Clerk (see section 8.2 Volume Clerk) to return information on data volumes.

---++ Syntax:

&lt;verbatim&gt;
 % enstore volume [--option [argument] ... ]
&lt;/verbatim&gt;

---+++ -h, --help 
Prints this message (i.e., prints the options). Example: 

---+++ --gvol &amp;lt;VOLUME_NAME&amp;gt; 
Get info of a volume in human readable time format 

---+++ --just &amp;lt;VOLUME_NAME&amp;gt; 
Used with --pvols to list problem 

---+++ --list &amp;lt;VOLUME_NAME&amp;gt; 
List the files in a volume 

---+++ --ls-active &amp;lt;VOLUME_NAME&amp;gt; 
List active files in a volume 

---+++ --ls-sg-count 
List all sg counts 

---+++ --pvols 
List all problem volumes 

---+++ --usage 
Prints short help message 

---+++ --vol &amp;lt;VOLUME_NAME&amp;gt; 
Get info of a volume 

---+++ --vols 
List all volumes 

---+++ --gvol &amp;lt;VOLUME_NAME&amp;gt; 
This is just like enstore volume --vol &amp;lt;VOLUME_NAME&amp;gt;, except that this one prints human-readable time fields (e.g., &amp;#8220;declared&amp;#8221;, &amp;#8220;first_access&amp;#8221; and &amp;#8220;last_access&amp;#8221; fields). 

_Example:_ 

&lt;verbatim&gt;
 $ enstore volume --gvol VO3332 
	{&#39;blocksize&#39;: 131072, 
	&#39;capacity_bytes&#39;: 64424509440L, 
	&#39;declared&#39;: &#39;Wed Jan 16 16:13:57 2002&#39;, 
	&#39;eod_cookie&#39;: &#39;0000_000000000_0000044&#39;, 
	&#39;external_label&#39;: &#39;VO3332&#39;, 
	&#39;first_access&#39;: &#39;Fri May 10 12:59:35 2002&#39;, 
	&#39;last_access&#39;: &#39;Mon Oct 27 22:35:45 2003&#39;, 
	&#39;library&#39;: &#39;9940&#39;, 
	&#39;media_type&#39;: &#39;9940&#39;, 
	&#39;non_del_files&#39;: 43, 
	&#39;remaining_bytes&#39;: 1785262080L, 
	&#39;sum_mounts&#39;: 234, 
	&#39;sum_rd_access&#39;: 213, 
	&#39;sum_rd_err&#39;: 0, 
	&#39;sum_wr_access&#39;: 43, 
	&#39;sum_wr_err&#39;: 0, 
	&#39;system_inhibit&#39;: [&#39;none&#39;, &#39;full&#39;], 
	&#39;user_inhibit&#39;: [&#39;none&#39;, &#39;none&#39;], 
	&#39;volume_family&#39;: &#39;cms.objy_data_files.cpio_odc&#39;, 
	&#39;wrapper&#39;: &#39;cpio_odc&#39;} 
&lt;/verbatim&gt;
	
---+++ --just 
Used with --pvols to list problem. See enstore volume 

---+++ --pvols. 

---+++ --list &amp;lt;VOLUME_NAME&amp;gt; 
This is an alias for the enstore info --list &amp;lt;VOLUME_NAME&amp;gt; command. See section 9.1 enstore info. 

---+++ --ls-active &amp;lt;VOLUME_NAME&amp;gt; 
Lists original file names of active files in a volume. Example: 

&lt;verbatim&gt;
 $ enstore volume --ls-active VO3332

	/pnfs/cms/UserFederation/data/jetmet_production/data/Collections/jm_Hit601_g12
	
	5_UCSD/jm02_qqh120_ll/EVD0.jet0102.DB
	/pnfs/cms/UserFederation/data/jetmet_production/data/TAssoc/jm_2x1033PUjm602_T
	kMu_g125_UCSD/jm02_hlt15-20/EVD11.jet0102.DB
	
	/pnfs/cms/UserFederation/data/jetmet_production/data/Digis/jm_2x1033PUjm602_Tk
	
	Mu_g125_UCSD/jm02-hlt0-15/EVD12.jet0102.DB
	/pnfs/cms/UserFederation/data/jetmet_production/data/Hits/jm_Hit601_g125_UCSD/
	jm02_hlt230-300/EVD12.jet0102.DB
	
	...
&lt;/verbatim&gt;

---+++ --ls-sg-count &amp;lt;VOLUME_NAME&amp;gt; 

Lists allocated tape counts by library and by storage group. If &amp;#8220;storage group&amp;#8221; has value &amp;#8220;none&amp;#8221;, the negative number under &amp;#8220;allocated&amp;#8221; gives the number of tapes that are available in the robot, but not yet assigned to a storage group. 

_Example:_ 

&lt;verbatim&gt;
 $ enstore volume --ls-sg-count VO3332

	 library storage group allocated
	========================================
	
	... 
	9940 ktev 189 
	9940 lqcd 150 
	9940 miniboone 132 
	9940 minos 109 
	9940 none -13 
	9940 patriot 20 
	9940 sdss 608 
	9940 test 28 
	9940 theory 70 
	CD-9940B cms 129 
	... 
&lt;/verbatim&gt;

---+++ --pvols [--just &amp;lt;VOLUME_1&gt; &amp;lt;VOLUME_2&gt; ...] 

Without --just, this lists all problem volumes. With --just followed by a space-separated list of volume names, it lists only the problem volumes among the given list. 

The columns returned are: volume name, primary status, primary status time, secondary status, secondary status time. (The time fields are relatively new; not all volumes will display them.) 

_Example:_ 

&lt;verbatim&gt;
 $ enstore volume --pvols 

	==== readonly
	LEGL10 none * readonly 0913-1540
	LEGL98 none * readonly 0819-2329
	...
	==== full
	...
	VO4845 none * full *
	VO4846 none 1023-1032 full *
	VO4847 none * full *
	VO4848 none * full *
	VO4849 none * full *
	VO4850 none * full 1016-2315
	VO4851 none * full 1017-0409
	...
$ enstore volume --pvols --just VO3332
	(no sample output available)
&lt;/verbatim&gt;

---+++ --vol &amp;lt;VOLUME_NAME&amp;gt; 

Returns detailed information about specified volume 

_Example:_

&lt;verbatim&gt;
 $ enstore volume --vol VO3332
	
	{&#39;blocksize&#39;: 131072, 
	&#39;capacity_bytes&#39;: 64424509440L, 
	&#39;declared&#39;: 1011219237.849051, 
	&#39;eod_cookie&#39;: &#39;0000_000000000_0000044&#39;, 
	&#39;external_label&#39;: &#39;VO3332&#39;, 
	&#39;first_access&#39;: 1021053575.259737, 
	&#39;last_access&#39;: 1067315745.238969, 
	&#39;library&#39;: &#39;9940&#39;, 
	&#39;media_type&#39;: &#39;9940&#39;, 
	&#39;non_del_files&#39;: 43, 
	&#39;remaining_bytes&#39;: 1785262080L, 
	&#39;sum_mounts&#39;: 234, 
	&#39;sum_rd_access&#39;: 213, 
	&#39;sum_rd_err&#39;: 0, 
	&#39;sum_wr_access&#39;: 43, 
	&#39;sum_wr_err&#39;: 0,
	&#39;system_inhibit&#39;: [&#39;none&#39;, &#39;full&#39;],
	&#39;user_inhibit&#39;: [&#39;none&#39;, &#39;none&#39;], 
	&#39;volume_family&#39;: &#39;cms.objy_data_files.cpio_odc&#39;, 
	&#39;wrapper&#39;: &#39;cpio_odc&#39;}
&lt;/verbatim&gt;

---+++ --vols 
Lists all volumes with their available space, the system inhibits, the library, the volume family (period-separated concatenation of storage group, file family and file family wrapper) and any comments. 

_Example:_ 

&lt;verbatim&gt;
 $ enstore volume --vols
	
	label avail. system_inhibit library vol_family comment 
	... 
	VO0053 1.19GB (none full ) eagle cms.objy_data_files.cpio_odc 
	VO0054 0.51GB (none full ) eagle cms.objy_data_files.cpio_odc 
	VO0055 0.17GB (none full ) eagle theory.theory-canopy-C.cpio_odc 
	VO0056 0.65GB (none full ) eagle theory.theory-canopy-D.cpio_odc 
	... 
&lt;/verbatim&gt;
