%DOC_STATUS_TABLE%
---+!! *&lt;noop&gt;%SPACEOUT{ &quot;%TOPIC%&quot; }%*
%TOC%

---++About this document
This document is intended for 
   * users who would like to learn more about Chimera namespace used by dCache
   * storage administrators who would like to configure their SE to use Chimera

---++Introduction
Chimera is a library providing a hierarchical name space with associated meta data. Where pools in dCache store the content of files, Chimera stores the names and meta data of those files. Chimera itself stores the data in a relational database. 

Chimera is the replacement and successor of PNFS, the original dCache name service. In any distributed storage system the nameserver can be a bottleneck. The primary way of achieving more performance was allowing access to nameserver (Chimera) from dCache components through an API, as opposed to requiring all communication through the filesystem interface as is the case with PNFS. Chimera also provides a mountable filesystem which satisfies the NFS 4.1 specification.The NFS 4.1 specification provides for mounting distributed storage in such a way that ordinary unix commands (cp, ls, etc) may work without modification.

The [[http://www.dcache.org/manuals/workshop2007/tigran-chimera-status.pdf][Chimera Status]] and [[http://www.dcache.org/manuals/d-grid/Chimera_goettingen.pdf][Chimera Overview]] talks are good sources for learning more about Chimera and its advantages over PNFS.

---++Engineering Considerations
For the chimera node:
   * 8 GB RAM
   * Postgres databases on raided disk (RAID 5) with back-up performed regularly 
   * Disk should be used exclusively for the Chimera database
     
%ICON{warning}% All user interactions with dCache will use the !PnfsManager. This means that the throughput of user interactions will depend on
     the speed of !PnfsManager, and so on the speed of the namespace. If these components are slow then dCache will be slow. 
     Therefore, when buying machines, the &quot;chimera node&quot; should be one of the fastest machines.
     If possible, buy enough memory so the machine&#39;s free memory (after starting the services) is big enough to store the entire namespace 
     in RAM. 8GB of RAM should be enough to handle information for 1,000,000 files. !PostGreSQL will use the kernel filesystem block-cache to cache database information. If there&#39;s sufficient free memory to store 
     the entire namespace then database reads never need to fetch information from disk, which will improve dCache performance.&lt;/p&gt;

---++ Software Requirements
   * dCache version &gt;= 1.9.0-4
   * JDK &gt;= 1.5.0
   * JDBC interface to RDBMS (tested with !PostgreSQL 8.3, Oracle 10g and DB2 v9.1). The JDBC-driver for !PostgreSQL is already included in the dCache package.&lt;br&gt;&lt;/br&gt;
     Note: Although Chimera will work with !PostgreSQL v8.2, it is recommended to use v8.3 or later. In particular, it seems that !PostGreSQL v8.2 is very slow at importing migrated SQL emitted by the pnfsDump utility

---++Installation
The [[http://vdt.cs.wisc.edu/extras//3.0.3/InstallingDcacheForOSG.README.html][VDT-dCache installation]] instructions include steps on configuring your SE to use Chimera. Chimera gets installed automatically during the dCache installation process.

---++PNFS-&gt;Chimera Migration
Please read the [[http://vdt.cs.wisc.edu/extras//3.0.3/PNFSChimeraMigration.html][VDT-dCache migration to chimera]] instructions on how to migrate from PNFS to Chimera.

---++Support
If you need help or have any questions, please send email to osg-storage@opensciencegrid.org

&lt;!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
 DEAR DOCUMENT OWNER
 ===================

 Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER = NehaSharma

 Please define the document area, choose one of the defined areas from the next line
 DOC_AREA = (ComputeElement|Storage|VO|Security|User|Monitoring|General|Trash/Trash/Integration|Operations|Tier3)
   * Local DOC_AREA       = Storage

 define the primary role the document serves, choose one of the defined roles from the next line
 DOC_ROLE = (EndUser|Student|Developer|SysAdmin|VOManager)
   * Local DOC_ROLE       = SysAdmin

 Please define the document type, choose one of the defined types from the next line
 DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = HowTo
  Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

 Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %NO%

 change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

 change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %NO%

 change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %YES%


 DEAR DOCUMENT REVIEWER
 ======================

 Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = TanyaLevshina
 Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %YES%


 DEAR DOCUMENT TESTER
 ====================

 Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = 
 Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %IN_PROGRESS%
############################################################################################################
--&gt;
