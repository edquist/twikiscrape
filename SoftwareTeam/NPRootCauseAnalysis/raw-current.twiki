---+ Native Packaging Root Cause Analysis

This document attempts to answer a question posed by Miron:

&lt;blockquote&gt;
Why have our native packaging efforts taken so long? Where did we go wrong, and what did we do right?
&lt;/blockquote&gt;

Dan Fraser and Alain Roy worked on this question. As input, Alain and Tim Cartwright put together a lot of the [[NativePackagingHistory][history of our native packaging efforts]].

---++ Findings

   * The team did not extract clear requirements from our requesters.
   * The team had a limited understanding of community expectations for how native packages are used, in part because no one on the team has system administration experience. (And this means there are unstated requirements stemming from these community expectations.)
   * The team did not have a requirements repository for tracking changes to requirements. 
   * Initially, the team attempted to keep our RPM and Pacman package in sync when it wasn&#39;t the right approach. We also had limited external guidance to help us understand the philosophical differences between Pacman and RPM.
   * We didn&#39;t appreciate how significant community work on native packaging was (Mattias Ellert, EPEL…)

---++ A brief history

---+++ Ancient history
The VDT first produced binary RPMs for EDG (then EGEE). We began doing this in September 2004, and we did it for a small subset of the VDT: Globus, !MyProxy, !GSIOpenSSH, !UberFTP. They were focused purely on the needs of EDG/EGEE and not intended to be used by anyone else. 

---+++ Native packages for LIGO
In May of 2009 we began creating native packages (both RPMs and Debian packages) for LIGO. They were beta quality in December 2009 and production quality in April 2010. LIGO was pleased with the results and has relied on them. There were several reasons that it took nearly a year: we didn&#39;t have dedicated effort (for example, Tim put in considerable effort on his class), and more importantly, we made several changes as we went along. Theses changes were made for two reasons. First, our understanding of LIGO&#39;s requirements became better, which tells us that we didn&#39;t fully understand their requirements at the beginning. Second, it took us a long time to fully understand the mindset of the community&#39;s approach to packaging. (This is related to the first point, since LIGO is part of the community and wanted packages that fit with what they have in the community.) 

In August of 2010, LIGO requested an upgrade to Globus 5. They had beta packages by November 2010 and a production release in February 2011. 

---+++ Non-LIGO native packages 
In March of 2010 we began work on a basic binary glexec RPM. We had an RPM within a couple of weeks and might be acceptable to VDT customers but did not meet community standards. (Many packages in one RPM &amp; binary only.) We began work on what we believed was a simple system for constructing binary RPMs out of our existing Metronome builds (for Pacman packages). We underestimated how hard this would be (it seemed like the easy route) and we were still focused on keeping RPMs and Pacman synchronized. Mat spent considerable time on the infrastructure to produce binary RPMs out of our builds. 

We shipped a reasonable binary glexec RPM in November 2011 and began working on Xrootd.We also defined the worker node project. In December we were asked to move to Xrootd 3.0. We provided a binary RPM for Xrootd 3.0 in February, but it had problems. These were discussed in March, and we agreed on Xrootd RPM requirements at the beginning of April. We shipped good quality RPMs in May, but the final release has been delayed for a pending update to Xrootd, which is out of our hands.

A set of worker node binary RPMs was available in March 2011 and were sent to testers.

---++ Details

Looking over the work, we had two primary problems. 

First, we did not have a clear set of requirements when we began working, nor a clearly documented plan. It is essential that for larger projects we must have a clearly defined set of requirements that have been agreed upon by the requester and by us. These requirements and the state of the work must be easy for everyone involved to see. That is, we need a requirements/work tracking system. 

Second, we did not have a good understanding of the community approaches to native packaging. This is closely related to the first point, because often our users want packages that work according to community expectations. They can&#39;t define all those requirements in a detailed, coherent way, but they know when the packages don&#39;t &quot;just work&quot; with the other packages they install on their system. 

---++ What will we do differently in the future?

   * We will get requirements and put them into a repository that can be tracked.
   * We will work with packaging systems separately and not attempt to keep them synchronized.
