---+ Major vs. Minor Updates of the OSG Software Stack
---+ (Or, when is the next OSG Software Stack release?)

Author: Alain Roy&lt;br&gt;
Date: March, 2010

---++ Motivation for writing this document
I (Alain) often answer questions about when the next update of the OSG Software Stack will be released. When I discuss it with people, I realize that there are some things that I thought were widely known and obvious, but in fact are not. This document is meant to clear up that confusion. If people don&#39;t agree with what is stated in here, we will discuss and revise the policy stated here.

---++Versioning of the OSG Software Stack
We describe the version of the OSG Software Stack with three numbers, such as 1.0.2 or 1.2.8. The second and third numbers have well-defined meanings:

The second digit states whether this is a stable or development release. An even digit mean &quot;stable&quot;, while an odd digit means &quot;development&quot;. For example:

| *Version* | *Type* |
| 1.0.0 | Stable | 
| 1.0.1 | Stable |
| 1.1.0 | Development |
| 1.2.0 | Stable |

By &quot;stable&quot;, we mean that it&#39;s appropriate for deployment on a production resource, while &quot;development&quot; isn&#39;t a good idea. Development releases are normally only run on our validation and integration testbeds, not on production sites.

The third digit is incremented whenever we make an update. If make _any_ change to OSG 1.2.5, then the new version will be called OSG 1.2.6. 

We have two kinds of releases:

*Major release*: When we increment the second digit, it&#39;s a major release.&lt;br&gt;
*Minor release*: When we increment the third digit, it&#39;s a minor release.

(Note that the underlying VDT is versioned the same way.)

---++ Major vs. Minor
Historically, we released a new major release approximately every six months. Minor releases were only backwards-compatible updates with no new features and did not require significant testing in the integration testbed. This provided a very nice, well-understood scheme. Unfortunately, due to underlying packaging complexities, it was a major effort for most sites to upgrade from one major release to another effort. The process to do an upgrade was &quot;do a fresh installation in a new directory, reconfigure it from scratch&quot;. It was enough effort that sites often took months to do the upgrades. Part of the reason for the complexity is the use of Pacman as our packaging system, the rest of the complexity is due to the complexity of the software installations.

As we developed OSG 1.2, we realized that the LHC would be restarting soon, and many sites would be very reluctant to do major upgrades because they need to minimize their downtime while running in production mode. They need to be able to do in-place upgrades while preserving configuration. On the other hand, we need to be able to provide upgrades that may contain new features. So we revised our definition of major and minor release. (Perhaps we should have revised the name as well, but we didn&#39;t.)

*Minor release*: it&#39;s possible to do an in-place upgrade. We are willing to add new features or significant software upgrades assuming that the new software is well tested and production ready. In general this may mean longer testing periods on the integration testbed.

*Major release*: Either it&#39;s not possible to do an in-place upgrade or we&#39;re breaking backwards compatibility in a major way.

---++ When&#39;s the next release?

You should know three things:
   1. We are not planning major releases every six months. Instead, they will be much less frequent.
   1. We do minor updates every 2-8 weeks (usually closer to 8 weeks) on an as-needed basis. If you request a software update and we agree it&#39;s reasonable, you can expect that it can come out in the next minor release.
   1. OSG 1.2 will be the current major release for a long time.

---++ Implications on testing
Before OSG 1.2, our testing was:

   * Major release: All major VOs and a majority of minor VOs had to sign off on a major release after testing in the ITB
   * Minor release: Lightly tested on the validation testbed, except in exceptional circumstances.

As of OSG 1.2, our testing has evolved. Now we test a minor release on the ITB. Depending on the impact of the release, we involve the &quot;right&quot; folks to test and sign off the release. For example:

   * If we update Bestman and XRootd, we&#39;ll find representative users and have them verify it looks good. 
   * If we update a WLCG-specific tool like lcg-utils, we&#39;ll have ATLAS and CMS verify it.
   * More generally, we figure out which VOs use a tool and have them test and sign off on it. 
