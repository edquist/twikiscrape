%TOC%  
%STARTINCLUDE%
---# TWiki Forms

_Add structure to content with forms attached to twiki topics. TWiki forms (with form fields) and formatted search are the base for building database applications._

---++ Overview

By adding form-based input to freeform content, you can structure topics with unlimited, easily searchable categories. A form is enabled for a web and can be added to a topic. The form data is shown in tabular format when the topic is viewed, and can be changed in edit mode using edit fields, radio buttons, check boxes and list boxes. Many different form types can be defined in a web, though a topic can only have only form attached to it at a time.

Typical steps to build an application based on TWiki forms:
   1. Define a form template
   1. Enable the form for a web
   1. Add the form to a [[TWikiTemplates#Template_Topics][template topic]]
   1. Build an HTML form to create new topics based on that template topic
   1. Build a FormattedSearch to list topics that share the same form

---++ Defining a Form Template

A Form Template specifies the fields in a form. A Form Template is simply a page containing a TWiki table, where each row of the table is one form field.

---+++ Form Template Elements

   * *form template* - a set of fields defining a form
      * A web can use one or more form templates
   * *form* - additional meta data (besides the freeform TEXTAREA) attached to a topic
      * Within a form-enabled web, individual topics can have a form or no form
   * *form field* - a named item in a form (also known as a _key_)
   * *field type* - selects the field type:
     | *Input type* | *Type field* | *Size field* | *Value field* |
     | One or more checkboxes | =checkbox= | number of items per line | comma list of item labels |
     | One or more checkboxes, plus *Set* and *Clear* buttons | =checkbox+buttons= | (same) | (same) |
     | One or more radio buttons (radio buttons are mutually exclusive; only one can be selected) | =radio= | (same) | (same) |
     | Read-only label text | =label= | _ignored_ | text |
     | Drop-down menu or scrollable box | =select= | =1= for drop down, =2= and up for scrollable box | comma-separated list of options |
     | A one-line text field | =text= | text box width in number of characters | initial text, if a new topic is created with a form template |
     | A text box | =textarea= | columns x rows, e.g. =80x6=; default size is 40x5 | initial text, if a new topic is created with a form template |
   * *field value* - one or more values from a fixed set (select, checkbox, radio type) or free-form (label, text, text area).

---+++ Defining a Form

   1. Create a new topic with your form name: ==&lt;nop&gt;YourForm==, ==&lt;nop&gt;ExpenseReportForm==, ==&lt;nop&gt;InfoCategoryForm==, ==&lt;nop&gt;RecordReviewForm==, whatever you need.
   1. Create a TWiki table, with each column head representing one element of an entry field: ==Name==, ==Type==, ==Size==, ==Values==, ==Tooltip message==, and ==Attributes== _(see sample below)_.
   1. For each field, fill in a new line; for the type of field, select from the list.
   1. Save the topic _(you can later choose to [[#EnablingForms][enable/disable]] individual forms)_.

&lt;blockquote style=&quot;background-color:#f0f0f0&quot;&gt;
*Example: &lt;nop&gt;WebForm* %BR%
=| &lt;nop&gt;*Name* | &lt;nop&gt;*Type* | &lt;nop&gt;*Size* | &lt;nop&gt;*Values* | &lt;nop&gt;*Tooltip message* | &lt;nop&gt;*Attributes* |= %BR%
=| !TopicClassification | select | 1 | !NoDisclosure, !PublicSupported, !PublicFAQ | blah blah... | &amp;nbsp; |= %BR%
=| !OperatingSystem | checkbox | 3 | !OsHPUX, !OsLinux, !OsSolaris, !OsWin | blah blah... | &amp;nbsp; |= %BR%
=| !OsVersion | text | 16 | | blah blah... | &amp;nbsp; |=

| *Name* | *Type* | *Size* | *Values* | *Tooltip message* | *Attributes* |
| &lt;a href=&quot;%SCRIPTURLPATH{&quot;view&quot;}%/Sandbox/TopicClassification&quot;&gt;&lt;nop&gt;TopicClassification&lt;/a&gt; | select |  1  | &lt;a href=&quot;%SCRIPTURLPATH{&quot;view&quot;}%/Sandbox/NoDisclosure&quot;&gt;&lt;nop&gt;NoDisclosure&lt;/a&gt;, &lt;a href=&quot;%SCRIPTURLPATH{&quot;view&quot;}%/Sandbox/PublicSupported&quot;&gt;&lt;nop&gt;PublicSupported&lt;/a&gt;, &lt;a href=&quot;%SCRIPTURLPATH{&quot;view&quot;}%/Sandbox/PublicFAQ&quot;&gt;&lt;nop&gt;PublicFAQ&lt;/a&gt; | blah blah... | &amp;nbsp; |
| &lt;a href=&quot;%SCRIPTURLPATH{&quot;view&quot;}%/Sandbox/OperatingSystem&quot;&gt;&lt;nop&gt;OperatingSystem&lt;/a&gt; | checkbox |  3  | &lt;a href=&quot;%SCRIPTURLPATH{&quot;view&quot;}%/Sandbox/OsHPUX&quot;&gt;&lt;nop&gt;OsHPUX&lt;/a&gt;, &lt;a href=&quot;%SCRIPTURLPATH{&quot;view&quot;}%/Sandbox/OsLinux&quot;&gt;&lt;nop&gt;OsLinux&lt;/a&gt;, &lt;a href=&quot;%SCRIPTURLPATH{&quot;view&quot;}%/Sandbox/OsSolaris&quot;&gt;&lt;nop&gt;OsSolaris&lt;/a&gt;, &lt;a href=&quot;%SCRIPTURLPATH{&quot;view&quot;}%/Sandbox/OsWin&quot;&gt;&lt;nop&gt;OsWin&lt;/a&gt; | blah blah... | &amp;nbsp; |
| &lt;a href=&quot;%SCRIPTURLPATH{&quot;view&quot;}%/Sandbox/OsVersion&quot;&gt;&lt;nop&gt;OsVersion&lt;/a&gt; | text |  16  | | blah blah... | &amp;nbsp; |
&lt;/blockquote&gt;

You can also retrieve possible values for select, checkbox or radio types from other topics:

&lt;blockquote style=&quot;background-color:#f0f0f0&quot;&gt;
*Example: &lt;nop&gt;WebForm*

   * In the &lt;nop&gt;WebForm topic, define the form:
     &lt;br /&gt;
     | *Name* | *Type* | *Size* | *Values*  | *Tooltip message* | *Attributes* |
     | &lt;nop&gt;TopicClassification | select | 1 |    | blah blah... | &amp;nbsp; |
     | &lt;nop&gt;OperatingSystem | checkbox | 3 |    | blah blah... | &amp;nbsp; |
     | &lt;nop&gt;OsVersion | text | 16 |    | blah blah... | &amp;nbsp; |
     &lt;br /&gt;
     %X% Leave the ==Values== field *blank*.

   * Then in the &lt;nop&gt;TopicClassification topic, define the possible values:
     &lt;br /&gt;
     | *Name* | *Type* | *Tooltip message* |
     | &lt;nop&gt;NoDisclosure | option | blah blah... |
     | Public Supported | option | blah blah... |
     | Public FAQ | option | blah blah... |
&lt;/blockquote&gt;

Field values can also be obtained as the result of a %TWIKIWEB%.FormattedSearch. For example,

&lt;blockquote style=&quot;background-color:#f0f0f0&quot;&gt;
=%&lt;nop&gt;SEARCH{&quot;Office$&quot; scope=&quot;topic&quot; web=&quot;%&lt;nop&gt;MAINWEB%&quot; nototal=&quot;on&quot; nosummary=&quot;on&quot; nosearch=&quot;on&quot; regex=&quot;on&quot; format=&quot;$web.$topic&quot; separator=&quot;, &quot; }%=
&lt;/blockquote&gt;

when used in the value field of the form definition, will take the set of field values to be all topic names in the Main web which end in &quot;Office&quot;.


*Notes:*
   * A very few field names are reserved. If you try to use one of these names, TWiki will automatically append an underscore to the name when the form is used.
   * The field value will be used to initialize a field when a form is created, unless specific values are given by the topic template or query parameters. The first item in the list for a select or radio type is the default item. For =label=, =text=, and =textarea= fields the value may also contain commas. =checkbox= fields cannot be initialized through the form template.
   * If a =label= field has no name (blank first column in the form definition) it will *not* be shown when the form is *viewed*, only when it is *edited*.
   * The topic definition is not read when a topic is viewed.
   * Field names can include any text, but you should stick to alphanumeric characters. If you want to use a non-wikiname for a =select=, =checkbox= or =radio= field, and want to get the values from another topic, you can use  ==[&lt;nop&gt;[...]]== links. This notation can also be used when referencing another topic to obtain field values, but a name other than the topic name is required as the name of the field. 
   * Field names have to be unique. If the same name is necessary (as when the field values for several fields are obtained from the same topic), an alternative name must be assigned using the ==[&lt;nop&gt;[...]]== notation.
   * The topic defining field values can also be generated through a %TWIKIWEB%.FormattedSearch, which must yield a suitable table as the result.
   * Form definition topics can be protected in the usual manner, using  TWikiAccessControl, to limit who can change the form template and/or individual value lists. Note that view access is required to be able to edit topics that use the form definition, though view access to the form definition is _not_ required to view a topic where the form has been used.
   * The ==Tooltip message== column is used as a tooltip for the field name (only if field name is a %TWIKIWEB%.WikiName) - you only see the tooltip in edit view.
   * The ==Attributes== column is used to define special behavior for that form field (multiple attributes can be entered, with or without separators):
      * An attribute =H= indicates that this field should not be shown in view mode. However, the field is available for editing and storing information.
      * An attribute =M= indicates that this field is mandatory. The topic cannot be saved unless a value is provided for this field. If the field is found empty during topic save, an error is raised and the user is redirected to an =oops= page. Mandatory fields are indicated by an asterisks next to the field name. 
&lt;/blockquote&gt;

#EnablingForms
---++ Enabling Forms by Web

Forms have to be enabled for each individual web. The ==WEBFORMS== variable in WebPreferences is optional and defines a list of possible form templates.
&lt;blockquote style=&quot;background-color:#f0f0f0&quot;&gt;
*Example:*
   * &lt;nop&gt;Set WEBFORMS = &lt;nop&gt;BugForm, &lt;nop&gt;FeatureForm, Books.&lt;nop&gt;BookLoanForm
&lt;/blockquote&gt;
   * With ==WEBFORMS== enabled, an extra button is added to the edit view. If the topic doesn&#39;t have a Form, an *Add Form* button appears at the end of the topic. If a Form is present, a *Change* button appears in the top row of the Form. The buttons open a screen that enables selection of a form specified in =WEBFORMS=, or the *No form* option.

---++ Add a form to a topic

   * Edit a topic and follow the &quot;Add form&quot; button to add a Form to the topic. This is typically done to a [[TWikiTemplates#TemplateTopic][template topic]], either to the =WebTopicEditTemplate= topic in a web, or a new topic that serves as an application specific template topic. Initial Form values can be set there.

   * Additionally a new topic can be given a Form using the =formtemplate= parameter in the (edit or save) URL.  Initial values can then be provided in the URLs or as form values:
      * other than checkboxes: ==name==, ex: ==?BugPriority=1==
      * checkbox: ==namevalue=1==, ex: ==?ColorRed=1==. &lt;br /&gt; 
        Boxes with a tick must be specified.
      * Example: This will add a textfield for the new topic name and a &quot;Create&quot;-Button to your topic. When the button is pressed, the topic editor will open with the form &quot;MyForm&quot; already attached to the new topic.
       &lt;verbatim&gt;
    &lt;form name=&quot;newtopic&quot; action=&quot;%SCRIPTURLPATH{&quot;edit&quot;}%/%WEB%/&quot;&gt;
       &lt;input type=&quot;hidden&quot; name=&quot;formtemplate&quot; value=&quot;MyForm&quot; /&gt;
       New topic name &lt;input type=&quot;text&quot; name=&quot;topic&quot; size=&quot;40&quot; /&gt;
       &lt;input type=&quot;submit&quot; value=&quot;Create&quot; /&gt;
    &lt;/form&gt;
       &lt;/verbatim&gt;
   * __%T% Tip:__ For TWiki applications you can [[TWikiTemplates#AutomaticallyGeneratedTopicname][automatically generate unique topicnames]].

   * __%X% Note:__ Initial values will not be submitted to the form of a new topic if you only use the formtemplate parameter.

---++ Build an HTML form to create new Form-based topics
   
   * New topics with a form are created by simple HTML forms asking for a topic name. For example, you can have a =&lt;nop&gt;SubmitExpenseReport= topic where you can create new expense reports, a =&lt;nop&gt;SubmitVacationRequest= topic, and so on. These can specify the required template topic with its associated form. [[TWikiTemplates#TemplateTopics][Template topics]] has more.

---++ Changing a form
   * You can change a form definition, and TWiki will try to make sure you don&#39;t lose any data from the topics that use that form. 

   * If you change the form definition, the changes will not take affect in a topic that uses that form until you edit and save it.

   * If you add a new field to the form, then it will appear next time you edit a topic that uses the form.

   * If you delete a field from the form, or change a field name, then the data will not be visible when you edit the topic (the changed form definition will be used). *If you save the topic, the old data will be lost* (though thanks to revision control, you can always see it in older versions of the topic)

#UsingFormData
---++ Searching for Form Data
TWiki Forms accept user-input data, stored as TWikiMetaData. Meta data also contains program-generated info about changes, attachments, etc. To find, format and display form and other meta data, see TWikiMetaData, ==FORMFIELD==, ==SEARCH== and ==METASEARCH== variables in TWikiVariables, and [[FormattedSearch][TWiki Formatted Search]].

&lt;blockquote&gt;
*Example* %BR%
TWiki users often want to have an overview of topics they contributed to. With the ==$formfield== parameter it is easy to display the value of a classification field next to the topic link:
&lt;verbatim&gt;
| *Topic* | *Classification* |
%SEARCH{&quot;%MAINWEB%.UserName&quot; scope=&quot;text&quot; regex=&quot;off&quot; nosearch=&quot;on&quot; nototal=&quot;on&quot; order=&quot;modified&quot; reverse=&quot;on&quot;
format=&quot;|&lt;b&gt;[[$web.$topic][$topic]]&lt;/b&gt; |&lt;nop&gt;$formfield(TopicClassification) |&quot; web=&quot;Sandbox&quot;}%
&lt;/verbatim&gt;
&lt;/blockquote&gt; 

---++ Extending the range of form data types
Several Plugins allow you to extend the range of data types accepted by forms. For example, the TWiki:Plugins.DateFieldPlugin lets you add a &#39;date&#39; type to the available data types. All data types are single-valued (can only have one value) with the following exceptions:
   * any type name starting with =checkbox=
   * any type name with =+multi= anywhere in the name
Types with names like this can both take multiple values.

---++ Gotcha!
   * Some browsers may strip linefeeds from =text= fields when a topic is saved. If you need linefeeds in a field, make sure it is a =textarea=.

#FormsVsCategoryTables
---++ Importing Category Table Data

Very, very old TWiki releases used a system called the &quot;TWikiCategoryTable&quot;. Later releases support automatic import of this data.

On upgrading from the previous TWiki, a Form Template topic has to be built for each web that used a Category Table, recreating the fields and values from the old ==twikicatitems.tmpl==. The replacement Form Template must be set as the first item in the WebPreferences variable =WEBFORMS=. If missing, pages will display, but attempting to edit results in an error message.

The new Form Template system should work with old Category Table data with no special conversion. Data is assigned to Meta variables the first time an imported topic is edited and saved in the new system.

%T% If things aren&#39;t working correctly, there may be useful entries in =data/warning.txt=.

%STOPINCLUDE%

__Related Topics:__ UserDocumentationCategory, TWikiTemplates

