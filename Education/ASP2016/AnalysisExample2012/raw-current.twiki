---+!!Analysis Example using the Grid
%TOC{depth=&quot;3&quot;}%

---+ Introduction
Root may be run in batch mode on the grid to analyze large data samples. This example creates simulated data in root format using tree&#39;s and performs analysis on the simulated data by means of processing on the grid. This example is based on a demo developed by OU programmer Chris Walker.

---+ Customize this Document

&lt;!-- OSG Summer School 2011 Defaults
   * Local VO= %URLPARAM{&quot;INPUT_VO&quot; encode=&quot;quote&quot; default=&quot;osgedu&quot;}%
   * Local UCL_HOST = %URLPARAM{&quot;INPUT_HOST&quot; encode=&quot;quote&quot; default=&quot;osg-ss-glidein&quot;}%
   * Local UCL_USER = %URLPARAM{&quot;INPUT_USER&quot; encode=&quot;quote&quot; default=&quot;user&quot;}%
   * Local UCL_DOMAIN = %URLPARAM{&quot;INPUT_DOMAIN&quot; encode=&quot;quote&quot; default=&quot;chtc.wisc.edu&quot;}%
   * Local GATEKEEPER = %URLPARAM{&quot;INPUT_GATEKEEPER&quot; encode=&quot;quote&quot; default=&quot;red.unl.edu&quot;}%
   * Local UCL_CWD= %URLPARAM{&quot;INPUT_CWD&quot; encode=&quot;quote&quot; default=&quot;analysis_example&quot;}%
   * Local WORKING_DIR= %URLPARAM{&quot;INPUT_WORKING_DIR&quot; encode=&quot;quote&quot; default=&quot;/share/users/%UCL_USER%/osg_school/touble_part1&quot;}%
   * Local BATCH_SYSTEM = %URLPARAM{&quot;BATCH_SYSTEM&quot; encode=&quot;quote&quot; default=&quot;condor&quot;}%
   * Local REMOTE_ROOT = %URLPARAM{&quot;INPUT_REMOTE_ROOT&quot; encode=&quot;quote&quot; default=&quot;/mnt/hadoop/user&quot;}%
   * Local REMOTE_SRM = %URLPARAM{&quot;INPUT_SRM&quot; encode=&quot;quote&quot; default=&quot;red-srm1.unl.edu:8443&quot;}%
   * Local REMOTE_GRIDFTP= %URLPARAM{&quot;INPUT_GRIDFTP&quot; encode=&quot;quote&quot; default=&quot;red-gridftp.unl.edu&quot;}%
   * Local SURL = srm://%REMOTE_SRM%/srm/v2/server?SFN=%REMOTE_ROOT%
   * Local TURL= gsiftp://%REMOTE_GRIDFTP%/%REMOTE_ROOT%
   * Local OSG_DATA=%URLPARAM{&quot;INPUT_OSG_DATA&quot; encode=&quot;quote&quot; default=&quot;/osg/data&quot;}%
   * Local BLAST_DB_SUBMIT=%URLPARAM{&quot;INPUT_BLAST_DB_SUBMIT&quot; encode=&quot;quote&quot; default=&quot;/share/blast&quot;}%
   * Local VDT_LOCATION=/opt/osg-client
--&gt;

%ICON{&quot;warning&quot;}% %RED% Please change your user name and click on the Customize button!%ENDCOLOR%
&lt;form action=&quot;%SCRIPTURLPATH{&quot;view&quot;}%/%WEB%/%TOPIC%&quot;&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      %RED%Login Name%ENDCOLOR%
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_USER&quot; value=&quot;%UCL_USER%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      VO
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_VO&quot; value=&quot;%VO%&quot;/&gt;
    &lt;/td&gt;
  &lt;tr&gt;
    &lt;td&gt;
      Host Name
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_HOST&quot; value=&quot;%UCL_HOST%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      Domain Name
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_DOMAIN&quot; value=&quot;%UCL_DOMAIN%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;td&gt;
      Exercise Path
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_WORKING_DIR&quot; value=&quot;%WORKING_DIR%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
     &amp;nbsp;
     &lt;input type=&quot;submit&quot; class=&quot;twikiSubmit&quot; value=&quot;Customize&quot; /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/form&gt;

---+ Exercises 
---++ Prerequisite 

   * Login on submission node &lt;pre class=&quot;screen&quot;&gt;
ssh %UCL_USER%@%UCL_HOST%.%UCL_DOMAIN%
&lt;/pre&gt;
&lt;!--   * Initialize the OSG client environment &lt;pre class=&quot;screen&quot;&gt;
source %VDT_LOCATION%/setup.sh
&lt;/pre&gt;
--&gt;
   * Obtain proxy certificate, if you have not done so already &lt;pre class=&quot;screen&quot;&gt;
voms-proxy-init -voms %VO%:/%VO%
&lt;/pre&gt;
   * Make a directory for this exercise&lt;pre class=&quot;screen&quot;&gt;
mkdir -p %UCL_CWD%
cd %UCL_CWD%
&lt;/pre&gt;

---++ Simple Analysis Example

---+++ Step 1: Create simulated data using the grid

Now in your test directory on the submission host we will create the three files: ==run-root.cmd==, ==run-root.sh==, and ==run-root.C== with the contents
given below. This may require running an editor such as =emacs= on your local desktop and then copying the created files to the submission host. Or the =nano= editor can be run directly on the submission host. A
typical copy command would be as follows. 

&lt;pre class=&quot;screen&quot;&gt;
scp run-root.* %UCL_USER%@%UCL_HOST%.%UCL_DOMAIN%:%UCL_CWD%/
&lt;/pre&gt;


First, we will utilize a simple command script to submit the grid jobs. It is ==run-root.cmd==:

&lt;pre class=&quot;file&quot;&gt;
universe=grid
grid_resource=gt2 osgitb1.nhn.ou.edu/jobmanager-fork
executable=run-root.sh
transfer_input_files = run-root.C
transfer_executable=True
when_to_transfer_output = ON_EXIT
log=run-root.log
transfer_output_files = root.out,t00.root,t01.root
output=run-root.out.$(Cluster).$(Process)
error=run-root.err.$(Cluster).$(Process)
notification=Never
queue 
&lt;/pre&gt;

Note that the executable script is:  ==run-root.sh== which is as follows:
&lt;pre class=&quot;file&quot;&gt;
#!/bin/bash 
/usr/local/bin/root -b &lt; run-root.C &gt; root.out
&lt;/pre&gt;
This script runs Root in batch mode and executes input macro ==run-root.C== and produces output that is routed to file ==root.out==
It has to be made executable, by use of the =chmod= Linux command (protections can be checked with the command =ls -l=):

&lt;pre class=&quot;screen&quot;&gt;
chmod +x run-root.sh
&lt;/pre&gt;

The macro  ==run-root.C== consists of the following code:

&lt;pre class=&quot;file&quot;&gt;
{ 
 
 // create files containing simulated data
 
 TRandom g; 
 char c[256]; 
 for ( int j = 0 ; j &lt; 2 ; j++ ){ 
    sprintf(c,&quot;t%2.2d.root\000&quot;,j); 
    TFile f(c,&quot;RECREATE&quot;,&quot;MyFile&quot;, 0/*no compression*/); 
    TTree *t = new TTree(&quot;t0&quot;,&quot;t0&quot;); 
    Int_t Run; 
    TBranch * b_Run = t-&gt;Branch(&quot;Run&quot;,&amp;Run); 
    Int_t Event; 
    TBranch * b_Event = t-&gt;Branch(&quot;Event&quot;,&amp;Event); 
    Float_t Energy; 
    TBranch * b_Energy = t-&gt;Branch(&quot;Energy&quot;,&amp;Energy); 
    Run = j; 
 
        for( Event = 0 ; Event &lt; 100 ; Event++ ){ 
          Energy = g.Gaus(500.0 , 200.0);   
          t-&gt;Fill(); 
        }  
    f.Write(); 
    f.Close(); 
 } 
} 
.q 
&lt;/pre&gt;

The grid job can be submitted using:

&lt;pre class=&quot;screen&quot;&gt;
condor_submit run-root.cmd
&lt;/pre&gt;

It can be checked with: 

&lt;pre class=&quot;screen&quot;&gt;
condor_q
&lt;/pre&gt;

After it runs, you will find a log file that describes the job: ==run-root.log==, and output file: ==root.out==, and the files containing the simulated data: ==t00.root==, ==t01.root== in your test directory. 
You can now copy the output files to your local desktop machine with the =scp= command we used before. A
typical copy command would be as follows. 

&lt;pre class=&quot;screen&quot;&gt;
scp %UCL_USER%@%UCL_HOST%.%UCL_DOMAIN%:%UCL_CWD%/t*.root .
&lt;/pre&gt;

You can inspect the contents of ==t00.root== and ==t01.root== by running 
Root (i.e., ==root t00.root==) on your local machine and using the 
Root command:  ==TBrowser b==

With the ==TBrowser== you can plot the simulated data in branch “Energy” as well as the other branches.

Each data file contains a TTree named “t0”. You can plot the contents of all (in this example both) data file TTree&#39;s by using the TChain method as follows:

Before running root, execute the following command:
&lt;pre class=&quot;screen&quot;&gt;
export LD_LIBRARY_PATH=/usr/lib/root
&lt;/pre&gt;

In Root execute the following commands:
&lt;pre class=&quot;file&quot;&gt;
TChain tc(&quot;t0&quot;);
tc.Add(&quot;t*.root&quot;);
tc.Draw(&quot;Energy&quot;);
&lt;/pre&gt;

---+++ Step 2: Make TSelector

In Root in your test directory, execute the following commands:
&lt;pre class=&quot;file&quot;&gt;
TFile f(&quot;t00.root&quot;);
t0.MakeSelector(&quot;s0&quot;);
f.Close();
&lt;/pre&gt;

This will create files ==s0.C== and ==s0.h== in your test directory that contain code corresponding to the definition of the TTree &quot;t0&quot;. This code can be used to process files containing data is these TTree&#39;s.

Now we will add a histogram to the TSelector code. Several code lines have to be added to the TSelector code files ==s0.C== and ==s0.h==.

To ==s0.h== make the additions:
after existing include statements add:

&lt;pre class=&quot;file&quot;&gt;
#include &amp;lt;TH1F.h&amp;gt;
&lt;/pre&gt;

After class s0 definition:
      ( class s0 : public TSelector { ) 
add
&lt;pre class=&quot;file&quot;&gt;
TH1F *e;
&lt;/pre&gt;

To ==s0.C== make the additions:

After entry:
( void s0::SlaveBegin(TTree * /*tree*/) ) 
add
&lt;pre class=&quot;file&quot;&gt;
e = new TH1F(&quot;e&quot;, &quot;e&quot;, 1000, -199.0, 1200.0);
&lt;/pre&gt;

After Process entry:
 ( Bool_t s0::Process(Long64_t entry) )
add
&lt;pre class=&quot;file&quot;&gt;
GetEntry(entry);
e-&gt;Fill(Energy);
&lt;/pre&gt;

After terminate entry:
( void s0::Terminate() )
add
&lt;pre class=&quot;file&quot;&gt;
TFile f(&quot;histograms.root&quot;,&quot;RECREATE&quot;);
f.WriteObject(e,”Energy”);
f.Close();
&lt;/pre&gt;

Now create the new script files for Step 2:

create:
==run-root-2.cmd==
&lt;pre class=&quot;file&quot;&gt;
universe=grid 
grid_resource=gt2 osgitb1.nhn.ou.edu/jobmanager-condor 
executable=run-root-2.sh 
transfer_input_files = s0.C,s0.h,run-root-2.C,t00.root,t01.root 
transfer_executable=True 
when_to_transfer_output = ON_EXIT 
log=run-root-2.log 
transfer_output_files = root-2.out,histograms.root 
output=run-root.out.$(Cluster).$(Process) 
error=run-root.err.$(Cluster).$(Process) 
notification=Never 
queue 
&lt;/pre&gt;

Create ==run-root-2.sh==
&lt;pre class=&quot;file&quot;&gt;
#!/bin/bash 
/usr/local/bin/root -b &lt; run-root-2.C &gt; root-2.out 
&lt;/pre&gt;

It has to be made executable, by use of the =chmod= Linux command:

&lt;pre class=&quot;screen&quot;&gt;
chmod +x run-root-2.sh
&lt;/pre&gt;


Create ==run-root-2.C==
&lt;pre class=&quot;file&quot;&gt;
.L s0.C++ 
{ 
 //Load and run TSelector 
 
  s0 *s = new s0(); 
 
  TChain tc(&quot;t0&quot;); 
  tc.Add(&quot;t*.root&quot;); 
  tc.Process(s); 
 
} 
&lt;/pre&gt;

We can test the Root job on your local machine by issuing command:

&lt;pre class=&quot;screen&quot;&gt;
root &lt; run-root-2.C
&lt;/pre&gt;

If this works, we can process the data files =t00.root= and =t01.root= on the
Grid with our new command script ==run-root-2.cmd==.

This can be done with command:

&lt;pre class=&quot;screen&quot;&gt;
condor_submit run-root-2.cmd
&lt;/pre&gt;

You can look at the output histogram file: =histograms.root=
with ==TBrowser b== as before.


-- Main.PatrickLouisSkubic - 18 Jul 2012
