---+!!Data Management Exercises (Part I) 
%TOC{depth=&quot;3&quot;}%

---+ Introduction

The storage and data management are an essential part of grid computing. Many applications running on the OSG sites are data-intensive and require high-throughput. The middleware provided by the OSG can manage not only jobs but also transfers of input and output files associated with a job, as well as pre-staging of the data before launching jobs.
The goals of these exercises are:
   * to be able to pre-stage file using ==globus-url-copy== or ==srm-copy== commands
   * to familiarize yourself with various SRM commands that allow data management and movement on a Storage Element
   * to submit Condor-G job that accesses file that is stored at a SE
   * to submit Condor-G job that first try to get file from the web using Squid


---+ Customize this Document

&lt;!-- conventions used in this document
   * Local VO= %URLPARAM{&quot;INPUT_VO&quot; encode=&quot;quote&quot; default=&quot;osgedu&quot;}%
   * Local UCL_HOST = %URLPARAM{&quot;INPUT_HOST&quot; encode=&quot;quote&quot; default=&quot;vdt-itb&quot;}%
   * Local UCL_USER = %URLPARAM{&quot;INPUT_USER&quot; encode=&quot;quote&quot; default=&quot;user&quot;}%
   * Local UCL_DOMAIN = %URLPARAM{&quot;INPUT_DOMAIN&quot; encode=&quot;quote&quot; default=&quot;cs.wisc.edu&quot;}%
   * Local GATEKEEPER = %URLPARAM{&quot;INPUT_GATEKEEPER&quot; encode=&quot;quote&quot; default=&quot;osg-edu.cs.wisc.edu&quot;}%
   * Local UCL_CWD= %URLPARAM{&quot;INPUT_CWD&quot; encode=&quot;quote&quot; default=&quot;osg_school/storage_1&quot;}%
   * Local BATCH_SYSTEM = %URLPARAM{&quot;BATCH_SYSTEM&quot; encode=&quot;quote&quot; default=&quot;condor&quot;}%
   * Local SURL= %URLPARAM{&quot;INPUT_SURL&quot; encode=&quot;quote&quot; default=&quot;srm://osg-edu.cs.wisc.edu:10443/srm/v2/server?SFN=/srmcache&quot;}%
   * Local OSG_DATA=%URLPARAM{&quot;INPUT_OSG_DATA&quot; encode=&quot;quote&quot; default=&quot;/nfs/osg-data&quot;}%
--&gt;

&lt;!-- conventions used in this document
   * Local VO= %URLPARAM{&quot;INPUT_VO&quot; encode=&quot;quote&quot; default=&quot;osgedu&quot;}%
   * Local UCL_HOST = %URLPARAM{&quot;INPUT_HOST&quot; encode=&quot;quote&quot; default=&quot;submit03&quot;}%
   * Local UCL_USER = %URLPARAM{&quot;INPUT_USER&quot; encode=&quot;quote&quot; default=&quot;user&quot;}%
   * Local UCL_DOMAIN = %URLPARAM{&quot;INPUT_DOMAIN&quot; encode=&quot;quote&quot; default=&quot;ncc.unesp.br&quot;}%
   * Local GATEKEEPER = %URLPARAM{&quot;INPUT_GATEKEEPER&quot; encode=&quot;quote&quot; default=&quot;ce.sp.grid.unesp.br&quot;}%
   * Local UCL_CWD= %URLPARAM{&quot;INPUT_CWD&quot; encode=&quot;quote&quot; default=&quot;osg_school/dm_part_1&quot;}%
   * Local BATCH_SYSTEM = %URLPARAM{&quot;BATCH_SYSTEM&quot; encode=&quot;quote&quot; default=&quot;condor&quot;}%
   * Local SURL= %URLPARAM{&quot;INPUT_SURL&quot; encode=&quot;quote&quot; default=&quot;srm://se.sp.grid.unesp.br:8443/srm/v2/server?SFN=/store&quot;}%
   * Local OSG_DATA=%URLPARAM{&quot;INPUT_OSG_DATA&quot; encode=&quot;quote&quot; default=&quot;/osg/data&quot;}%
--&gt;
%ICON{&quot;warning&quot;}% %RED% Please change your user name and click on the Customize button!%ENDCOLOR%
&lt;form action=&quot;%SCRIPTURLPATH{&quot;view&quot;}%/%WEB%/%TOPIC%&quot;&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      VO
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input type=&quot;text&quot; name=&quot;INPUT_VO&quot; value=&quot;%VO%&quot;/&gt;
    &lt;/td&gt;
  &lt;tr&gt;
    &lt;td&gt;
      Host Name
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input type=&quot;text&quot; name=&quot;INPUT_HOST&quot; value=&quot;%UCL_HOST%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      Domain Name
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input type=&quot;text&quot; name=&quot;INPUT_DOMAIN&quot; value=&quot;%UCL_DOMAIN%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      Login Name
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input type=&quot;text&quot; name=&quot;INPUT_USER&quot; value=&quot;%UCL_USER%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;td&gt;
      Exercise Path
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input type=&quot;text&quot; name=&quot;INPUT_CWD&quot; value=&quot;%UCL_CWD%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td&gt;
      Gatekeeper Name
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input type=&quot;text&quot; name=&quot;INPUT_GATEKEEPER&quot; value=&quot;%GATEKEEPER%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      Batch System
    &lt;/td&gt;
    &lt;td&gt;
      &lt;select name=&quot;BATCH_SYSTEM&quot;&gt;
        &lt;option value=&quot;%BATCH_SYSTEM%&quot;&gt;%BATCH_SYSTEM%&lt;/option&gt;
        &lt;option value=&quot;condor&quot;&gt;condor&lt;/option&gt;
        &lt;option value=&quot;pbs&quot;&gt;pbs&lt;/option&gt;
        &lt;option value=&quot;lsf&quot;&gt;lsf&lt;/option&gt;
      &lt;/select&gt;
  &lt;tr&gt;
 &lt;tr&gt;
    &lt;td&gt;
      OSG_DATA
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input type=&quot;text&quot; name=&quot;INPUT_OSG_DATA&quot; value=&quot;%OSG_DATA%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      SURL
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_SURL&quot; value=&quot;%SURL%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;td&gt;
     &amp;nbsp;
     &lt;input type=&quot;submit&quot; class=&quot;twikiSubmit&quot; value=&quot;Customize&quot; /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/form&gt;
---+ Exercises 
---++ Prerequisite 
   * Login on submission node &lt;pre class=&quot;screen&quot;&gt;
ssh %UCL_USER%@%UCL_HOST%.%UCL_DOMAIN%
&lt;/pre&gt;
   * Obtain proxy certificate, if you have not done so already &lt;pre class=&quot;screen&quot;&gt;
voms-proxy-init -voms %VO%:/%VO%
Enter GRID pass phrase: 
&lt;/pre&gt;
   * Make a directory for this exercise&lt;pre class=&quot;screen&quot;&gt;
cd
mkdir -p %UCL_CWD%
cd %UCL_CWD%
&lt;/pre&gt;

---++ Classic Storage
A Classic Storage is represented by a stand-alone [[http://www.globus.org/toolkit/data/gridftp][GridFTP]] server installed on a Compute Element. It allows access to several specific data directories available on all OSG sites.  The storage space allocated under ==$OSG_DATA== directory is intended as the space for applications to write input and output of relatively small data files which are kept around for longer than the job which created them.

In order to upload data to ==$OSG_DATA== you will need to use ==globus-url-copy== command. The basic syntax for globus-url-copy is:

==globus-url-copy [optional command line switches] Source_URL Destination_URL==

You will need to use the following URL prefixes to specify local file and file on the remote node:
   * file:// (on a local machine only)
   * gsiftp://

   * What is the path to OSG_DATA?&lt;pre class=&quot;screen&quot;&gt;
globus-job-run %GATEKEEPER%:/jobmanager-fork /usr/bin/env|grep OSG_DATA
OSG_DATA=%OSG_DATA%
&lt;/pre&gt;
 
   * Let&#39;s create your directory there&lt;pre class=&quot;screen&quot;&gt;
globus-job-run %GATEKEEPER%:/jobmanager-fork /bin/mkdir %OSG_DATA%/%VO%/${USER}
&lt;/pre&gt;
   * Get a copy of our data file and worker script for these exercises&lt;pre class=&quot;screen&quot;&gt;
cp /opt/workshop/dm_exercises/part1/Complete-Prose-Works-by-Walt-Whitman.txt .
cp /opt/workshop/dm_exercises/part1/word_counter .
&lt;/pre&gt;
   The data file size is 1.5 MB and it contains works by Walt Whitman.  (The file is originally from [[http://www.gutenberg.org/ebooks/8813][this site]], for more info see [[http://www.gutenberg.org/wiki/Main_Page][information about Gutenberg Project ]]).  
   Let&#39;s Use ==globus-url-copy== to upload the file to your directory under ==%OSG_DATA%/%VO%==:&lt;pre class=&quot;screen&quot;&gt; 
globus-url-copy file:///home/${USER}/%UCL_CWD%/Complete-Prose-Works-by-Walt-Whitman.txt gsiftp://%GATEKEEPER%:2811/%OSG_DATA%/%VO%/${USER}/Complete-Prose-Works-by-Walt-Whitman.txt
globus-job-run %GATEKEEPER%:/jobmanager-fork /bin/ls -l %OSG_DATA%/%VO%/${USER}
total 1416
-rw-r--r--  1 osgedu users 1445762 Jul 12 13:17 Complete-Prose-Works-by-Walt-Whitman.txt
&lt;/pre&gt;
   * The ==word_counter== script calculates number of occurrences of  a specified word in a text file. The script looks like this &lt;pre class=&quot;file&quot;&gt;&lt;code&gt;
more word_counter%TWISTY%
#!/usr/bin/python
import sys
import re
####################################################################################
#                                                                                                                                                                   #
# word_counter: Calculates number of occurrences of a specified word in a text file                                   #
#               output goes to a log file, is not specified to stdout                                                                       #
####################################################################################

class Text:
        def __init__(self,file,log):
                self.text=[]
                self.log=log
                self.readFile(file)
        def readFile(self,file):
                text=&quot;&quot;
                try:
                        fd=open(file,&#39;r&#39;)
                        for  line in fd.readlines():
                                text=&quot;%s %s&quot; % (text, re.sub(r&#39;\W+&#39;,&#39; &#39;,line[:-1].lower()))
                        self.text=re.split(&#39;\W+&#39;,text)
                        self.text.sort()
                except:
                        log.write(&quot;Failed to read text from file %s: %s %s\n&quot; % (file,sys.exc_type,sys.exc_value))
                        raise &quot;TextError&quot;


        def getCount(self,word):
                counter=0
                try:
                        indx=self.text.index(word)
                        for item in self.text[indx:]:
                                if word==item:
                                        counter=counter+1
                                else:
                                        break
                except:
                        log.write(&quot;Failed to find word %s: %s %s\n&quot; % (word,sys.exc_type,sys.exc_value))
                return counter

if __name__==&quot;__main__&quot;:
        from optparse import OptionParser
        log=sys.stdout
        retVal=0
        usage=&quot;Usage:%s [options] text_file word\n&quot; % (sys.argv[0])
        parser = OptionParser(usage=usage)
        parser.add_option(&quot;-o&quot;, &quot;--output&quot;,dest=&quot;logfile&quot;,help=&quot;script logfile&quot;)
        (options, args) = parser.parse_args()
        if options.logfile != None:
                try:
                        log=open(options.logfile,&#39;a&#39;)
                        log.write(&quot;Open logfile %s\n&quot; % (options.logfile))
                except:
                        log=sys.stdout
                        log.write(&quot;Failed to open logfile %s : %s %s\n&quot; % (options.logfile,sys.exc_type,sys.exc_value))
        if len(args) != 2:
                log.write(usage)
                retVal=1
        else:
                try:
                        text=Text(sys.argv[1],log)
                        log.write(&quot;Number of word \&quot;%s\&quot; encountered in %s is %s\n&quot; % (sys.argv[2],sys.argv[1],text.getCount(sys.argv[2])))
                except:
                        log.write(&quot;Failed to parse text : %s %s\n&quot; % (sys.exc_type,sys.exc_value))
                        retVal=2
        log.close()
        sys.exit(retVal)
%ENDTWISTY% 
&lt;/code&gt;
&lt;/pre&gt; Let&#39;s execute this script to verify that it is working properly:&lt;pre class=&quot;screen&quot;&gt;
./word_counter Complete-Prose-Works-by-Walt-Whitman.txt leaves  
Number of word &quot;leaves&quot; encountered in Complete-Prose-Works-by-Walt-Whitman.txt is 74
&lt;/pre&gt;

   * Create simple Condor-G job submission files that access Whitman&#39;s prose file from various sources:
      1. Transfer data with condor job. First, create a submission file ==test1.submit==  &lt;pre class=&quot;file&quot;&gt;
universe=grid
grid_resource = gt2 %GATEKEEPER%/jobmanager-%BATCH_SYSTEM%
Executable=word_counter
Log = test1.$(Cluster).$(Process).log
Output = test1.$(Cluster).$(Process).out
Error = test1.$(Cluster).$(Process).err
WhenToTransferOutput = ON_EXIT_OR_EVICT
transfer_input_files = Complete-Prose-Works-by-Walt-Whitman.txt
transfer_output_files = wordcounter_results.test1.$(Cluster).$(Process)
Arguments =  Complete-Prose-Works-by-Walt-Whitman.txt leaves --output=wordcounter_results.test1.$(Cluster).$(Process)
queue
&lt;/pre&gt; Submit the job: &lt;pre class=&quot;screen&quot;&gt;
condor_submit test1.submit
Submitting job(s).
Logging submit event(s).
1 job(s) submitted to cluster 13.
&lt;/pre&gt;Check status of the job. Verify the content of the job log file (==wordcounter_results.test1.%BLUE%13.0%ENDCOLOR%)== after it is done. It should contain something similar to that: &lt;pre class=&quot;file&quot;&gt;
$ cat wordcounter_results.test1.%BLUE%13.0%ENDCOLOR%
Open logfile wordcounter_results.test1.13.0
Number of word &quot;leaves&quot; encountered in Complete-Prose-Works-by-Walt-Whitman.txt is 74
&lt;/pre&gt; 
      1. Now, we can submit a job that is using file from ==%OSG_DATA%/%VO%/${USER}== directory that we have uploaded before. Create ==test2.submit== &lt;pre class=&quot;file&quot;&gt;
universe=grid
grid_resource = gt2 %GATEKEEPER%/jobmanager-%BATCH_SYSTEM%
Executable=word_counter
Log = test2.$(Cluster).$(Process).log
Output = test2.$(Cluster).$(Process).out
Error = test2.$(Cluster).$(Process).err
WhenToTransferOutput = ON_EXIT_OR_EVICT
transfer_output_files = wordcounter_results.test2.$(Cluster).$(Process)
Arguments =  %OSG_DATA%/%VO%/%UCL_USER%/Complete-Prose-Works-by-Walt-Whitman.txt grass  --output=wordcounter_results.test2.$(Cluster).$(Process)
queue
&lt;/pre&gt;Submit job: &lt;pre class=&quot;screen&quot;&gt;
condor_submit test2.submit
&lt;/pre&gt;Check the status of the job. Verify the contents of the job output file after it is done.

You can see we used too different methods. The first is more convenient because you didn&#39;t need to pre-stage the data, but if you need to run many different jobs against the same data set, you should prefer to pre-stage the data.
  

---+++On your own
   * Create Condor-G submission file that access BLAST databases from $OSG_DATA(==%OSG_DATA%/%VO%/blast_dbs==) and run BLAST application (==$OSG_APP/hcc/blast==) installed under $OSG_APP and store output back on $OSG_DATA.
   * Make a two-node DAG that does the data transfer in one node and the analysis in the second node. Emphasize that if you had more than one analysis job, this could be an efficient way to process data.
   *  !GridFTP allows to do  third-party transfer. Try to initiate a data transfer from a client running on vtb-itb to transfer data from Wisconsin to Nebraska. 
   * You can speed !GridFTP transfers: try to use bigger tcp window, memory buffer and parallel streams.


---++ Storage Element 
An OSG site may offer a Storage Element (SE) - a physical storage system where data is stored and managed according to authorization policies. A SE could be represented by a physical file system, disk caches or hierarchical mass storage system.  A Storage Resource Manager (SRM) is a component that is usually associated with a Storage Element. A SRM optimizes the use of a SE by providing file caching, staging of files from hierarchical storage, and/or managing the space by using space reservation and lifetime of the file. Storage Elements manage storage and enforce authorization policies on who is allowed to create, delete and access physical files. See [[https://twiki.grid.iu.edu/bin/view/Documentation/StorageOverview][this document]] for details.
All OSG Storage Elements support the gsiftp protocol and the full or limited implementation of [[https://sdm.lbl.gov/srm-wg/doc/SRM.v2.2.html][ Storage Resource Manager (SRM) specification]]. In some cases a Storage Element and the shared file system may use the same underlying distributed file system, providing local access from the worker nodes and external access through the gsiftp protocol, or the SRM specification. 

During this exercise we will pre-stage data on the specific SE and then run a job on a worker node that accesses the file directly.

What you have to know before you start:
   * Storage url (surl) of Storage Elements available for %VO% VO members:
      1. Nebraska SE end point: ==srm://red-srm1.unl.edu:8443/srm/v2/server?SFN=/mnt/hadoop/user/%VO%== ([[https://twiki.grid.iu.edu/bin/view/ReleaseDocumentation/HadoopInstall][BeStMan-gateway/Hadoop DFS]]; data available from the worker nodes with the path ==/mnt/hadoop/user/%VO%==)
      1. OSG_EDU SE end point:  ==%SURL%/%VO%/== 

There are [[https://twiki.grid.iu.edu/bin/view/Education/DataManagement2Oss2010#SRM_clients][many implementations of srm client]]. You can choose the one you like the most. Examples that are shown here are using  [[https://twiki.grid.iu.edu/bin/view/Trash/ReleaseDocumentationLBNLSrmClient][srm-lbnl-client]].

---+++ First steps
   * Verify that you can access storage&lt;pre class=&quot;screen&quot;&gt;
srm-ping %SURL%
%TWISTY%
srm-ping   2.2.1.3.12  Tue Apr 27 13:13:24 PDT 2010
BeStMan and SRM-Clients Copyright(c) 2007-2010,
Lawrence Berkeley National Laboratory. All rights reserved.
Support at SRM@LBL.GOV and documents at http://sdm.lbl.gov/bestman
SRM-CLIENT: Connecting to serviceurl httpg://se.grid.unesp.br:8443/srm/v2/server

SRM-PING: Mon Dec 06 19:43:36 BRST 2010  Calling SrmPing Request...
versionInfo=v2.2

Extra information (Key=Value)
backend_type=BeStMan
backend_version=2.2.1.3.13
backend_build_date=2010-04-28T16:55:52.000Z 
gsiftpTxfServers[0]=gsiftp://dts01.grid.unesp.br
gsiftpTxfServers[1]=gsiftp://dts02.grid.unesp.br
gsiftpTxfServers[2]=gsiftp://dts03.grid.unesp.br
gsiftpTxfServers[3]=gsiftp://dts04.grid.unesp.br
GatewayMode=Enabled
clientDN=/DC=org/DC=doegrids/OU=People/CN=Tanya Levshina 508821
gumsIDMapped=osgedu
%ENDTWISTY%
&lt;/pre&gt;

   * Verify that you can upload file. First, create a directory &lt;pre class=&quot;screen&quot;&gt;
srm-mkdir  %SURL%/%VO%/${USER}
%TWISTY%
srm-mkdir   2.2.1.3.12  Tue Apr 27 13:13:24 PDT 2010
BeStMan and SRM-Clients Copyright(c) 2007-2010,
Lawrence Berkeley National Laboratory. All rights reserved.
Support at SRM@LBL.GOV and documents at http://sdm.lbl.gov/bestman
SRM-CLIENT: Connecting to serviceurl httpg://se.grid.unesp.br:8443/srm/v2/server

SRM-DIR: Mon Dec 06 19:46:22 BRST 2010 Calling SrmMkdir
SRM-DIR: DirectoryPath(0)=srm://se.grid.unesp.br:8443/srm/v2/server?SFN=/store/osgedu/tanya
        status=SRM_SUCCESS
        explanation=null
%ENDTWISTY%
&lt;/pre&gt; Copy Whitman&#39;s prose file to this SE directory: &lt;pre class=&quot;screen&quot;&gt;
srm-copy file:///${PWD}/Complete-Prose-Works-by-Walt-Whitman.txt   %SURL%/%VO%/${USER}/Complete-Prose-Works-by-Walt-Whitman.txt
%TWISTY%
srm-copy   2.2.1.3.12  Tue Apr 27 13:13:24 PDT 2010
BeStMan and SRM-Clients Copyright(c) 2007-2010,
Lawrence Berkeley National Laboratory. All rights reserved.
Support at SRM@LBL.GOV and documents at http://sdm.lbl.gov/bestman
SRM-CLIENT: Mon Dec 06 19:47:21 BRST 2010 Connecting to httpg://se.grid.unesp.br:8443/srm/v2/server

SRM-CLIENT: Mon Dec 06 19:47:22 BRST 2010 Calling SrmPrepareToPutRequest now ...
request.token=put:33052
Request.status=SRM_SUCCESS
explanation=null

SRM-CLIENT: RequestFileStatus for SURL=file:////home/tanya/osg_school/dm_part_1/Complete-Prose-Works-by-Walt-Whitman.txt is Ready.
SRM-CLIENT: received TURL=gsiftp://dts01.grid.unesp.br//store/osgedu/tanya/Complete-Prose-Works-by-Walt-Whitman.txt

SRM-CLIENT: Mon Dec 06 19:47:26 BRST 2010 start file transfer
SRM-CLIENT:Source=file:////home/tanya/osg_school/dm_part_1/Complete-Prose-Works-by-Walt-Whitman.txt
SRM-CLIENT:Target=gsiftp://dts01.grid.unesp.br//store/osgedu/tanya/Complete-Prose-Works-by-Walt-Whitman.txt

SRM-CLIENT: Mon Dec 06 19:47:30 BRST 2010 end file transfer for file:////home/tanya/osg_school/dm_part_1/Complete-Prose-Works-by-Walt-Whitman.txt

SRM-CLIENT: Mon Dec 06 19:47:30 BRST 2010 Calling putDone for srm://se.grid.unesp.br:8443/srm/v2/server?SFN=/store/osgedu/tanya/Complete-Prose-Works-by-Walt-Whitman.txt
Result.status=SRM_SUCCESS
Result.Explanation=null

SRM-CLIENT: Request completed with success

SRM-CLIENT: Printing text report now ...

SRM-CLIENT*REQUESTTYPE=put
SRM-CLIENT*TOTALFILES=1
SRM-CLIENT*TOTAL_SUCCESS=1
SRM-CLIENT*TOTAL_FAILED=0
SRM-CLIENT*REQUEST_TOKEN=put:33052
SRM-CLIENT*REQUEST_STATUS=SRM_SUCCESS
SRM-CLIENT*SOURCEURL[0]=file:////home/tanya/osg_school/dm_part_1/Complete-Prose-Works-by-Walt-Whitman.txt
SRM-CLIENT*TARGETURL[0]=srm://se.grid.unesp.br:8443/srm/v2/server?SFN=/store/osgedu/tanya/Complete-Prose-Works-by-Walt-Whitman.txt
SRM-CLIENT*TRANSFERURL[0]=gsiftp://dts01.grid.unesp.br//store/osgedu/tanya/Complete-Prose-Works-by-Walt-Whitman.txt
SRM-CLIENT*ACTUALSIZE[0]=0
SRM-CLIENT*FILE_STATUS[0]=SRM_SUCCESS
SRM-CLIENT*EXPLANATION[0]=SRM-CLIENT: PutDone is called successfully

%ENDTWISTY%
&lt;/pre&gt;
   * Check that the file is actually there: &lt;pre class=&quot;screen&quot;&gt;
srm-ls  %SURL%/%VO%/${USER}/Complete-Prose-Works-by-Walt-Whitman.txt
%TWISTY%
srm-ls   2.2.1.3.12  Tue Apr 27 13:13:24 PDT 2010
BeStMan and SRM-Clients Copyright(c) 2007-2010,
Lawrence Berkeley National Laboratory. All rights reserved.
Support at SRM@LBL.GOV and documents at http://sdm.lbl.gov/bestman
SRM-CLIENT: Connecting to serviceurl httpg://se.grid.unesp.br:8443/srm/v2/server

SRM-DIR: Mon Dec 06 19:48:26 BRST 2010 Calling srmLsRequest

SRM-DIR: ..........................
        Status    : SRM_SUCCESS
        Explanation : null
        Request token=null

        SURL=/store/osgedu/tanya/Complete-Prose-Works-by-Walt-Whitman.txt
        Bytes=1497975
        FileType=FILE
        StorageType=null
        Status=SRM_SUCCESS
        Explanation=Read from disk..
        OwnerPermission=null
        LifetimeLeft=null
        LifetimeAssigned=null
        CheckSumType=null
        CheckSumValue=null
        FileLocality=ONLINE
        OwnerPermission=null
        GroupPermission=null
        OtherPermission=null
        ArrayOfSpaceTokens=null
        RetentionPolicyInfo=null
        LastModificationTime=null
        CreatedAtTime=null

SRM-DIR: Printing text report now ...
SRM-CLIENT*REQUEST_STATUS=SRM_SUCCESS
SRM-CLIENT*SURL=/store/osgedu/tanya/Complete-Prose-Works-by-Walt-Whitman.txt
SRM-CLIENT*BYTES=1497975
SRM-CLIENT*FILETYPE=FILE
SRM-CLIENT*FILE_STATUS=SRM_SUCCESS
SRM-CLIENT*FILE_EXPLANATION=Read from disk..
SRM-CLIENT*FILELOCALITY=ONLINE
%ENDTWISTY%
&lt;/pre&gt;
  * Remove this file: &lt;pre class=&quot;screen&quot;&gt;
srm-rm  %SURL%/%VO%/${USER}/Complete-Prose-Works-by-Walt-Whitman.txt
%TWISTY%
srm-rm   2.2.1.3.12  Tue Apr 27 13:13:24 PDT 2010
BeStMan and SRM-Clients Copyright(c) 2007-2010,
Lawrence Berkeley National Laboratory. All rights reserved.
Support at SRM@LBL.GOV and documents at http://sdm.lbl.gov/bestman
SRM-CLIENT: Connecting to serviceurl httpg://se.grid.unesp.br:8443/srm/v2/server

SRM-DIR: Mon Dec 06 19:49:01 BRST 2010 Calling SrmRmFile
SRM-DIR: Total files to remove: 1
        status=SRM_SUCCESS
        explanation=null
        surl=srm://se.grid.unesp.br:8443/srm/v2/server?SFN=/store/osgedu/tanya/Complete-Prose-Works-by-Walt-Whitman.txt
        status=SRM_SUCCESS
        explanation=null
%ENDTWISTY%
&lt;/pre&gt;
---+++On your own
   *  Do srm-copy between Nebraska and OSG-EDU  third-party transfer &lt;pre class=&quot;screen&quot;&gt;
srm-copy  srm://SOURCE:port/srm/v2/server\?SFN=/filepath   srm://TARGET:port/srm/managerv2\?SFN=/filepath   -3partycopy
&lt;/pre&gt;
   

---++ Running job on the Grid with SE
 Run a Condor-G job that downloads Whitman&#39;s prose file  from SE to the ==$OSG_WN_TMP== area on the worker node and execute the same ==word_counter== python script. First, make sure that you have the text file upload to the storage.
&lt;/pre&gt; Copy Whitman&#39;s prose file to this SE directory: &lt;pre class=&quot;screen&quot;&gt;
srm-copy file:///${PWD}/Complete-Prose-Works-by-Walt-Whitman.txt   %SURL%/%VO%/${USER}/Complete-Prose-Works-by-Walt-Whitman.txt
&lt;/pre&gt;

 We will need to modify submission file first. Create ==test3.submit== file &lt;pre class=&quot;file&quot;&gt;
universe=grid
grid_resource = gt2 %GATEKEEPER%/jobmanager-%BATCH_SYSTEM%
Executable = test3.sh
Log = test3.$(Cluster).$(Process).log
Output = test3.$(Cluster).$(Process).out
Error = test3.$(Cluster).$(Process).err
transfer_executable = true
transfer_input_files = word_counter
WhenToTransferOutput = ON_EXIT_OR_EVICT
transfer_output_files = wordcouner_results.test3.$(Cluster).$(Process)
should_transfer_files   = YES
Arguments =  Complete-Prose-Works-by-Walt-Whitman.txt grass %SURL%/%VO%/%UCL_USER% wordcouner_results.test3.$(Cluster).$(Process)
queue
&lt;/pre&gt; Copy test3.sh script from ==/opt/workshop/dm_exercises/part1/test3.sh==.The script test3.sh will look like:&lt;pre class=&quot;file&quot;&gt;
more test3.sh %TWISTY% 
#!/bin/bash
############################################################
#  test3 - download file from a particular Storage Element  #
#          execute word_counter script                      #
#          do cleanup                                       #
#############################################################
usage ()
{
     log &quot;Usage: file_name word surl path logfile&quot;
}
log ()
{
if [ x$logname == x ]
then
        echo $1
else
        echo $1 &gt;&gt;$logfile
fi
}
# test if we have four arguments on the command line
if [ $# -lt  3 ]
then
    usage
    exit 1
fi
file=$1
word=$2
surl=$3
logname=&quot;&quot;
cwd=`pwd`
if [ $# -eq 4 ]
then
        logname=$4
        logfile=$cwd/$logname
        #just in case create a logfile
        touch $logfile
fi
retVal=0
log &quot;Start test3.sh&quot;
#setup grid enviroment
. $OSG_GRID/setup.sh
#create temporary directory
export TMPDIR=$OSG_WN_TMP
tmpDir=`mktemp -d -t osgedu.XXXXXX`
cd $tmpDir
log &quot;Current directory is $tmpDir&quot;
#move and change the permission of the uploaded script
mv $cwd/word_counter .
chmod 755 word_counter
log &quot;Executing: srm-copy $surl/$file file:///$PWD/$file&quot;
srm-copy $surl/$file file:///$PWD/$file
retVal=$?
log &quot;Return value $retVal&quot;
if [ $retVal -eq 0 ]
then
        #move word_counter script
        option=&quot;&quot;
        if [ x$logname != x ]
        then
                option=&quot;--output=$logfile&quot;
        fi
        log &quot;Executing: $cwd/word_counter $file  $word $option&quot;
        ./word_counter $file  $word --output=$logfile
        retVal=$?
        log &quot;Return value $retVal&quot;
fi
cd $OSG_WN_TMP
rm -rf $tmpDir
log &quot;End test3.sh&quot;
exit $retVal
%ENDTWISTY%
&lt;/pre&gt;
 
---++ Running job on the Grid with SQUID  
Run a Condor-G job that downloads Whitman&#39;s prose file via Squid service if available otherwise copy the file from SE. Place this file into the ==$OSG_WN_TMP== area on the worker node then  execute the same ==word_counter== python script.

We will need to modify just slightly the submission file ==test3.submit==.  Create ==test4.submit== file (note that the only difference between these two submission files is the name of the  executable) &lt;pre class=&quot;file&quot;&gt;
universe=grid
grid_resource = gt2 %GATEKEEPER%/jobmanager-%BATCH_SYSTEM%
Executable = test4.sh
Log = test4.$(Cluster).$(Process).log
Output = test4.$(Cluster).$(Process).out
Error = test4.$(Cluster).$(Process).err
transfer_executable = true
transfer_input_files = word_counter
WhenToTransferOutput = ON_EXIT_OR_EVICT
transfer_output_files = wordcounter_results.test4.$(Cluster).$(Process)
should_transfer_files   = YES
Arguments =  Complete-Prose-Works-by-Walt-Whitman.txt grass %SURL%/%VO%/%UCL_USER% wordcounter_results.test4.$(Cluster).$(Process)
queue
&lt;/pre&gt; Copy test4.sh script from ==/opt/workshop/dm_exercises/part1/test4.sh==.The script test4.sh will look like:&lt;pre class=&quot;file&quot;&gt;
more test4.sh %TWISTY% 
#!/bin/bash
#############################################################
#  test4 - download file from a Squid server if exists or   #
# copy file from aparticular Storage Element                #
#          execute word_counter script                      #
#          do cleanup                                       #
#############################################################
usage ()
{
     log &quot;Usage: file_name word surl path logfile&quot;
}
log ()
{
if [ x$logname == x ]
then
        echo $1
else
        echo $1 &gt;&gt;$logfile
fi
}
# test if we have four arguments on the command line
if [ $# -lt  3 ]
then
    usage
    exit 1
fi
file=$1
word=$2
surl=$3
logname=&quot;&quot;
cwd=`pwd`
if [ $# -eq 4 ]
then
        logname=$4
        logfile=$cwd/$logname
        #just in case create a logfile
        touch $logfile
fi
retVal=0
log &quot;Start test4.sh&quot;
#setup grid enviroment
. $OSG_GRID/setup.sh
#create temporary directory
export TMPDIR=$OSG_WN_TMP
tmpDir=`mktemp -d -t osgedu.XXXXXX`
cd $tmpDir
log &quot;Current directory is $tmpDir&quot;
#move and change the permission of the uploaded script
mv $cwd/word_counter .
chmod 755 word_counter

#try to find SQUID location on that site if failed execute srm-copy
if [ x$OSG_SQUID_LOCATION != x ]  &amp;&amp;  [ $OSG_SQUID_LOCATION != UNAVAILABLE ]
then
        log &quot;Found Squid at $OSG_SQUID_LOCATION on `uname`, will try to download file the web&quot;
        export http_proxy=$OSG_SQUID_LOCATION
        wget -d -O/$PWD/$file  http://www.gutenberg.org/ebooks/8813.html.gen  2&gt;&amp;1
        retVal=$?
else
        log &quot;Executing: srm-copy $surl/$file file:///$PWD/$file&quot;
        srm-copy $surl/$file file:///$PWD/$file
        retVal=$?
fi
log &quot;Return value $retVal&quot;
if [ $retVal -eq 0 ]
then
        #move word_counter script
        option=&quot;&quot;
        if [ x$logname != x ]
        then
                option=&quot;--output=$logfile&quot;
        fi
        log &quot;Executing: $cwd/word_counter $file  $word $option&quot;
        ./word_counter $file  $word --output=$logfile
        retVal=$?
        log &quot;Return value $retVal&quot;
fi
cd $OSG_WN_TMP
rm -rf $tmpDir
log &quot;End test4.sh&quot;
exit $retVal
%ENDTWISTY%
&lt;/pre&gt;





-- Main.TanyaLevshina - 09 Jul 2010
