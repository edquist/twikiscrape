---+!!Troubleshooting Exercises 
%TOC{depth=&quot;3&quot;}%

---+ Introduction
In the second part of our exercises we will continue to work with BLAST application, now adding storage into the picture.

---+ Customize this Document

&lt;!-- OSG Summer School 2011 Defaults
   * Local VO= %URLPARAM{&quot;INPUT_VO&quot; encode=&quot;quote&quot; default=&quot;osgedu&quot;}%
   * Local UCL_HOST = %URLPARAM{&quot;INPUT_HOST&quot; encode=&quot;quote&quot; default=&quot;osg-ss-glidein&quot;}%
   * Local UCL_USER = %URLPARAM{&quot;INPUT_USER&quot; encode=&quot;quote&quot; default=&quot;user&quot;}%
   * Local UCL_DOMAIN = %URLPARAM{&quot;INPUT_DOMAIN&quot; encode=&quot;quote&quot; default=&quot;chtc.wisc.edu&quot;}%
   * Local GATEKEEPER = %URLPARAM{&quot;INPUT_GATEKEEPER&quot; encode=&quot;quote&quot; default=&quot;red.unl.edu&quot;}%
   * Local UCL_CWD= %URLPARAM{&quot;INPUT_CWD&quot; encode=&quot;quote&quot; default=&quot;touble_part1&quot;}%
   * Local WORKING_DIR= %URLPARAM{&quot;INPUT_WORKING_DIR&quot; encode=&quot;quote&quot; default=&quot;/share/users/%UCL_USER%/osg_school/touble_part1&quot;}%
   * Local BATCH_SYSTEM = %URLPARAM{&quot;BATCH_SYSTEM&quot; encode=&quot;quote&quot; default=&quot;condor&quot;}%
   * Local REMOTE_ROOT = %URLPARAM{&quot;INPUT_REMOTE_ROOT&quot; encode=&quot;quote&quot; default=&quot;/mnt/hadoop/user&quot;}%
   * Local REMOTE_SRM = %URLPARAM{&quot;INPUT_SRM&quot; encode=&quot;quote&quot; default=&quot;red-srm1.unl.edu:8443&quot;}%
   * Local REMOTE_GRIDFTP= %URLPARAM{&quot;INPUT_GRIDFTP&quot; encode=&quot;quote&quot; default=&quot;red-gridftp.unl.edu&quot;}%
   * Local SURL = srm://%REMOTE_SRM%/srm/v2/server?SFN=%REMOTE_ROOT%
   * Local TURL= gsiftp://%REMOTE_GRIDFTP%/%REMOTE_ROOT%
   * Local OSG_DATA=%URLPARAM{&quot;INPUT_OSG_DATA&quot; encode=&quot;quote&quot; default=&quot;/osg/data&quot;}%
   * Local BLAST_DB_SUBMIT=%URLPARAM{&quot;INPUT_BLAST_DB_SUBMIT&quot; encode=&quot;quote&quot; default=&quot;/share/blast&quot;}%
   * Local VDT_LOCATION=/opt/osg-client
--&gt;

%ICON{&quot;warning&quot;}% %RED% Please change your user name and click on the Customize button!%ENDCOLOR%
&lt;form action=&quot;%SCRIPTURLPATH{&quot;view&quot;}%/%WEB%/%TOPIC%&quot;&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      %RED%Login Name%ENDCOLOR%
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_USER&quot; value=&quot;%UCL_USER%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      VO
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_VO&quot; value=&quot;%VO%&quot;/&gt;
    &lt;/td&gt;
  &lt;tr&gt;
    &lt;td&gt;
      Host Name
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_HOST&quot; value=&quot;%UCL_HOST%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      Domain Name
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_DOMAIN&quot; value=&quot;%UCL_DOMAIN%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
    &lt;td&gt;
      Exercise Path
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_WORKING_DIR&quot; value=&quot;%WORKING_DIR%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
     &amp;nbsp;
     &lt;input type=&quot;submit&quot; class=&quot;twikiSubmit&quot; value=&quot;Customize&quot; /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/form&gt;

---+ Exercises 
---++ Prerequisite 

   * Login on submission node &lt;pre class=&quot;screen&quot;&gt;
ssh %UCL_USER%@%UCL_HOST%.%UCL_DOMAIN%
&lt;/pre&gt;
&lt;!--   * Initialize the OSG client environment &lt;pre class=&quot;screen&quot;&gt;
source %VDT_LOCATION%/setup.sh
&lt;/pre&gt;
--&gt;
   * Obtain proxy certificate, if you have not done so already &lt;pre class=&quot;screen&quot;&gt;
voms-proxy-init -voms %VO%:/%VO%
&lt;/pre&gt;
   * Make a directory for this exercise&lt;pre class=&quot;screen&quot;&gt;
mkdir -p %UCL_CWD%
cd %UCL_CWD%
&lt;/pre&gt;

---++ Simple Troubleshooting

On [[OSGSS2012CondorFirstJob][Monday]], you used the program &#39;simple&#39;.  We will use it again here.  Copy the source file, ==simple.c== to the exercise directory. &lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT% cp /share/users/%UCL_USER%/condor-test/simple.c ./
&lt;/pre&gt;

Next, we will compile the ==simple.c== and create the executable ==simple== &lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT% gcc -static -o simple simple.c
&lt;/pre&gt;

How can we tell what type of file ==simple== is?  There is a special command for that: &lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT% file simple
simple: ELF %RED%64-bit%ENDCOLOR% LSB executable, AMD x86-64, version 1 (SYSV), for GNU/Linux 2.6.9, statically linked, for GNU/Linux 2.6.9, from &#39;mplete&#39;, not stripped
&lt;/pre&gt;

I highlighted an important bit above.  It says 64 bit.  ==simple== is a 64 bit executable.  Will this run on the 32bit machines?  Lets find out...

We need the submit file for simple that you created [[OSGSS2012CondorFirstJob][Monday]].  We modified this submit file to target the 32bit machines.  Copy this to a file named ==simple.submit==: &lt;pre class=&quot;file&quot;&gt;
Universe   = vanilla
Executable = simple
Arguments  = 4 10
Log        = simple.log
Output     = simple.out
Error      = simple.error
should_transfer_files   = YES
when_to_transfer_output = ON_EXIT
%RED%Requirements = Arch == &quot;INTEL&quot;%ENDCOLOR%
Queue
&lt;/pre&gt;

Does the job complete? %TWISTY{
showlink=&quot;Show Answer&quot;
hidelink=&quot;Hide Answer&quot;
mode=&quot;div&quot;
showimgleft=&quot;%ICONURLPATH{toggleopen-small}%&quot;
hideimgleft=&quot;%ICONURLPATH{toggleclose-small}%&quot;
}%
&lt;div style=&quot;margin-left: 1em; margin-right: 1em; background-color: #ffff66; border: 1px solid black; padding: 0.5em;&quot;&gt;
No, the job doesn&#39;t complete.  In simple.error, you can see the error: &lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT% cat simple.error
/myhome1/condor/execute/dir_9935/glide_D10001/condor_job_wrapper.sh: line 8: /myhome1/condor/execute/dir_9935/glide_D10001/execute/dir_14214/condor_exec.exe: cannot execute binary file
/myhome1/condor/execute/dir_9935/glide_D10001/condor_job_wrapper.sh: line 8: /myhome1/condor/execute/dir_9935/glide_D10001/execute/dir_14214/condor_exec.exe: Success
&lt;/pre&gt;

Ignore the Success, clearly the earlier error (==cannot execute binary file==) means the job didn&#39;t run.
&lt;/div&gt;
%ENDTWISTY%

So, what can we do to solve this problem?
   1. We can recompile simple for 32 bit.
   1. We can target only 64 bit machines.

Recompiling for 32bit machines is easy.  Just need to send a new command argument to gcc when you are compiling the executable: &lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT% gcc -static %RED%-m32%ENDCOLOR% -o simple simple.c
&lt;/pre&gt;

Retargeting the job for only 64 bit machines requires chaning the ==requirements= statement in the submit file: &lt;pre class=&quot;file&quot;&gt;
Requirements = %RED%Arch == &quot;X86_64&quot;%ENDCOLOR%
&lt;/pre&gt;

What are the advantges of either approach? Does the job complete? %TWISTY{
showlink=&quot;Show Answer&quot;
hidelink=&quot;Hide Answer&quot;
mode=&quot;div&quot;
showimgleft=&quot;%ICONURLPATH{toggleopen-small}%&quot;
hideimgleft=&quot;%ICONURLPATH{toggleclose-small}%&quot;
}%
&lt;div style=&quot;margin-left: 1em; margin-right: 1em; background-color: #ffff66; border: 1px solid black; padding: 0.5em;&quot;&gt;
When you recompile for 32bit machines, that means you can run on both 32bit and 64bit machines (as seen in the presentation).  This widens the resources available to run your processing.

Changing the requirements to target 64bit machines helps if it is difficult to rebuild the executable (for example, if you do not have the source).  Also, if the application needs 64 bit for some reason (over 4GB of ram required?).

&lt;/div&gt;%ENDTWISTY%

---++ Bigger Troubleshooting
Lets use the shell script we used on [[https://twiki.grid.iu.edu/bin/view/Education/OSGSS2012CondorBourne][Monday]] as well.  Copy script into a file named ==simple.sh==.
&lt;pre style=&quot;margin-left:4em&quot; class=&quot;file&quot;&gt;
#!/bin/sh

if [ $# -ne 2 ]; then
    echo &quot;Usage: simple.sh &lt;sleep-time&gt; &lt;integer&gt;&quot;
    exit 1
fi

echo &quot;Thinking really hard for $1 seconds..&quot;
sleep $1
answer=$(( $2 * 2 ))
echo &quot;We calculated $answer.&quot;
exit 0
&lt;/pre&gt;

Next, modify ==simple.submit== to run this executable rather than the compiled ==simple==.  When we submit the job, everything works great.  But lets make it work... not great.  Lets make it fail.. you know... for science!

Lets modify ==simple.submit== to send an odd argument.  Modify the ==arguments== line, replacing the second number with a word (for example, ==blah==).  Submit the job to condor (==condor_submit simple.submit==).  What is the output after the job has completed?

Hum... something is not right.  Lets see what is going on in the shell script.  At the top of the shell script, modify the line ==#!/bin/sh== to add a ==-x==.  Therefore, the top line should be: ==#!/bin/sh -x==.  Submit the job again.  After the job has completed, look in the simple.error.

%TWISTY{
showlink=&quot;Show example simple.err&quot;
hidelink=&quot;Hide example simple.err&quot;
mode=&quot;div&quot;
showimgleft=&quot;%ICONURLPATH{toggleopen-small}%&quot;
hideimgleft=&quot;%ICONURLPATH{toggleclose-small}%&quot;
}%
&lt;pre class=&quot;file&quot;&gt;
%UCL_PROMPT% cat simple.error 
+ &#39;[&#39; 2 -ne 2 &#39;]&#39;
+ echo &#39;Thinking really hard for 4 seconds..&#39;
+ sleep 4
+ answer=0
+ echo &#39;We calculated 0.&#39;
+ exit 0
&lt;/pre&gt;

Odd, we didn&#39;t send it ==0==.  We sent it ==blah==, but it interpreted it as ==0==.  This is a quirk of bash shell scripts, if it doesn&#39;t understand a number (ie, if it&#39;s letters), then intrepret it as 0.
%ENDTWISTY%

Can you imagine scenerios where this would be helpful?  Debugging shell scripts is very common in grid computing, since we have so many wrapper scripts.

---++ Adding ==condor_ssh_to_job==
Fix the ==simple.submit== above, replacing ==blah== with ==10==.  Also, make the shell script sleep longer, change the first number in the ==arguments== line to be 20.  This time, we want to watch the job execute while it happens.

Submit the ==simple.submit==.  Watch it&#39;s execution in the queue using ==condor_q==.  When the job begins running, ie you see a ==R== in the job status, issue the command: &lt;pre class=&quot;screen&quot;&gt;
condor_ssh_to_job %RED%10.0%ENDCOLOR%
&lt;/pre&gt;

Replacing %RED%10.0%ENDCOLOR% with your actual job id from ==condor_q==.  After issueing this command, you should be logged into the remote machine.  You can see the files and job running on the execute machine.

Looking around at the files on the remote worker node, can you answer some simple questions:
   1. What files do you have in the directory.
   1. Can you guess what these files will be named once they are transferred back?
   1. What directory are you in?  Is it where you expected?

Once you are done looking around on the worker node, type ==logout== in the screen.
