&lt;style type=&quot;text/css&quot;&gt;
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
&lt;/style&gt;

---+ Friday Exercise 6: Background Information: Joe&#39;s Computing Work
Joe Biologist studies the influence of genetic differences (genotypes) on the growth characteristics (phenotypes) of a common crop. Joe has come to you with some computing work he’d like to make into a workflow on your computing grid. He has used HTCondor to submit separate jobs, but has only run in a smaller, dedicated cluster where he doesn’t have to request CPU, disk, or RAM, and he’s not familiar with DAGman.

---+++ After asking Joe many questions, you realize the following things:

*1) Joe starts with a file called =input.csv= that was made on his desktop.* When you open this file in excel, Joe shows you that each row corresponds to an individual plant. For each individual, the first three columns are phenotype measurements for each of three different growth traits (T240, T300, T360), and the remaining columns contain the genotype (A or B) of that individual across multiple genes.

*2) Joe performs two steps _for each trait_: a &quot;Permutation preparation&quot; step and a “QTL mapping” step that each need only 1 CPU core.*
   * For each trait, Joe usually runs a &quot;Permutation&quot; condor job that uses one column of phenotype data and all the genotype information from input.csv for all individuals. This step, which calculates some input number of random permutations of the data, is carried out by an R program, =run_perm.R=, and the number of permutations performed is passed as an argument to the program. Joe needs to run a total of 10,000 total permutations per trait, but these can be achieved by running multiple condor job processes of fewer permutations for a total of 10,000.
   * A g-zipped tarball of all of the permutation output for a trait is then created to be used in the second step.
   * In the second step, which is a &quot;QTL&quot; mapping step, a program called =qtl.R= takes in the data from =input.csv=, data from a tarball of the trait-specific permutation output, and an argument indicating the input.csv column number for the trait. 
   * The QTL step produces multiple output files that Joe then needs to tar and compress so he can copy the final data back to his own computer.

*3) Joe uses a special wrapper script to execute his two steps with HTCondor.* For each step this perl script, =runR.pl=, first installs R using files from a proxy server and then sets up the R environment before running whatever R script has been indicated as an argument. Therefor, the =runR.pl= wrapper script is run as the HTCondor executable with the name of either R program indicated as an argument to the wrapper (along with arguments to the R program, itself).

*4) Joe has brought all of his inputs, outputs, and submit files for you to see.* (You’ll see these in the exercises and should only need to modify the submit files as specifically indicated.)

*5) When Joe runs all 10,000 permutations as one condor job, it will run for days (too long for _your_ cluster, which only runs jobs for up to a 4 hours each).* He has cut the permutations of a single condor job up into multiple, shorter HTCondor processes of fewer permutations before, but he doesn’t remember the details.


---+++ Joe’s Job Summaries

Based upon Joe’s description and submit files you determine the following details for each step:

---++++ *Permutation Step* (example if permutation1.submit)

execution: 	
   * =./runR.pl 1_$(Process) run_perm.R 1 $(Process) 10000=

arg descriptions:	
   * =1_$(Process)=, used by =runR.pl= to name its log file
   * =1=, trait column in =input.csv= (i.e. this is 3 for permutation3.submit)
   * =$(Process)=,	used by =run_perm.R= for naming the permutation output
   * =10000=,	indicates that 10,000 permutations should be done for this single job process

input: 		
   * =run_perm.R=, =input.csv=, =RLIBS.tar.gz=

 output: 	
   * =runR.1_0.out=, log file for =runR.pl=, where &quot;1_0&quot; is from arg
   * =perm_part.1_0.Rdat=, output from =run_perm.R=, &quot;1&quot; and &quot;0&quot; are from args

*Note:* =tarit.sh= is run after each trait&#39;s Permutation step (with the column number as an argument) to compress =perm_part.1_0.Rdat= for the QTL step. Execution: =tarit.sh 1=, where &quot;1&quot; is the trait column number.
		
---++++ *QTL Mapping Step* (example if =qtl1.submit=)

execution:	
   * =./runR.pl qtl_1 qtl.R 1=

arg descriptions:	
   * =qtl_1=, used by =runR.pl= to name its log file
   * =1=, trait column in =input.csv=

input:		
        =qtl.R, input.csv=, =RLIBS.tar.gz=, =perm_combined.tar.gz= (created by =tarit.sh=)

output:	
   * =runR.qtl_1.out=, log file for =runR.pl=, where &quot;qtl_1&quot; is from arg
   * =perm_combined_1.Rdat=,	&quot;1&quot; is from =qtl.R= arg
   * =perm_summary_1.txt=, “”
   * =sim_geno_results_1.Rdat=, “”
   * =qtl_1.Rdat=, “”
   * =refined_qtl_summary_1.txt=, “”
   * =refined qtl_1.Rdat=, “”
   * =fit_qtl_results_1.Rdat=, &quot;”

*Note:* =results_1.tar.gz= is made by running =taritall.sh= (with the column number as an argument) after the QTL step for each trait finishes, where &quot;1&quot; reflects the trait column number in the output above. Execution: =taritall.sh 1=, where &quot;1&quot; is the trait column number.




-- Main.LaurenMichael - 23 Jul 2015

