&lt;style type=&quot;text/css&quot;&gt;
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
&lt;/style&gt;

---+ Monday Exercise 2.1: Explore condor_q

The goal of this exercise is try out some of the most common options to the =condor_q= command, so that you can view jobs effectively.

The main part of this exercise should take just a few minutes, but if you have more time later, come back and work on the extension ideas at the end to become a =condor_q= expert!


---++ Selecting Jobs

The =condor_q= program has many options for selecting which jobs are listed. You have already seen that you filter the list to show only one user’s jobs:

&lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT_SHORT% &lt;strong&gt;condor_q &lt;em&gt;userid&lt;/em&gt;&lt;/strong&gt;
&lt;/pre&gt;

*Note:* You can name more than one user on the command line, in which case jobs for *all* of the named users are listed.

There are two other, simple selection criteria that you can use. To list just the jobs associated with a single cluster number:

&lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT_SHORT% &lt;strong&gt;condor_q &lt;em&gt;cluster&lt;/em&gt;&lt;/strong&gt;
&lt;/pre&gt;

For example, if you want to see the jobs in cluster 5678 (i.e., =5678.0=, =5678.1=, etc.), you use =condor_q 5678=.

To list a specific job ID (i.e., cluster *and* process):

&lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT_SHORT% &lt;strong&gt;condor_q &lt;em&gt;job-id&lt;/em&gt;&lt;/strong&gt;
&lt;/pre&gt;

For example, to see job ID 5678.1, you use =condor_q 5678.1=.

*Note:* You can name more than one cluster, job ID, or combination thereof on the command line, in which case jobs for *all* of the named clusters and/or job IDs are listed.

Let’s get some practice using =condor_q= selections!

   1. Using a previous exercise, submit several =sleep= jobs
   1. List all jobs in the queue — are there others besides your own?
   1. Practice using all forms of =condor_q= that you have learned:
      * List just your jobs
      * List a specific cluster
      * List a specific job ID
      * Try listing several (but not all) users’ jobs at once
      * Try listing several clusters and job IDs at once
   1. When there are a variety of jobs in the queue, try combining a user ID and a cluster or job ID in the same command — what happens?


---++ Viewing a Job !ClassAd

You may have wondered why it is useful to be able to list a single job ID using =condor_q=. By itself, it may not be that useful. But, in combination with another option, it is very useful!

If you add the =-long= option to =condor_q= (or its short form, =-l=), it will show the complete !ClassAd for each selected job, instead of the one-line summary that you have seen so far. Because job !ClassAds may have 80&amp;ndash;90 attributes (or more!), it probably makes the most sense to show the !ClassAd for a single job at a time. And you know how to show just one job! Here is what the command looks like:

&lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT_SHORT% &lt;strong&gt;condor_q -long &lt;em&gt;job-id&lt;/em&gt;&lt;/strong&gt;
&lt;/pre&gt;

The output from this command is long and complex. Most of the attributes that HTCondor adds to a job are arcane and uninteresting for us now. But here are some examples of common, interesting attributes taken directly from =condor_q= output (except with some line breaks added to the =Requirements= attribute):

&lt;pre class=&quot;file&quot;&gt;
MyType = &quot;Job&quot;
Err = &quot;sleep.err&quot;
UserLog = &quot;/home/cat/exercise-3/sleep.log&quot;
JobUniverse = 5
Requirements = ( IsOSGSchoolSlot =?= true ) &amp;&amp;
        ( TARGET.Arch == &quot;X86_64&quot; ) &amp;&amp;
        ( TARGET.OpSys == &quot;LINUX&quot; ) &amp;&amp;
        ( TARGET.Disk &gt;= RequestDisk ) &amp;&amp;
        ( TARGET.Memory &gt;= RequestMemory ) &amp;&amp;
        ( TARGET.HasFileTransfer )
ClusterId = 2420
WhenToTransferOutput = &quot;ON_EXIT&quot;
Owner = &quot;cat&quot;
CondorVersion = &quot;$CondorVersion: 8.0.0 May 29 2013 BuildID: 133173 $&quot;
Out = &quot;sleep.out&quot;
Cmd = &quot;/bin/sleep&quot;
Arguments = &quot;120&quot;
&lt;/pre&gt;

*Note:* Attributes are listed in no particular order and may change from time to time. Do not assume anything about the order of attributes in =condor_q= output.

See what you can find in a job !ClassAd from your own job.

   1. Using a previous exercise, submit a =sleep= job
   1. Before the job executes, capture its !ClassAd and save to a file:\
       &lt;pre class=&quot;screen&quot;&gt;%UCL_PROMPT_SHORT% &lt;strong&gt;condor_q -l &lt;em&gt;job-id&lt;/em&gt; &amp;gt; classad-1.txt&lt;/strong&gt;&lt;/pre&gt;
   1. After the job starts execution but before it finishes, capture its !ClassAd again and save to a file:\
       &lt;pre class=&quot;screen&quot;&gt;%UCL_PROMPT_SHORT% &lt;strong&gt;condor_q -l &lt;em&gt;job-id&lt;/em&gt; &amp;gt; classad-2.txt&lt;/strong&gt;&lt;/pre&gt;

Now examine each saved !ClassAd file. Here are a few things to look for:

   * Can you find attributes that came from your submit file? (E.g., !JobUniverse, Cmd, Arguments, Out, Err, !UserLog, and so forth)
   * Can you find attributes that could have come from your submit file, but that HTCondor added for you? (E.g., Requirements)
   * How many of the following attributes can you guess the meaning of?
      * !DiskUsage
      * !ImageSize
      * !BytesSent
      * !JobStartDate — what format is the value in? (Hint: The HTCondor developers are primarily trained in the Unix way of doing things.)
      * !JobStatus


---++ Why Is My Job Not Running?

Sometimes, you submit a job and it just sits in the queue in Idle state, never running. It can be difficult to figure out why a job never matches and runs. Fortunately, HTCondor can give you some help.

To ask HTCondor why you job is not running, add the =-analyze= option to =condor_q= for the specific job. For example, for job ID 2423.0, the command is:

&lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT_SHORT% &lt;strong&gt;condor_q -analyze &lt;em&gt;2423.0&lt;/em&gt;&lt;/strong&gt;
&lt;/pre&gt;

Of course, replace the job ID with your own.

Let’s submit a job that will never run and see what happens. Here is the submit file to use:

&lt;pre class=&quot;file&quot;&gt;
universe = vanilla
executable = /bin/hostname
output = norun.out
error = norun.err
log = norun.log
should_transfer_files = YES
when_to_transfer_output = ON_EXIT
request_memory = 2TB
queue
&lt;/pre&gt;

(Do you see what I did?)

   1. Save and submit this file
   1. Run =condor_q -analyze= on the job ID

There is a lot of output, but a few items are worth highlighting. Here is a sample from my own job (with many lines left out):

&lt;pre class=&quot;file&quot;&gt;
-- Submitter: osg-ss-submit.chtc.wisc.edu : ....
...
---
2423.000:  Run analysis summary.  &lt;em&gt;Of 5616 machines,&lt;/em&gt;
&lt;em&gt;   5616 are rejected by your job&#39;s requirements &lt;/em&gt;
...
WARNING:  Be advised:
&lt;em&gt;   No resources matched request&#39;s constraints&lt;/em&gt;

The Requirements expression for your job is:
...

Suggestions:

    Condition                         Machines Matched    Suggestion
    ---------                         ----------------    ----------
&lt;em&gt;1   ( TARGET.Memory &gt;= 2097152 )      0                   MODIFY TO 16050&lt;/em&gt;
2   ( target.IsOSGSchoolSlot is true )8                    
3   ( TARGET.Arch == &quot;X86_64&quot; )       5551                 
4   ( TARGET.OpSys == &quot;LINUX&quot; )       5602                 
5   ( TARGET.Disk &gt;= 17 )             5616                 
6   ( TARGET.HasFileTransfer )        5616                 
&lt;/pre&gt;

Toward the top, =condor_q= said that it considered 5616 “machines” (really, slots) and *all* 5616 of them were rejected by *my job’s requirements*. In other words, I am asking for something that is not available. But what?

The real clue comes from the breakdown of the Requirements expression, at the end of the output. Note the highlighted line: My job asked for *2 terabytes* of memory (2,097,152 MB) and *no* machines matched that part of the expression. Well, of course! 2 TB is a crazy amount of memory on today’s machines. And finally, note the suggestion: If I reduce my memory request to 16,060 MB (= 16 GB), there will be at least one slot in the pool that will match that expression.

The output from =condor_q -analyze= (and =condor_q -better-analyze=) may be helpful or it may not be, depending on your exact case. The example above was constructed so that it would be obvious what the problem was. But in many cases, this is a good place to start looking if you are having problems matching.

*Bonus question:* Note the =target.IsOSGSchoolSlot is true= part of the requirements and the fact that only 8 slots match? What is going on there? Any guesses?


---++ Formatting Output (Optional)

By default, the =condor_q= lists jobs in the 8-column format that you learned about earlier and have seen many times. But, you can format the output any way that you like! This is a somewhat advanced feature, so you may wish to skip this exercise now and come back to it later.

For each attribute that you want to see in the list output, you provide a single =-format= option and its two arguments. Here is an example format option:

&lt;pre class=&quot;screen&quot;&gt;-format &quot;..%s..&quot; Owner&lt;/pre&gt;

The first argument to a format option is the format string to apply to the attribute’s value. In this case, all of the dot characters are printed exactly as written, and the =%s= part is a placeholder for a &lt;strong&gt;S&lt;/strong&gt;tring value. The attribute itself is named as the second argument. So this format option means to print a job owner name (e.g., =cat=) like this:

&lt;pre class=&quot;file&quot;&gt;..cat..&lt;/pre&gt;

The syntax of the format strings are based on the C-language =printf= functions. For complete information about format strings, check the =condor_q= section of the HTCondor Manual, but here are the most common placeholders and their meanings:

| =%s= | For strings, such as Owner |
| =%d= | For integers such as !ClusterId |
| =%f= | For floating point numbers such as !RemoteWallClockTime |

Also, you will need to know the names of the attributes that you wish to display. Read the HTCondor Manual (Appendix A) for !ClassAd attribute names, or just look through a job !ClassAd for ideas.

*Remember:* Write one =-format= option with its 2 arguments for *each* attribute that you wish to display per job. Also, your format strings must include all extra whitespace, even the end-of-line newline (written =\n=).

Here is an example of a =condor_q= command with format options and some possible output:

&lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT_SHORT% &lt;strong&gt;condor_q -format &#39;%10s&#39; Owner -format &#39;%8d&#39; ClusterId -format &#39;  %s\n&#39; Cmd&lt;/strong&gt;
     moate    2418  /share/test.sh
       cat    2421  /bin/sleep
       cat    2422  /bin/sleep
&lt;/pre&gt;

If you like, spend a few minutes now or later experimenting with =condor_q= formatting.


---++ References

As suggested above, if you want to learn more about =condor_q=, you can do some reading:

   * Read the =condor_q= man page or HTCondor Manual section (same text) to learn about more options
   * Read about !ClassAd attributes in Appendix A of the HTCondor Manual

