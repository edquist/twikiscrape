&lt;style type=&quot;text/css&quot;&gt;
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
&lt;/style&gt;

---+ Thursday Exercise 6.3: Bonus Workflow Modifications

If you finish the entire workflow and are thirsty for more, try any of the following in whatever order you like:

---+++ Bonus 1
Rerun the workflow twice, once with approximately twice the permutations per process and again with four times the permutations (keeping a total of 10,000 permutations per trait). Of these variations, which finishes in an overall faster time? Why?

---+++ Bonus 2
You probably noticed that the job processes from the Permutation step create many log, out, and error files. Modify the Permutation submit files either to consolidate these files for all processes, or to have the files created in a subdirectory. You may wish to direct other files to subdirectories as well. Look back at the Day 1 material for ways to do this.

---+++ Bonus 3
_Focusing just on one of the Permutation steps_, scale up the number of total permutations to 100,000 per trait in two ways: once where each job process completes a number of permutations that correspond to run times of ~1hour, and once for runtimes of ~2 hours. How does the throughput (overall runtime) of the Permutation step differ between these two examples?

---+++ Bonus 4
You may have noticed that Joe’s jobs bring back unnecessary large-ish files that are copied to the execute node when runR.pl sets the R environment at the beginning of each job (=SLIBS1.tar.gz= and =built-sl5-R-2.10.1.tar.gz=). Use the HTCondor =transfer_output_files= line to keep these files from coming back. How much time did the unnecessary transfer of these files back to the submit node add to the Permutation steps? (Hint: You can more quickly determine this by running a single Permutation process with just a few total permutations, and with or without these extra files transferred back as output.)



-- Main.LaurenMichael - 23 Jul 2015
