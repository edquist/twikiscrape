%DOC_STATUS_TABLE%

---+!! Glexec Installation Guide

%TOC{depth=&quot;3&quot;}%

---# About This Document

%ICON{hand}% This document is intended for System Administrators that are installing the OSG version of glexec.

%INCLUDE{&quot;Trash/DocumentationTeam/DocConventions&quot; section=&quot;Header&quot;}%
%INCLUDE{&quot;Trash/DocumentationTeam/DocConventions&quot; section=&quot;CommandLine&quot;}%

---# How to get Help?
To get assistance please use [[HelpProcedure][Help Procedure]].

---# Applicable Versions

The applicable software versions for this document are %RED%OSG Version &gt;= 3.1 %ENDCOLOR%.  The version of glexec installed should be %RED% &gt;= 0.9.6-1.1.osg %ENDCOLOR%.

---# About Glexec

Glexec is commonly used for what are referred to as &quot;pilot&quot; or &quot;glidein&quot; jobs.  

Traditionally, users submitted their jobs directly to a remote site (or compute element gatekeeper).   The user job was authenticated/authorized to run at that site based on the user&#39;s proxy credentials and run under the local unix account assigned.

In a pilot-based infrastructure, users submit their jobs to a centralized site (or queue).   The pilot/glidein software at the centralized site then recognizes there is a demand for computing resources.  It will then submit what is called a pilot/glidein job to a remote site.  This pilot job gets authenticated/authorized to run on a worker node in that site&#39;s cluster.  It will then &quot;pull&quot; down user jobs from the centralized queue and execute them.  Both the pilot and the user job are run under the pilot job&#39;s proxy certificate credentials and local unix account. This represents a security problem in pilot-based systems as there is no authentication/authorization of the individual user&#39;s proxy credentials and, thus, the user&#39;s jobs do not run using it&#39;s own local unix account.

Glexec is a security tool that can be used to resolve this problem.   It is meant to be used by VOs that run these pilot-based jobs.  It  has a number of authentication plugins and can be used both by European grid and by OSG.   

The pilot job will &quot;pull&quot; user jobs down from the central queue and invoke glexec which will then 
   1 authenticate the user job&#39;s proxy, 
   1 perform an authorization callout (to GUMS in the case of OSG, or possibly a gridmapfile) similar to that done by the gatekeeper,
   1 and then run the user job under the local account assigned by the authorization service for that user.

In effect, glexec functions much the same as a compute element gatekeeper, except these functions are now performed on the individual worker node.  The pilot jobs authentication/authorization is done by the gatekeeper and the individual user jobs are now done by glexec on the individual worker node.

Many worker node clusters use shared file systems like NFS for much of their software and user home accounts.  Since glexec is an suid program, it must be installed on every single worker node individually.  Most shared file systems do not handle this correctly so it cannot and must not be NFS-exported.

For more information regarding pilot-based systems and glexec:
   1 &lt;a href=&quot;http://www.uscms.org/SoftwareComputing/Grid/WMS/glideinWMS/doc.html&quot;&gt;glideinWMS - The glidein based WMS&lt;/a&gt;
   1 &lt;a href=&quot;http://iopscience.iop.org/1742-6596/119/5/052029/pdf/jpconf8_119_052029.pdf&quot;&gt;Addressing the pilot security problem with gLExec (pdf)&lt;/a&gt;

---# Engineering Considerations
This section describes any prerequisite software/considerations that must be taken into account before the glexec software installation is performed.  It should be reviewed completely before starting the installation process.

   1 Unlike previous releases of OSG, this version only supports the XACML protocol of GUMS.  This requires the GUMS version to be &gt;= 1.3.
   1 A large number of batch slots using glexec can occasionally put an enormous strain on GUMS servers and cause overloading and client timeouts.   In order to survive peak loads, the sysctl parameter &#39;net.core.somaxconn&#39; on a GUMS server machine should be set at least as high as the maximum number of job slots that might attempt to contact the server at about the same time.  (For example, Fermilab set the value to 4096 on each of two servers and tested with a continuous load from 5000 job slots).  At the same time, the Apache parameter &#39;ListenBacklog&#39; must be changed to the same value.  Also note that Fermilab determined that for best performance, the Apache parameter &#39;MaxClients&#39; on GUMS servers (at least on their dual-core Virtual Machines) should be set to a value of 32.  For details on these and other parameters on the GUMS server see GumsScalability.

---# Requirements

These are the requirements that must be met to install glexec.

*%RED%Please note:%ENDCOLOR%* Normally you will install the [[InstallWNClient][OSG worker node]] first. Technically, installing the =osg-wn-client-glexec= package will also install the worker node, but we do not duplicate instructions specific to the worker node here, so refer to the [[InstallWNClient][OSG worker node]] for details about the worker node installation.

---## Host and OS
   * OS is %SUPPORTED_OS%. 
   * Root access

---## Users
The glexec installation will create two users unless they are already created.

| *User* | *Comment* |
| =glexec= | Reduced privilege separate id used to improve security.  Set the default gid of the &quot;glexec&quot; user to be a group that is also called &quot;glexec&quot;. |
| =gratia= | Needed for the glexec gratia probe which is also automatically installed. |

In addition, OSG glexec requires a range of &lt;b&gt;group ids&lt;/b&gt; for tracking purposes.  You don&#39;t actually have to create the group entries but it is recommended to do so in order to reserve the gids and so they can be associated with names in the =/usr/bin/id= command.  The recommended names are &#39;glexecNN&#39; where NN is a number starting from 00.
   * Define at least 4 group ids per batch slot per worker node.   A conservative way to handle this is to multiply the number of batch slots on the largest worker node by 6 and then share the group ids between all the worker nodes.
   * They must be consecutive and in any range (default range is 65000-65049, configured in the [[#8_Configuring_glexec][Configuring glexec]] section below).   
   * The same group ids can be used on every worker node. 

---## Certificates
| *Certificate* | *User that owns certificate* | *Path to certificate* |
| Worker node host certificate | =root= | =/etc/grid-security/hostcert.pem= &lt;br&gt; =/etc/grid-security/hostkey.pem= |

%NOTE% GUMS versions 1.3.18 or later can work without a host cert or proxy.  To do this, [[GlexecPilotCert][follow these directions]].  The directions below only apply to older GUMS installs.

A host certificate on every worker node is required for glexec to use GUMS.  The host certificates do not need to be unique on every node; you can share the same one for every node in the cluster.  If you don&#39;t have any host certificate for the worker nodes, or you want to avoid the risk of a shared certificate getting stolen, you can use limited-duration proxies instead.  There is a host proxy distribution script package called [[https://twiki.grid.iu.edu/twiki/pub/Documentation/Release3/InstallGlexec/host_dist_latest.tgz][host_dist_latest.tgz]] which can be installed on your gatekeeper and which will automatically create a proxy from your gatekeeper&#39;s host certificate and push it out to =/etc/grid-security/hostproxy.pem= and =/etc/grid-security/hostproxykey.pem= on your worker nodes.  The script requires a means of passwordless ssh/scp access from the head node to the worker nodes.  The location of the certificate and key can be overridden by setting =-cert /etc/grid-security/hostproxy.pem= and =-key /etc/grid-security/hostproxykey.pem= parameters in the gumsclient section of =/etc/lcmaps.db=.

Finally, GUMS versions &gt;= 1.3.18 can be configured to not require a certificate or proxy from glexec at all, by changing the &quot;userGroups&quot; tag from access=&quot;read self&quot; to access=&quot;read all&quot;, and by setting the hostToGroup mapping to allow a DN that maps all worker nodes&#39; hostnames. 

&lt;!-- THIS DOESN&#39;T SEEM TO BE TRUE ANYMORE -- dwd 10/17/12
 ---## Condor Configuration

If you are using Condor on your worker nodes, you must disable Condor&#39;s GSI delegation or glexec won&#39;t work. Specifically, you need to set the following in your Condor configuration file. 

&lt;pre class=&quot;file&quot;&gt;
DELEGATE_JOB_GSI_CREDENTIALS = FALSE
&lt;/pre&gt;

If this is not done, it can result in glexec getting an error &quot;Verifying certificate chain: proxy path length constraint exceeded&quot; or &quot;lcmaps: Error: grid_verifyPathLenConstraints: Proxy Path Length Constraint exceeded&quot;.  This only happens on one type of X509 proxy, however, known variously as pre-RFC, GT3, or version 3.

[[http://research.cs.wisc.edu/condor/manual/v7.6/3_3Configuration.html#param:DelegateJobGSICredentials][Condor 7.6 documentation on DELEGATE_JOB_GSI_CREDENTIALS]].

--&gt;

---# Install Instructions
%INCLUDE{&quot;YumRepositories&quot; section=&quot;OSGRepoBrief&quot; TOC_SHIFT=&quot;+&quot;}%

Some of the worker node client software verifies proxies or certificates.  In order to do this, they will need the CA certificates used to sign the proxies.  
%INCLUDE{&quot;InstallCertAuth&quot; section=&quot;OSGBriefCaCerts&quot; TOC_SHIFT=&quot;+&quot;}%

---++ Install glexec

*%RED%Note:%ENDCOLOR%*  The glexec tracking function requires a part of HTCondor.  There are multiple ways to install HTCondor, for details see [[CondorInformation][these instructions]].   If you want a minimal install, you can run just this command to install the needed piece from the OSG distribution: &lt;pre class=&quot;rootscreen&quot;&gt;
%UCL_PROMPT_ROOT% yum install condor-procd &lt;/pre&gt;

After meeting all the requirements in the previous section, install glexec with this command: &lt;pre class=&quot;rootscreen&quot;&gt;
%UCL_PROMPT_ROOT% yum install osg-wn-client-glexec &lt;/pre&gt;

---# Configuring glexec

The following steps need to be done after the glexec installation is complete.

   1 First, review the contents of =/etc/glexec.conf=.  All of the defaults should be fine, but if you want to change the behavior, the parameters are described in =man glexec.conf=.
   1 Next, review all of the contents of =/etc/lcmaps.db= and in particular update the following pieces.
      * If you have GUMS, change the yourgums.yourdomain in the following line to the fully qualified domain name of your GUMS server:&lt;pre class=&quot;file&quot;&gt;
    &quot;--endpoint https://yourgums.yourdomain:8443/gums/services/GUMSXACMLAuthorizationServicePort&quot;
&lt;/pre&gt;
      * If you want to use a range of tracking group ids other than the default as described in the [[#6_Requirements][Requirements]] section above, uncomment and change the -min-gid and -max-gid lines to your chosen values: &lt;pre class=&quot;file&quot;&gt;
    &quot;-min-gid 65000&quot;
    &quot;-max-gid 65049&quot;
&lt;/pre&gt;
      * Uncomment the following two lines: &lt;pre class=&quot;file&quot;&gt;
    glexectracking = &quot;lcmaps_glexec_tracking.mod&quot;
               &quot;-exec /usr/sbin/glexec_monitor&quot;
&lt;/pre&gt;
      * If you have GUMS, uncomment the following policy toward the end of the file: &lt;pre class=&quot;file&quot;&gt;
verifyproxy -&gt; gumsclient
gumsclient -&gt; glexectracking
&lt;/pre&gt;
        or if you have do not have GUMS and want to use a gridmapfile, uncomment the following policy: &lt;pre class=&quot;file&quot;?&gt;
verifyproxy -&gt; gridmapfile
gridmapfile -&gt; glexectracking
&lt;/pre&gt;

---# Testing the Installation of glexec

Now, __as a non-privileged user (not root)__ , do the following (where %RED%yourvo%ENDCOLOR% is your VO,  and %RED%NNN%ENDCOLOR% is your uid as reported by =/usr/bin/id=):
&lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT% voms-proxy-init -voms %RED%yourvo%ENDCOLOR%:/%RED%yourvo%ENDCOLOR%
%UCL_PROMPT% export GLEXEC_CLIENT_CERT=/tmp/x509up_u%RED%NNN%ENDCOLOR%
%UCL_PROMPT% /usr/sbin/glexec /usr/bin/id
uid=13160(fnalgrid) gid=9767(fnalgrid) groups=65000(glexec00)
&lt;/pre&gt;
If your lcmaps.db is set up to not use a host certificate as described in GlexecPilotCert, you should also set
&lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT% export X509_USER_PROXY=/tmp/x509up_u%RED%NNN%ENDCOLOR%
&lt;/pre&gt;
before running glexec.

If =glexec= is successful, it will print out the uid and gid that your proxy would normally be mapped to by your GUMS server, plus a supplementary tracking group. (The actual names and numbers will be different from what you see above.)

If you have problems, please read about [[TroubleshootingGlexecLcmaps][troubleshooting glexec]].

---# Glexec log files

=Glexec= sends all its log information by default to syslog.  Where it goes from there depends on your syslog configuration, but by default they go to =/var/log/messages=.  Here are some sample messages:  &lt;pre class=&quot;file&quot;&gt;
Apr 25 16:36:16 fermicloud053 glexec[2867]: lcmaps: lcmaps.mod-PluginInit(): plugin glexectracking not found (arguments: ) 
Apr 25 16:36:16 fermicloud053 glexec[2867]: lcmaps: lcmaps.mod-lcmaps_startPluginManager(): error initializing plugin: glexectracking 
Apr 25 16:36:16 fermicloud053 glexec[2867]: lcmaps: lcmaps_init() error: could not start plugin manager 
Apr 25 16:36:16 fermicloud053 glexec[2867]:   Initialisation of LCMAPS failed. 
&lt;/pre&gt;
These particular messages are pretty common, caused by forgetting to uncomment the beginning of the glexectracking rule in =/etc/lcmaps.db=.

It is possible to redirect glexec log messages to a different file with standard syslog.  To do that, choose one of the LOG_LOCAL[0-7] log facilities that are unused, for example LOG_LOCAL1.  Then set the following in =/etc/glexec.conf=: &lt;pre class=&quot;file&quot;&gt;
syslog_facility = LOG_LOCAL1
&lt;/pre&gt;
and add a corresponding parameter to the lcmaps_glexec_tracking.mod entry in =/etc/lcmaps.db=: &lt;pre class=&quot;file&quot;&gt;
          &quot;-log-facility LOG_LOCAL1&quot;
&lt;/pre&gt;
Then in /etc/syslog.conf on el5 or /etc/rsyslog.conf on el6 add a line like this: &lt;pre class=&quot;file&quot;&gt;
local1.*    /var/log/glexec.log
&lt;/pre&gt;
and also exclude those messages from =/var/log/messages= by adding =local1.none= after other wildcards on the existing =/var/log/messages= line, for example: &lt;pre class=&quot;file&quot;&gt;
*.info;local1.none;mail.none;authpriv.none;cron.none	/var/log/messages
&lt;/pre&gt;
Be sure to notify the system logger to re-read the configuration file with =service syslog reload= on el5, or with =service rsyslog restart= on el6.  

rsyslog by default limits the rate at which messages may be logged, and if maximum debugging is enabled in glexec this limit is reached.  To avoid that, you can add the following to =/etc/rsyslog.conf= after the line &quot;$ModLoad imuxsock.so&quot;:&lt;pre class=&quot;file&quot;&gt;
$SystemLogRateLimitInterval 0
$SystemLogRateLimitBurst 0
&lt;/pre&gt;
and of course do =service rsyslog restart=.

Alternatively, syslog-ng (available in the epel repository) can do the same job by matching all the messages that have the string &quot;glexec&quot; in the name.   These rules in =/etc/syslog-ng/syslog-ng.conf= will separate the glexec messages into =/var/log/glexec.log=: &lt;pre class=&quot;file&quot;&gt;
destination d_glexec { file(&quot;/var/log/glexec.log&quot;); };
filter f_glexec { program(&quot;^glexec&quot;); };
filter f_notglexec { not program(&quot;^glexec&quot;); };
log { source(s_sys); filter(f_glexec); destination(d_glexec); };
&lt;/pre&gt;
Then later, in the log rule writing sending to &quot;d_mesg,&quot; add a &quot;filter(f_notglexec);&quot; before the destination rule to keep glexec messages out of =/var/log/messages=: &lt;pre class=&quot;file&quot;&gt;
log { source(s_sys); filter(f_filter1); filter(f_notglexec); destination(d_mesg); };
&lt;/pre&gt;

%BR%

---# *Comments*
%COMMENT{type=&quot;tableappend&quot;}%


&lt;!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
   DEAR DOCUMENT OWNER
   ===================

   Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER          = DaveDykstra

   Please define the document area, choose one of the defined areas from the next line
   DOC_AREA = (ComputeElement|General|Trash/Trash/Integration|Monitoring|Operations|Security|Storage|Trash/Tier3|User|VO)
   * Local DOC_AREA       = ComputeElement

   define the primary role the document serves, choose one of the defined roles from the next line
   DOC_ROLE = (Developer|Documenter|Scientist|Student|SysAdmin|VOManager)
   * Local DOC_ROLE       = SysAdmin

   Please define the document type, choose one of the defined types from the next line
   DOC_TYPE = (HowTo|Installation|Knowledge|Navigation|Planning|Training|Troubleshooting)
   * Local DOC_TYPE       = Installation
   
   Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

   Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %YES%

   change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

   change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %YES%

   change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %YES%


   DEAR DOCUMENT REVIEWER
   ======================

   Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = AlainRoy
  
   Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %YES%


   DEAR DOCUMENT TESTER
   ====================

   Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = AlainRoy
  
   Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %YES%
############################################################################################################
--&gt;



-- Main.DaveDykstra - 22 Sep 2011

