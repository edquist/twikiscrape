---+!! Glossary A
%DOC_STATUS_TABLE%
This topic holds the terms beginning with &quot;A&quot; and is included in the GlossaryOfTerms topic.

%STARTINCLUDE%
%INCLUDE{ &quot;GlossaryJumpIndex&quot; }%

%EDITTHIS%

#DefsAccessAnticipationMethod
   $ Access Anticipation Method:  Tries to foresee the I/O access characteristics of the application based on programmer&amp;#8217;s hints, anticipated knowledge or reaction to identified behavior. 

   $ Accounting (grid accounting): 	The OSG accounting system, called Gratia, tracks VO members&amp;#39; resource usage and presents that information in a consistent Grid-wide view, focusing in particular on CPU and Disk Storage utilization.

   $ Administrative Domain:  One or more [[GlossaryOfTerms#DefsResourceGroup][Resource Groups]] run under a single set of [[GlossaryOfTerms#DefsPolicy][Policies]]; and, typically, run by a single team.

#DefsAgent
   $ Agent: A software component in OSG that operates on behalf of a [[GlossaryOfTerms#DefsUser][User]] or [[GlossaryOfTerms#DefsResourceOwner][Resource Owner]] or another Agent.

   $ Alliance: A collaboration of small application communities that develops systems and runs on the persistent grid infrastructure. 

   $ Application:  With respect to grid computing in general, &amp;quot;application&amp;quot; refers to a &amp;quot;layer&amp;quot; of grid components (above infrastructure and resources).  An application is a name used to identify  a set of software that will execute computational jobs, manage data (access, store, read...) and has many attributes.  Any application when invoked (executed) includes information that allows tracing back to the individual who is responsible for the execution. 

   $ Application administrator:  A person designated by a VO who is charged with making sure that a particular application works on the participating grid resources. 				

   $ Application community:  Providers of a particular end-to-end application and/or system that runs on the persistent grid infrastructure.  Smaller application communities may collaborate as Alliances in developing systems and running them on the grid.  These organizations will contribute by providing application requirements and interfaces to the grid services.  An application community may consist of or span multiple VOs or VO groups.				

#DefsApplicationLayer
   $ Application layer:  Final of five layers to support grid applications.  It includes all application-specific services, including Request Interpretation and part of Request Management.

#DefsApplicationLevelMethod
   $ Application Level Method:  Organizes the mappings of the application&amp;#8217;s main memory objects to respective disk objects to make disk accesses more efficient by exploiting data locality. 

   $ Application middleware:  Application Middleware is application-specific middleware which has some embedded capabilities and interfaces that are not general, e.g., information providers.  This middleware depends on grid-wide middleware. 	

   $ Application Programming Interface:  An Application Programming Interface (API) is a particular set of rules and specifications that a software program can follow to access and make use of the services and resources provided by another particular software program that implements that API.  It serves as an interface between different software programs and facilitates their interaction, similar to the way the user interface facilitates interaction between humans and computers.		

   $ ARDA:  Architectural Roadmap towards Distributed Analysis (ARDA) is a project within [[GlossaryOfTerms#DefsLcg][LCG]] that seeks to coordinate the prototyping of distributed analysis systems for the LHC experiments.  _See_ [[http://lcg.web.cern.ch/LCG/activities/arda/arda.html][http://lcg.web.cern.ch/LCG/activities/arda/arda.html]].
         					
   $ Auditing (grid auditing):  Grid auditing in OSG relates to resolving claims of challenged authentication and exposed risk on grid services which accept delegated credentials. The auditing system will use information from the accounting system and link it to information from other sources to allow full tracking and analysis of the actions and events related to a user&amp;#39;s resource usage.			

   $ AUP: 	Acceptable Use Policy.  For example, _see_ [[http://osg-docdb.opensciencegrid.org/cgi-bin/ShowDocument?docid=86][OSG User Acceptable Use Policy]].

&lt;!-- from Forrest and enstore manual
   $ Atlas: 					A Toroidal LHC !ApparatuS experiment at the LHC at CERN (&lt;a href=&quot;http://atlas.web.cern.ch/Atlas/Welcome.html&quot;&gt;http://atlas.web.cern.ch/Atlas/Welcome.html&lt;/a&gt;) &lt;br /&gt; 					

   $ active file&lt;a name=&quot;DefsActiveFile&quot;&gt;&lt;/a&gt;: Any file currently in Enstore. 
   $ accounting server&lt;a name=&quot;DefsAccountingServer&quot;&gt;&lt;/a&gt;: Enstore&amp;#8217;s interface to a database of transfer-related data that maintains statistical information on a running system.

   $ alarm server (AS)&lt;a name=&quot;DefsAlarmServer&quot;&gt;&lt;/a&gt;: Maintains a record of alarms raised by other servers, and creates reports available online. 
   $ AS: _See_ [[GlossaryOfTerms#DefsAlarmServer][alarm server]].
   $ authZ: Short for Authorization.
   $ authN: Short for Authentication.
--&gt;
%COMMENT{type=&quot;tableappend&quot;}%
%STOPINCLUDE%

&lt;!-- CONTENT MANAGEMENT PROJECT
############################################################################################################
   DEAR DOCUMENT OWNER
   ===================

   Thank you for claiming ownership for this document! Please fill in your FirstLast name here:
   * Local OWNER          = JamesWeichel

   Please define the document area, choose one of the defined areas from the next line
   DOC_AREA = (ComputeElement|Storage|VO|Security|User|Monitoring|General|Trash/Trash/Integration|Operations|Tier3)
   * Local DOC_AREA       = General

   define the primary role the document serves, choose one of the defined roles from the next line
   DOC_ROLE = (EndUser|Student|Developer|SysAdmin|VOManager|Documenter)
   * Local DOC_ROLE       = Student

   Please define the document type, choose one of the defined types from the next line
   DOC_TYPE = (Troubleshooting|Training|Installation|HowTo|Planning|Navigation|Knowledge)
   * Local DOC_TYPE       = Knowledge
   
   Please define if this document in general needs to be reviewed before release ( %YES% | %NO% )
   * Local INCLUDE_REVIEW = %YES%

   Please define if this document in general needs to be tested before release ( %YES% | %NO% )
   * Local INCLUDE_TEST   = %NO%

   change to %YES% once the document is ready to be reviewed and back to %NO% if that is not the case
   * Local REVIEW_READY   = %YES%

   change to %YES% once the document is ready to be tested and back to %NO% if that is not the case
   * Local TEST_READY     = %NO%

   change to %YES% only if the document has passed the review and the test (if applicable) and is ready for release
   * Local RELEASE_READY  = %YES%


   DEAR DOCUMENT REVIEWER
   ======================

   Thank for reviewing this document! Please fill in your FirstLast name here:
   * Local REVIEWER       = IgorSfiligoi
  
   Please define the review status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local REVIEW_PASSED  = %YES%


   DEAR DOCUMENT TESTER
   ====================

   Thank for testing this document! Please fill in your FirstLast name here:
   * Local TESTER         = 
  
   Please define the test status for this document to be in progress ( %IN_PROGRESS% ), failed ( %NO% ) or passed ( %YES% )
   * Local TEST_PASSED    = %IN_PROGRESS%
############################################################################################################
--&gt;

Main.JamesWeichel - 11 Feb 2011

