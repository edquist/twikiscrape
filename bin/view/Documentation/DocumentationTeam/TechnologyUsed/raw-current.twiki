---+!! *&lt;nop&gt;%SPACEOUT{%TOPIC%}%*
---++ Features Required
The [[http://osg-docdb.opensciencegrid.org/cgi-bin/ShowDocument?docid=861][Documentation Alignment Initiative]] recommended a set of new capabilities and improvements to the organization and formatting of the OSG TWiki.
The following list has resulted from those recommendations and subsequent development of documentation roles and processes to support those roles:
   1. A consistent and easy way for user to make comments on a page
   1. A way for the user to rate the quality of a page and to be able to collect/analyze those ratings to identify particularly good and poor documents.
   1. Formatting that helps the user to understand the structure of the information.
   1. Improve the search so that the context was clear and the search be able to be limited to official documents.
   1. Structure the documentation pages for easier navigation, better user understanding of their current location, and easier maintenance.
   1. Providing simple ways for people updating, reviewing, and testing documentation to indicate the document status in the overall process.
   1. Providing a way for people to easily determine what they are responsible for; and within that group of documents, what needs attention.
   1. Providing various status views for the Documentation Architect, Area Coordinator, and Sites and Trash/Trash/Integration Coordinator to manage projects to improve individual or groups of documents and to deliver updated documentation for new OSG releases.

---++ Technologies to Provide these Features
| *Feature* | *Solution* | *Notes* |
| 1. Commenting | Provide comment box at end of page using !%COMMENT% TWiki construct | Need to see if one could comment anywhere |
| 2. Rating | Use peer plugin or voting plugin | Would have to use search to collect results for voting plugin.  Peer plugin puts results in !MySQL |
| 3. Formatting | Make each subsequent section level look like it is a subsection using css for TWiki section definitions | Changed to Standard skin and now need to work on fonts, background, and maybe line around sections. |
| 4. Search | To make the search work correctly, the TWiki must be restructured to move pages from the top level to lower levels and to allow context search of part of the TWiki. | Existing searches capability of the TWiki should work after restructuring.  This will have to be tested. |
| 5. Structure | Restructure pages in TWiki.  Top level webs of Team (with all current Team webs) Documentation (with directories for VO, Storage, Compute, Security, etc).  We are also thinking we could use color to indicate the primary role the page is designed to serve.  (E.g. User: Blue, VO manager: Orange, Sys Admin: Red, Student: Green) The color could be in the leftbar.  For the few pages that serve multiple roles, the bar could be gray. | Will have to test effects of structuring on page creation and verify the method we use keeps links up to date.  This will break some links from VO pages that point into TWiki.  Plan is to give them a script to run to identify the broken links. |
| 6. Page States | Provide a set of page states that are specified by a TWiki variable and updated by the people who own, review and test a page.  The states are: 1.	STARTED   2.	HALFWRITTEN  3.	READYFORREVIEW 4.	REVIEWED 5.	REVIEWOK 6.	READYFORTEST  7.	TESTED  8.	TESTOK 9.	PUBLISH	 | The document is done when set to PUBLISH.  A document that is not tested (not an install or procedure document) is moved to the PUBLISH state from REVIEWOK.  Note that we will have to have a script to change the state of all pages that are reviewed for a new release so the don&#39;t show up as PUBLISH |
| 7. Page Owner | Use a status table based on the technique used by the integration team Trash.ReleaseDocumentationReviewStatus page that collects a all pages that a particular person has owner, reviewer, or tester responsibility onto that persons TWiki page. | People seldom use their TWiki pages now, so this would require them to use it to monitor workflow of their pages in the TWiki. |
| 8. Status Views | Similar to item 7.   We can provide custom tables by architecture element, what is now release documentation (using a RELEASEDEPENDENT flag in the documents now in the !ReleaseDocumentation web), or a random set of pages that we may have targeted for improvement (using an IMPROVE flag). | We have to keep as simple as possible |


---++ *Comments*
%COMMENT{type=&quot;tableappend&quot;}%

%RESPONSIBLE% Main.JamesWeichel %BR%
%REVIEW% Main.RobertEngel %BR%
%REVFLAG% %N%



-- Main.JamesWeichel - 15 Oct 2009
