Java 8 Update Investigation


---+ Summary
We are considering switching our software to Java 8, since Java 8 contains improvements over Java 7, and is still in active development. Our switch to Java 7 was hurried and painful, and we should investigate how to make the process easier this time.

There is no urgent need to switch as quickly as we did the last time. While Oracle has end-of-lifed Java 7, we are now using !OpenJDK, obtained from the OS, and it&#39;s reasonable to expect Red Hat to support it for a long time. !OpenJDK 7 is still the environment that any EL 5/6/7 machine will prefer, if multiple environments are installed.

Furthermore, we must distinguish between switching the runtime environment (JRE) only, or also switching the development environment (JDK) for our package builds. At the moment, we can only partially switch the JDK, because:

   * EL 5 does not have and will never have Java 8.
   * HDFS is known not to build with JDK 8.

Fortunately, the improvements we care about -- better security settings -- are in the runtime.

The drawbacks to only switching the JRE:

   * We would have to test software on both JRE 7 and JRE 8 because we cannot force admins to pick one over the other.
   * We may eventually be forced to switch, if our upstreams start using features only in Java 8.


Testing the JRE switch should be fairly simple and does not require rebuilding the packages, because multiple JRE versions can live side-by-side and we can configure our software to use a particular JRE.


We can switch which JDK to build with on a per-package basis. However, the JRE switch _must_ be tested before we switch JDKs for any package.

We have two hacks for Java: missing-java-1.7.0-dirs, and osg-java7-compat. The former was for EL 5 only, so we do not have to create a Java 8 analogue. The latter can go away if and only if we change our policy to say that we will only support !OpenJDK, and not the Oracle JDK.


---+ Details
---++ What is the status of Java 7?
End of lifed by Oracle in spring 2015; !OpenJDK development hasn&#39;t stopped, however, and I expect Red Hat to keep patching big security issues at least until RHEL 6 is end of lifed as well.


---++ What are the benefits of switching?
Primarily, better security algorithms and TLS settings. These are benefits of switching runtime environment, not compilation environment. In fact, BB recommends running with Java 8, but building with Java 7, or at least telling javac to produce Java 7-compatible bytecode. That will be especially useful for our more difficult builds, like HDFS.


---++ How hard is switching?
---+++ Switching JREs
   * Our RPMs explicitly require JRE 7; we will have to change this dependency to either JRE 8, or JRE &gt;= 7, or 7 &lt;= JRE &lt;= 8.
   * JRE 7 is still the &#39;preferred&#39; version in RHEL-based distributions; we would have to provide instructions for admins to force use of JRE 8.


---+++ Switching JDKs
   * [[http://www.oracle.com/technetwork/java/javase/8-compatibility-guide-2156366.html][Oracle&#39;s incompatibilities guide for Java 7 to 8]] will let us verify by looking at the source code whether _our_ software is directly affected. However, we will not be able to do that for the many dependencies brought in by our software.
   * HDFS does not build with JDK 8. This is a known issue upstream; we&#39;d have to wait for them.
   * EL 5 does not have Java 8.


---++ When will our packages bring in and use Java 8 by default?
Bring in: never. Our packages will continue to bring in Java 7 because they explicitly require it (via the dependencies &#39;java7&#39; and &#39;java7-devel&#39;).

Use: unknown. For some of our packages, we can explicitly specify the runtime; others will use the system runtime, which is determined by the &#39;alternatives&#39; system. In that case, the admin can choose which of the installed JREs to use, or can go with the default. The current default is Java 7, but Red Hat can change the default at any time -- which will affect upgrades as well as fresh installations.


---++ What hacks can we drop?
   * missing-java-1.7.0-dirs (EL 5 only) -- we do not need an equivalent for Java 8, since the dirs are already provided by the OS packages
   * NOT osg-java7-compat:
      * we will continue to need this as long as:
         1. we support Oracle JDK as an alternative to !OpenJDK
         1. we have packages that require a full JDK instead of just a JRE
            Here&#39;s what java-1.8.0-openjdk-devel provides on SLF 6 (queried with `repoquery --plugins --provides java-1.8.0-openjdk-devel`:
            %BR%\
            &lt;verbatim&gt;
            java-1.8.0-openjdk-devel = 1:1.8.0.51-0.b16.el6_6
            java-1.8.0-openjdk-devel(x86-64) = 1:1.8.0.51-0.b16.el6_6
            lib.so()(64bit)
            lib.so(SUNWprivate_1.1)(64bit)
            libjawt.so()(64bit)
            libjawt.so(SUNWprivate_1.1)(64bit)
            libjli.so()(64bit)
            libjli.so(SUNWprivate_1.1)(64bit)
            libunpack.so()(64bit)
            libunpack.so(SUNWprivate_1.1)(64bit)
            &lt;/verbatim&gt;
            There does not seem to be anything _generic_ that we can use as bringing in _any_ JDK 8. (I checked the file list -- nothing there either). This is why we need the osg-java7-compat hack.
            %BR%\
            Current packages that require java7-devel at runtime:
            * hadoop
            * voms-admin-server
            * bestman2
            * osg-wn-client
            * emi-trustmanager-tomcat


---++ Open questions
   * What are the effects of using Oracle for the JRE but !OpenJDK for the JDK?
   * What do the packages that require java7-devel at runtime need it for? How would they be affected if they had separate JRE vs JDK versions?
      * For the second question, from BB: &quot;from the traffic I&#39;ve seen on the HDFS list, it should be fine.  It&#39;s just building on Java 8 that&#39;s busted right now.&quot;


---++ Other notes
---+++ How to determine the JRE version you need for a class
[[https://stackoverflow.com/a/1096159][As described in an answer from stackoverflow]], run:


&lt;verbatim&gt;
javap -verbose ClassName | grep major
&lt;/verbatim&gt;

&#39;major&#39; is 52 for Java 8 and 51 for Java 7. (It&#39;s just the ASCII code of the version number).

(or you can look at byte 8 of the .class file, like: `od -j7 -N1 -c OIDTokenizer.class | awk &#39;{print $2}&#39;`)


---+++ If both Java 7 and Java 8 installed, alternatives will pick Java 7
I ran `alternatives --display java` and `alternatives --display javac` and found the following:

On SLF 6, Java 1.7.0.85 has priority 170085 in the alternatives system (see what they did there?), and Java 1.8.0.51 has priority 41 (no, I don&#39;t know where that one came from).

On !CentOS 7, Java 1.7.0.91 has priority 170091 and Java 1.8.0.65 has priority 53.

So for now, Java 7 always gets picked over Java 8.

By default, alternatives are on &#39;auto&#39;, meaning that if a new package is installed with a higher priority than what is currently installed, then the system will switch to using the new package. The admin can override that explicitly.


---+++ Some installs on EL 7 already bring in Java 8
Most OSG packages bring in Java 7 via the &#39;java7&#39; dependency. emi-trustmanager brings in Java 8 instead. Right now, I&#39;m considering that a bug, and made [[https://jira.opensciencegrid.org/browse/SOFTWARE-2095][SOFTWARE-2095]] to take care of it. However, recommended practice is to require &#39;java &gt;= 1:1.7.0&#39; or similar, instead of a specific JRE. (See the [[https://fedoraproject.org/wiki/Packaging:Java][Fedora Java packaging guidelines]])
