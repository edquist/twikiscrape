The preferred way to install the GIP is through the VDT; this page is meant for those who want to install it from the SVN repository.

Again, *this is not a page for normal site admins*. A site admin would only want to use this in the case that there is a direly-needed unreleased bug fix.

---+++ Trunk (targeted for the OSG 1.2.0 release)

   1 =cd $VDT_LOCATION=. Move $VDT_LOCATION/gip away to a safe backup location. 
   1 Download the GIP source code: =svn co svn://t2.unl.edu/brian/gip/trunk/gip gip=. This will be your new $VDT_LOCATION/gip directory. 
   1 Make sure that $VDT_LOCATION/gip/logs is owned by daemon:daemon. 
   1 Source $VDT_LOCATION/setup.sh or manually set $VDT_LOCATION and $GIP_LOCATION=$VDT_LOCATION/gip 

---+++++ Configuration and Test

The GIP 1.2 now reads the config.ini file directly. You do not need to run configure-osg.py between editing configurations.

To see what data would be sent to the GOC, source the OSG environment ( =source $VDT_LOCATION/setup.sh=), then run this script:
&lt;verbatim&gt;
gip_info
&lt;/verbatim&gt;

Remember, this script will be run as daemon! It is sometimes more useful to run it as daemon just to make sure nothing is broken (sudo =-u daemon gip_info=).

Any failures will be written to stderr, and the raw LDIF will be written to stdout; if some component is misbehaving, redirect stdout to just view the stderr:
&lt;verbatim&gt;
gip_info 1&gt; /dev/null
&lt;/verbatim&gt;

The GIP keeps a log file in $GIP_LOCATION/var/logs/gip.log and module.log.

---+++++ Running only the batch system provider
 The batch system providers for Condor, SGE, and LSF were changed significantly in OSG 1.0.0. It&#39;s sometimes useful to run just those by hand and closely examine the output:

&lt;verbatim&gt;
$GIP_LOCATION/providers/batch_system.py
&lt;/verbatim&gt;

Please carefully comb through the output and report and problems.

---+++ 1_0_0 Branch (deployed in OSG-ITB 0.9.0 and OSG 1.0.0)

   1 Download the GIP source code: =svn co svn://t2.unl.edu/brian/gip/trunk/gip gip= 
   1 Set the $VDT_LOCATION variable and the $GIP_LOCATION to =$PWD/gip/=. 
   1 That&#39;s all! The only runtime requirement for the GIP is those two environmental variables. 

---+++++ Configuration and Test

Configuration is done by providing sane values to the =configure-osg.py= script; if you would like to test out the dcache provider, make sure you set dynamic_dcache=True in the GIP section.

To see what data would be sent to the GOC, source the OSG environment ( =source $VDT_LOCATION/setup.sh=), then run this script:
&lt;verbatim&gt;
gip_info
&lt;/verbatim&gt;

Any failures will be written to stderr, and the raw LDIF will be written to stdout; if some component is misbehaving, redirect stdout to just view the stderr:
&lt;verbatim&gt;
gip_info 1&gt; /dev/null
&lt;/verbatim&gt;

---+++ Original Branch (deployed in OSG 0.8.0)

   1 Download the GIP source code: =svn co svn://t2.unl.edu/brian/gip/branches/original/ gip= 
   1 Copy the GIP source code into your VDT install: =cp -r gip/* $VDT_LOCATION= 
   1 Source the VDT install: =source $VDT_LOCATION/setup.sh= 
   1 Run the configure-osg.sh script: =$VDT_LOCATION/configure-osg.sh= 

---+++++ Configuration and Test

Configuration is done by providing sane values to the =configure-osg.sh= script; if you would like to test out the dcache provider, make sure you name your implementation as =dcache= and follow the on-screen instructions.

To see what data would be sent to the GOC, run:
&lt;verbatim&gt;
$VDT_LOCATION/glite/etc/glite-ce-ce-plugin/glite-ce-info $VDT_LOCATION/lcg/etc/osg-info-generic.conf
&lt;/verbatim&gt;

-- Main.BrianBockelman - 21 Feb 2008
