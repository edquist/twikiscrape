---+!! TWiki Spreadsheet Plugin

This Plugin adds spreadsheet capabilities to %WIKITOOLNAME% topics. Formulae like ==%&lt;nop&gt;CALC{&quot;$INT(7/3)&quot;}%== are evaluated at page view time. They can be placed in table cells and outside of tables. In other words, this Plugin provides general formula evaluation capability, not just classic spreadsheet functions.

&lt;table&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
__Example:__

| *Region:* | *Sales:* |
| Northeast |  320 |
| Northwest |  580 |
| South     |  240 |
| Europe    |  610 |
| Asia      |  220 |
| Total:    |  %CALC{&quot;$SUM( $ABOVE() )&quot;}% |

&lt;/td&gt;&lt;td&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;
__Interactive example:__

&lt;form name=&quot;interactive&quot; action=&quot;%SCRIPTURL%/view%SCRIPTSUFFIX%/%WEB%/%TOPIC%&quot; method=&quot;get&quot;&gt;
&lt;noautolink&gt;
Formula: &lt;code&gt;%&lt;nop&gt;CALC{&quot;&lt;/code&gt;&lt;input type=&quot;text&quot; name=&quot;formula&quot; size=&quot;40&quot; value=&quot;%URLPARAM{ &quot;formula&quot; default=&quot;$PROPERSPACE(%WIKINAME%)&quot; encode=&quot;entity&quot; }%&quot; /&gt;&lt;code&gt;&quot;}%&lt;/code&gt; &amp;nbsp; &lt;input type=&quot;submit&quot; value=&quot;Go&quot; /&gt;&lt;br /&gt;
Result: &amp;nbsp; &amp;nbsp; %CALC{%URLPARAM{ &quot;formula&quot; default=&quot;$PROPERSPACE(%WIKINAME%)&quot; }%}%

&lt;/noautolink&gt;
&lt;/form&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;
The formula next to &quot;Total&quot; is ==%&lt;nop&gt;CALC{&quot;$SUM( $ABOVE() )&quot;}%==. &lt;br /&gt; (you see the formula instead of the sum in case the Plugin is not installed or not enabled.)
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

%TOC%

---++ Syntax Rules

The action of this Plugin is triggered by the ==%&lt;nop&gt;CALC{&quot;...&quot;}%== variable, which gets rendered according to the built-in function(s) found between the quotes.

   * Built-in function are of format ==$FUNCNAME(parameter)==
   * Functions may be nested, e.g. ==%&lt;nop&gt;CALC{&quot;$SUM( R2:C$COLUMN(0)..R$ROW(-1):C$COLUMN(0) )&quot;}%==
   * Functions are evaluated from left to right, and from inside to outside if nested
   * The function parameter can be text; a mathematical formula; a cell address; or a range of cell addresses
   * Multiple parameters form a list; they are separated by a comma, followed by optional space, e.g. ==%&lt;nop&gt;CALC{&quot;$SUM( 3, 5, 7 )&quot;}%==
   * A table cell can be addressed as ==R1:C1==. Table address matrix:
     | ==R1:C1== | ==R1:C2== | ==R1:C3== | ==R1:C4== |
     | ==R2:C1== | ==R2:C2== | ==R2:C3== | ==R2:C4== |
   * A table cell range is defined by two cell addresses separated by ==&quot;..&quot;==, e.g. &quot;row 1 through 20, column 3&quot; is: ==R1:C3..R20:C3==
   * Lists can refer to values and/or table cell ranges, e.g. ==%&lt;nop&gt;CALC{&quot;$SUM( 3, 5, $T(R1:C7), R1:C11..R1:C15 )&quot;}%==
   * Formulae can only reference cells in the current or preceeding row of the current table; they may not reference cells below the current table row 
   * Formulae can also be placed outside of tables; they can reference cells in the preceeding table

---++ Built-in Functions

Conventions for Syntax:
   * Required parameters are indicated in ==( bold )==
   * Optional parameters are indicated in ==( _bold italic_ )==

#FuncABOVE
---+++ ABOVE( ) -- address range of cells above the current cell
   * Syntax: ==$ABOVE( )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SUM($ABOVE())&quot;}%== returns the sum of cells above the current cell
   * Related: =[[#FuncLEFT][$LEFT()]]=, =[[#FuncRIGHT][$RIGHT()]]=

#FuncABS
---+++ ABS( num ) -- absolute value of a number
   * Syntax: ==$ABS( num )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$ABS(-12.5)&quot;}%== returns ==12.5==
   * Related: =[[#FuncSIGN][$SIGN()]]=, =[[#FuncEVEN][$EVEN()]]=, =[[#FuncODD][$ODD()]]=

#FuncAND
---+++ AND( list ) -- logical AND of a list
   * Syntax: ==$AND( list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$AND(1, 0, 1)&quot;}%== returns ==0==
   * Related: =[[#FuncNOT][$NOT()]]=, =[[#FuncIF][$IF()]]=, =[[#FuncOR][$OR()]]=

#FuncAVERAGE
---+++ AVERAGE( list ) -- average of a list or a range of cells
   * Syntax: ==$AVERAGE( list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$AVERAGE(R2:C5..R$ROW(-1):C5)&quot;}%== returns the average of column 5, excluding the title row
   * Related: =[[#FuncLIST][$LIST()]]=, =[[#FuncMAX][$MAX()]]=, =[[#FuncMEDIAN][$MEDIAN()]]=, =[[#FuncMIN][$MIN()]]=

#FuncCHAR
---+++ CHAR( number ) -- ASCII character represented by number
   * Syntax: ==$CHAR( number )==
   * Example: Example: ==%&lt;nop&gt;CALC{&quot;$CHAR(97)&quot;}%== returns ==a==
   * Related: =[[#FuncCODE][$CODE()]]=

#FuncCODE
---+++ CODE( text ) -- ASCII numeric value of character
   * The ASCII numeric value of the first character in text
   * Syntax: ==$CODE( text )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$CODE(abc)&quot;}%== returns ==97==
   * Related: =[[#FuncCHAR][$CHAR()]]=

#FuncCOLUMN
---+++ COLUMN( offset ) -- current column number
   * The current table column number with an optional offset
   * Syntax: ==$COLUMN( _offset_ )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$COLUMN()&quot;}%== returns ==2== for the second column
   * Related: =[[#FuncROW][$ROW()]]=, =[[#FuncT][$T()]]=

#FuncCOUNTITEMS
---+++ COUNTITEMS( list ) -- count individual items in a list
   * Syntax: ==$COUNTITEMS( list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$COUNTITEMS($ABOVE())&quot;}%== returns ==Closed: 1, Open: 2== assuming one cell above the current cell contains ==Closed== and two cells contain ==Open==
   * Related: =[[#FuncCOUNTSTR][$COUNTSTR()]]=, =[[#FuncLIST][$LIST()]]=

#FuncCOUNTSTR
---+++ COUNTSTR( list, str ) -- count the number of cells in a list equal to a given string
   * Count the number of cells in a list equal to a given string (if str is specified), or counts the number of non empty cells in a list
   * Syntax: ==$COUNTSTR( list, _str_ )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$COUNTSTR($ABOVE())&quot;}%== counts the number of non empty cells above the current cell
   * Example: ==%&lt;nop&gt;CALC{&quot;$COUNTSTR($ABOVE(), DONE)&quot;}%== counts the number of cells equal to ==DONE==
   * Related: =[[#FuncCOUNTITEMS][$COUNTITEMS()]]=, =[[#FuncLIST][$LIST()]]=

#FuncDEF
---+++ DEF( list ) -- find first non-empty list item or cell
   * Returns the first list item or cell reference that is not empty
   * Syntax: ==$DEF( list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$DEF(R1:C1..R1:C3)&quot;}%==
   * Related: =[[#FuncCOUNTSTR][$COUNTSTR()]]=, =[[#FuncLISTIF][$LISTIF()]]=, =[[#FuncLIST][$LIST()]]=

#FuncEVAL
---+++ EVAL( formula ) -- evaluate a simple mathematical formula
   * Addition, substraction, multiplication, division and modulus of numbers are supported. Any nesting is permitted
   * Syntax: ==$EVAL( formula )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$EVAL( (5 * 3) / 2 + 1.1 )&quot;}%== returns ==8.6==
   * Related: =[[#FuncEXEC][$EXEC()]]=, =[[#FuncINT][$INT()]]=, =[[#FuncMOD][$MOD()]]=, =[[#FuncROUND][$ROUND()]]=, =[[#FuncVALUE][$VALUE()]]=

#FuncEVEN
---+++ EVEN( num ) -- test for even number
   * Syntax: ==$EVEN( num )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$EVEN(2)&quot;}%== returns ==1==
   * Related: =[[#FuncABS][$ABS()]]=, =[[#FuncMOD][$MOD()]]=, =[[#FuncODD][$ODD()]]=, =[[#FuncSIGN][$SIGN()]]=

#FuncEXACT
---+++ EXACT( text1, text2 ) -- compare two text strings
   * Compares two text strings and returns ==1== if they are exactly the same, or ==0== if not
   * Syntax: ==$EXACT( text1, _text2_ )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$EXACT(foo, Foo)&quot;}%== returns ==0==
   * Example: ==%&lt;nop&gt;CALC{&quot;$EXACT(foo, $LOWER(Foo))&quot;}%== returns ==1==
   * Related: =[[#FuncIF][$IF()]]=, =[[#FuncTRIM][$TRIM()]]=

#FuncEXEC
---+++ EXEC( formula ) -- execute a spreadsheet formula
   * Execute a spreadsheet formula, typically retrieved from a variable. This can be used to store a formula in a variable once and execute it many times using different parameters.
   * Syntax: ==$EXEC( formula )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SET(msg, $NOEXEC(Hi $GET(name)))&quot;}%== sets the =msg= variable with raw formula =Hi $GET(name)=
   * Example: ==%&lt;nop&gt;CALC{&quot;$SET(name, Tom) $EXEC($GET(msg))&quot;}%== executes content of =msg= variable and returns =Hi Tom=
   * Example: ==%&lt;nop&gt;CALC{&quot;$SET(name, Jerry) $EXEC($GET(msg))&quot;}%== returns =Hi Jerry=
   * Related: =[[#FuncEVAL][$EVAL()]]=, =[[#FuncGET][$GET()]]=, =[[#FuncNOEXEC][$NOEXEC()]]=, =[[#FuncSET][$SET()]]=

#FuncEXISTS
---+++ EXISTS( topic ) -- check if topic exists
   * Topic can be =TopicName= or a =Web.TopicName=
   * Syntax: ==$EXISTS( topic )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$EXISTS(&lt;nop&gt;%HOMETOPIC%)&quot;}%== returns ==1==
   * Example: ==%&lt;nop&gt;CALC{&quot;$EXISTS(&lt;nop&gt;ThisDoesNotExist)&quot;}%== returns ==0==

#FuncFIND
---+++ FIND( string, text, start ) -- find one string within another string
   * Finds one text =string=, within another =text=, and returns the number of the starting position of =string=, from the first character of =text=. This search is case sensitive and is not a regular expression search; use =$SEARCH()= for regular expression searching. Starting position is 1; a 0 is returned if nothing is matched.
   * Syntax: ==$FIND( string, text, _start_ )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$FIND(f, fluffy)&quot;}%== returns ==1==
   * Example: ==%&lt;nop&gt;CALC{&quot;$FIND(f, fluffy, 2)&quot;}%== returns ==4==
   * Example: ==%&lt;nop&gt;CALC{&quot;$FIND(@, fluffy, 1)&quot;}%== returns ==0==
   * Related: =[[#FuncREPLACE][$REPLACE()]]=, =[[#FuncSEARCH][$SEARCH()]]=

#FuncFORMAT
---+++ FORMAT( type, prec, number ) -- format a number to a certain type and precision
   * Type can be COMMA for comma format, DOLLAR for Dollar format, KB for Kilo Byte format, MB for Mega Byte format, KBMB for Kilo/Mega/Giga/Tera Byte auto-adjust format, NUMBER for number, and PERCENT for percent format
   * Syntax: ==$FORMAT( type, prec, number )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$FORMAT(COMMA, 2, 12345.6789)&quot;}%== returns ==12,345.68==
   * Example: ==%&lt;nop&gt;CALC{&quot;$FORMAT(DOLLAR, 2, 12345.67)&quot;}%== returns ==$12,345.68==
   * Example: ==%&lt;nop&gt;CALC{&quot;$FORMAT(KB, 2, 1234567)&quot;}%== returns ==1205.63 KB==
   * Example: ==%&lt;nop&gt;CALC{&quot;$FORMAT(MB, 2, 1234567)&quot;}%== returns ==1.18 MB==
   * Example: ==%&lt;nop&gt;CALC{&quot;$FORMAT(KBMB, 2, 1234567)&quot;}%== returns ==1.18 MB==
   * Example: ==%&lt;nop&gt;CALC{&quot;$FORMAT(KBMB, 2, 1234567890)&quot;}%== returns ==1.15 GB==
   * Example: ==%&lt;nop&gt;CALC{&quot;$FORMAT(NUMBER, 1, 12345.67)&quot;}%== returns ==12345.7==
   * Example: ==%&lt;nop&gt;CALC{&quot;$FORMAT(PERCENT, 1, 0.1234567)&quot;}%== returns ==12.3%==
   * Related: =[[#FuncROUND][$ROUND()]]=

#FuncFORMATTIME
---+++ FORMATTIME( serial, text ) -- convert a serialized date into a date string
   * The following variables in =text= are expanded: =$second= (seconds, 00..59); =$minute= (minutes, 00..59); =$hour= (hours, 00..23); =$day= (day of month, 01..31); =$month= (month, 01..12); =$mon= (month in text format, Jan..Dec); =$year= (4 digit year, 1999); =$ye= (2 digit year, 99), =$wd= (day number of the week, 1 for Sunday, 2 for Monday, etc), =$wday= (day of the week, Sun..Sat), =$weekday= (day of the week, Sunday..Saturday), =$yearday= (day of the year, 1..365, or 1..366 in leap years). Date is assumed to be server time; add =GMT= to indicate Greenwich time zone.
   * Syntax: ==$FORMATTIME( serial, text )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$FORMATTIME(0, $year/$month/$day GMT)&quot;}%== returns ==1970/01/01 GMT==
   * Related: =[[#FuncFORMATGMTIME][$FORMATGMTIME()]]=, =[[#FuncTIME][$TIME()]]=, =[[#FuncTIMEADD][$TIMEADD()]]=, =[[#FuncTIMEDIFF][$TIMEDIFF()]]=, =[[#FuncTODAY][$TODAY()]]=

#FuncFORMATGMTIME
---+++ FORMATGMTIME( serial, text ) -- convert a serialized date into a GMT date string
   * The date string represents the time in Greenwich time zone. Same variable expansion as in =$FORMATTIME()=.
   * Syntax: ==$FORMATGMTIME( serial, text )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$FORMATGMTIME(1041379200, $day $mon $year)&quot;}%== returns ==01 Jan 2003==
   * Related: =[[#FuncFORMATTIME][$FORMATTIME()]]=, =[[#FuncTIME][$TIME()]]=, =[[#FuncTIMEADD][$TIMEADD()]]=, =[[#FuncTIMEDIFF][$TIMEDIFF()]]=, =[[#FuncTODAY][$TODAY()]]=

#FuncGET
---+++ GET( name ) -- get the value of a previously set variable
   * Specify the variable name (alphanumeric characters and underscores). An empty string is returned if the variable does not exist. Use =$SET()= to set a variable first. Unlike table ranges, variables live for the time of the page view and persist across tables, i.e. you can use it to summarize results across several tables.
   * Syntax: ==$GET( name )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$GET(my_total)&quot;}%== returns the value of the =my_total= variable
   * Related: =[[#FuncEXEC][$EXEC()]]=, =[[#FuncNOEXEC][$NOEXEC()]]=, =[[#FuncSET][$SET()]]=, =[[#FuncSETIFEMPTY][$SETIFEMPTY()]]=, =[[#FuncSETM][$SETM()]]=

#FuncIF
---+++ IF( condition, value if true, value if 0 ) -- return a value based on a condition
   * The condition can be a number (where ==0== means condition not met), or two numbers with a comparison operator ==&amp;lt;== (less than), ==&amp;lt;=&lt;nop&gt;== (less than or equal), ==&lt;nop&gt;==&lt;nop&gt;== (equal), ==&lt;nop&gt;!=&lt;nop&gt;== (not equal), ==&amp;gt;=&lt;nop&gt;== (greater than or equal), ==&amp;gt;== (greater than).
   * Syntax: ==$IF( condition, value if true, value if 0 )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$IF($T(R1:C5) &gt; 1000, Over Budget, OK)&quot;}%== returns ==Over Budget== if value in R1:C5 is over 1000, ==OK== if not
   * Example: ==%&lt;nop&gt;CALC{&quot;$IF($EXACT($T(R1:C2),), empty, $T(R1:C2))&quot;}%== returns the content of R1:C2 or ==empty== if empty
   * Example: ==%&lt;nop&gt;CALC{&quot;$SET(val, $IF($T(R1:C2) == 0, zero, $T(R1:C2)))&quot;}%== sets a variable conditionally
   * Related: =[[#FuncAND][$AND()]]=, =[[#FuncEXACT][$EXACT()]]=, =[[#FuncLISTIF][$LISTIF()]]=, =[[#FuncNOT][$NOT()]]=, =[[#FuncOR][$OR()]]=

#FuncINT
---+++ INT( formula ) -- evaluate formula and round down to nearest integer
   * Addition, substraction, multiplication, division and modulus of numbers are supported. Any nesting is permitted
   * Syntax: ==$INT( formula )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$INT(10 / 4)&quot;}%== returns ==2==
   * Related: =[[#FuncEVAL][$EVAL()]]=, =[[#FuncROUND][$ROUND()]]=, =[[#FuncVALUE][$VALUE()]]=

#FuncLEFT
---+++ LEFT( ) -- address range of cells to the left of the current cell
   * Syntax: ==$LEFT( )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SUM($LEFT())&quot;}%== returns the sum of cells to the left of the current cell
   * Related: =[[#FuncABOVE][$ABOVE()]]=, =[[#FuncRIGHT][$RIGHT()]]=

#FuncLENGTH
---+++ LENGTH( text ) -- length of text in bytes
   * Syntax: ==$LENGTH( text )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$LENGTH(abcd)&quot;}%== returns ==4==
   * Related: =[[#FuncLISTSIZE][$LISTSIZE()]]=

#FuncLIST
---+++ LIST( range ) -- convert content of a cell range into a list
   * Convert the content of a range of cells into a flat list, delimited by comma. Cells containing commas are merged into the list
   * Syntax: ==$LIST( range )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$LIST($LEFT())&quot;}%== returns ==Apples, Lemons, Oranges, Kiwis== assuming the cells to the left contain ==| Apples | Lemons, Oranges | Kiwis |==
   * Related: =[[#FuncAVERAGE][$AVERAGE()]]=, =[[#FuncCOUNTITEMS][$COUNTITEMS()]]=, =[[#FuncCOUNTSTR][$COUNTSTR()]]=, =[[#FuncDEF][$DEF()]]=, =[[#FuncLISTIF][$LISTIF()]]=, =[[#FuncLISTITEM][$LISTITEM()]]=, =[[#FuncLISTJOIN][$LISTJOIN()]]=, =[[#FuncLISTMAP][$LISTMAP()]]=, =[[#FuncLISTREVERSE][$LISTREVERSE()]]=, =[[#FuncLISTSIZE][$LISTSIZE()]]=, =[[#FuncLISTSORT][$LISTSORT()]]=, =[[#FuncLISTUNIQUE][$LISTUNIQUE()]]=, =[[#FuncMAX][$MAX()]]=, =[[#FuncMEDIAN][$MEDIAN()]]=, =[[#FuncMIN][$MIN()]]=, =[[#FuncPRODUCT][$PRODUCT()]]=, =[[#FuncSUM][$SUM()]]=, =[[#FuncSUMDAYS][$SUMDAYS()]]=, =[[#FuncSUMPRODUCT][$SUMPRODUCT()]]=

#FuncLISTIF
---+++ LISTIF( condition, list ) -- remove elements from a list that do not meet a condition
   * In addition to the condition described in =[[#FuncIF][$IF()]]=, you can use ==$item== to indicate the current element, and ==$index== for the list index, starting at 1
   * Syntax: ==$LISTIF( condition, list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$LISTIF($item &gt; 12, 14, 7, 25)&quot;}%== returns ==14, 25==
   * Example: ==%&lt;nop&gt;CALC{&quot;$LISTIF($NOT($EXACT($item,)), A, B, , E)&quot;}%== returns non-empty elements ==A, B, E==
   * Example: ==%&lt;nop&gt;CALC{&quot;$LISTIF($index &gt; 2, A, B, C, D)&quot;}%== returns ==C, D==
   * Related: =[[#FuncIF][$IF()]]=, =[[#FuncLIST][$LIST()]]=, =[[#FuncLISTITEM][$LISTITEM()]]=, =[[#FuncLISTMAP][$LISTMAP()]]=, =[[#FuncLISTREVERSE][$LISTREVERSE()]]=, =[[#FuncLISTSIZE][$LISTSIZE()]]=, =[[#FuncLISTSORT][$LISTSORT()]]=, =[[#FuncLISTUNIQUE][$LISTUNIQUE()]]=, =[[#FuncSUM][$SUM()]]=

#FuncLISTITEM
---+++ LISTITEM( index, list ) -- get one element of a list
   * Index is 1 to size of list; use a negative number to count from the end of the list
   * Syntax: ==$LISTITEM( index, list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$LISTITEM(2, Apple, Orange, Apple, Kiwi)&quot;}%== returns ==Orange==
   * Example: ==%&lt;nop&gt;CALC{&quot;$LISTITEM(-1, Apple, Orange, Apple, Kiwi)&quot;}%== returns ==Kiwi==
   * Related: =[[#FuncCOUNTITEMS][$COUNTITEMS()]]=, =[[#FuncCOUNTSTR][$COUNTSTR()]]=, =[[#FuncLIST][$LIST()]]=, =[[#FuncLISTIF][$LISTIF()]]=, =[[#FuncLISTMAP][$LISTMAP()]]=, =[[#FuncLISTREVERSE][$LISTREVERSE()]]=, =[[#FuncLISTSIZE][$LISTSIZE()]]=, =[[#FuncLISTSORT][$LISTSORT()]]=, =[[#FuncLISTUNIQUE][$LISTUNIQUE()]]=, =[[#FuncSUM][$SUM()]]=

#FuncLISTJOIN
---+++ LISTJOIN( separator, list ) -- convert a list into a string
   * By default, list items are separated by a comma and a space. Use this function to indicate a specific =separator= string, which may include =$comma= for comma, =$n= for newline, and =$sp= for space.
   * Syntax: ==$LISTJOIN( separator, list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$LISTJOIN($n, Apple, Orange, Apple, Kiwi)&quot;}%== returns the four items separated by new lines
   * Related: =[[#FuncLIST][$LIST()]]=, =[[#FuncLISTSIZE][$LISTSIZE()]]=

#FuncLISTMAP
---+++ LISTMAP( formula, list ) -- evaluate and update each element of a list
   * In the formula you can use ==$item== to indicate the element; ==$index== to show the index of the list, starting at 1
   * Syntax: ==$LISTMAP( formula, list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$LISTMAP($index: $EVAL(2 * $item), 3, 5, 7, 11)&quot;}%== returns ==1: 6, 2: 10, 3: 14, 4: 22==
   * Related: =[[#FuncCOUNTITEMS][$COUNTITEMS()]]=, =[[#FuncCOUNTSTR][$COUNTSTR()]]=, =[[#FuncLIST][$LIST()]]=, =[[#FuncLISTIF][$LISTIF()]]=, =[[#FuncLISTITEM][$LISTITEM()]]=, =[[#FuncLISTREVERSE][$LISTREVERSE()]]=, =[[#FuncLISTSIZE][$LISTSIZE()]]=, =[[#FuncLISTSORT][$LISTSORT()]]=, =[[#FuncLISTUNIQUE][$LISTUNIQUE()]]=, =[[#FuncSUM][$SUM()]]=

#FuncLISTREVERSE
---+++ LISTREVERSE( list ) -- opposite order of a list
   * Syntax: ==$LISTREVERSE( list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$LISTREVERSE(Apple, Orange, Apple, Kiwi)&quot;}%== returns ==Kiwi, Apple, Orange, Apple==
   * Related: =[[#FuncCOUNTITEMS][$COUNTITEMS()]]=, =[[#FuncCOUNTSTR][$COUNTSTR()]]=, =[[#FuncLIST][$LIST()]]=, =[[#FuncLISTIF][$LISTIF()]]=, =[[#FuncLISTITEM][$LISTITEM()]]=, =[[#FuncLISTMAP][$LISTMAP()]]=, =[[#FuncLISTSIZE][$LISTSIZE()]]=, =[[#FuncLISTSORT][$LISTSORT()]]=, =[[#FuncLISTUNIQUE][$LISTUNIQUE()]]=, =[[#FuncSUM][$SUM()]]=

#FuncLISTSIZE
---+++ LISTSIZE( list ) -- number of elements in a list
   * Syntax: ==$LISTSIZE( list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$LISTSIZE(Apple, Orange, Apple, Kiwi)&quot;}%== returns ==4==
   * Related: =[[#FuncCOUNTITEMS][$COUNTITEMS()]]=, =[[#FuncCOUNTSTR][$COUNTSTR()]]=, =[[#FuncLIST][$LIST()]]=, =[[#FuncLISTIF][$LISTIF()]]=, =[[#FuncLISTITEM][$LISTITEM()]]=, =[[#FuncLISTJOIN][$LISTJOIN()]]=, =[[#FuncLISTMAP][$LISTMAP()]]=, =[[#FuncLISTREVERSE][$LISTREVERSE()]]=, =[[#FuncLISTSORT][$LISTSORT()]]=, =[[#FuncLISTUNIQUE][$LISTUNIQUE()]]=, =[[#FuncSUM][$SUM()]]=

#FuncLISTSORT
---+++ LISTSORT( list ) -- sort a list
   * Sorts a list in ASCII order, or numerically if all elements are numeric
   * Syntax: ==$LISTSORT( list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$LISTSORT(Apple, Orange, Apple, Kiwi)&quot;}%== returns ==Apple, Apple, Kiwi, Orange==
   * Related: =[[#FuncCOUNTITEMS][$COUNTITEMS()]]=, =[[#FuncCOUNTSTR][$COUNTSTR()]]=, =[[#FuncLIST][$LIST()]]=, =[[#FuncLISTIF][$LISTIF()]]=, =[[#FuncLISTITEM][$LISTITEM()]]=, =[[#FuncLISTMAP][$LISTMAP()]]=, =[[#FuncLISTREVERSE][$LISTREVERSE()]]=, =[[#FuncLISTSIZE][$LISTSIZE()]]=, =[[#FuncLISTUNIQUE][$LISTUNIQUE()]]=, =[[#FuncSUM][$SUM()]]=

#FuncLISTUNIQUE
---+++ LISTUNIQUE( list ) -- remove all duplicates from a list
   * Syntax: ==$LISTUNIQUE( list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$LISTUNIQUE(Apple, Orange, Apple, Kiwi)&quot;}%== returns ==Apple, Orange, Kiwi==
   * Related: =[[#FuncCOUNTITEMS][$COUNTITEMS()]]=, =[[#FuncCOUNTSTR][$COUNTSTR()]]=, =[[#FuncLIST][$LIST()]]=, =[[#FuncLISTIF][$LISTIF()]]=, =[[#FuncLISTITEM][$LISTITEM()]]=, =[[#FuncLISTMAP][$LISTMAP()]]=, =[[#FuncLISTREVERSE][$LISTREVERSE()]]=, =[[#FuncLISTSIZE][$LISTSIZE()]]=, =[[#FuncLISTSORT][$LISTSORT()]]=, =[[#FuncSUM][$SUM()]]=

#FuncLOWER
---+++ LOWER( text ) -- lower case string of a text
   * Syntax: ==$LOWER(text)==
   * Example: ==%&lt;nop&gt;CALC{&quot;$LOWER( $T(R1:C5) )&quot;}%== returns the lower case string of the text in cell ==R1:C5==
   * Related: =[[#FuncPROPER][$PROPER()]]=, =[[#FuncPROPERSPACE][$PROPERSPACE()]]=, =[[#FuncTRIM][$TRIM()]]=, =[[#FuncUPPER][$UPPER()]]=

#FuncMAX
---+++ MAX( list ) - biggest value of a list or range of cells
   * Syntax: ==$MAX( list )==
   * Example: To find the biggest number to the left of the current cell, write: ==%&lt;nop&gt;CALC{&quot;$MAX($LEFT())&quot;}%==
   * Related: =[[#FuncLIST][$LIST()]]=, =[[#FuncMEDIAN][$MEDIAN()]]=, =[[#FuncMIN][$MIN()]]=, =[[#FuncPERCENTILE][$PERCENTILE()]]=

#FuncMEDIAN
---+++ MEDIAN( list ) -- median of a list or range of cells
   * Syntax: ==$MEDIAN( list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$MEDIAN(3, 9, 4, 5)&quot;}%== returns ==4.5==
   * Related: =[[#FuncLIST][$LIST()]]=, =[[#FuncMAX][$MAX()]]=, =[[#FuncMIN][$MIN()]]=, =[[#FuncPERCENTILE][$PERCENTILE()]]=

#FuncMIN
---+++ MIN( list ) -- smallest value of a list or range of cells
   * Syntax: ==$MIN( list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$MIN(15, 3, 28)&quot;}%== returns ==3==
   * Related: =[[#FuncLIST][$LIST()]]=, =[[#FuncMAX][$MAX()]]=, =[[#FuncMEDIAN][$MEDIAN()]]=, =[[#FuncPERCENTILE][$PERCENTILE()]]=

#FuncMOD
---+++ MOD( num, divisor ) -- reminder after dividing ==num== by ==divisor==
   * Syntax: ==$MOD( num, divisor )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$MOD(7, 3)&quot;}%== returns ==1==
   * Related: =[[#FuncEVAL][$EVAL()]]=

#FuncNOEXEC
---+++ NOEXEC( formula ) -- do not execute a spreadsheet formula
   * Prevent a formula from getting executed. This is typically used to store a raw formula in a variable for later use as described in =[[#FuncEXEC][$EXEC()]]=.
   * Syntax: ==$NOEXEC( formula )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SET(msg, $NOEXEC(Hi $GET(name)))&quot;}%== sets the =msg= variable with the formula =Hi $GET(name)= without executing it
   * Related: =[[#FuncEVAL][$EVAL()]]=, =[[#FuncEXEC][$EXEC()]]=, =[[#FuncGET][$GET()]]=, =[[#FuncSET][$SET()]]=

#FuncNOP
---+++ NOP( text ) -- no-operation
   * Useful to change the order of Plugin execution. For example, it allows preprossing to be done before =%&lt;nop&gt;SEARCH{}%= is evaluated. The percent character &#39;%&#39; can be escaped with =$per=
   * Syntax: ==$NOP( text )==

#FuncNOT
---+++ NOT( num ) -- reverse logic of a number
   * Returns 0 if ==num== is not zero, 1 if zero
   * Syntax: ==$NOT( num )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$NOT(0)&quot;}%== returns ==1==
   * Related: =[[#FuncAND][$AND()]]=, =[[#FuncIF][$IF()]]=, =[[#FuncOR][$OR()]]=

#FuncODD
---+++ ODD( num ) -- test for odd number
   * Syntax: ==$ODD( num )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$ODD(2)&quot;}%== returns ==0==
   * Related: =[[#FuncABS][$ABS()]]=, =[[#FuncEVEN][$EVEN()]]=, =[[#FuncMOD][$MOD()]]=, =[[#FuncSIGN][$SIGN()]]=

#FuncOR
---+++ OR( list ) -- logical OR of a list
   * Syntax: ==$OR( list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$OR(1, 0, 1)&quot;}%== returns ==1==
   * Related: =[[#FuncAND][$AND()]]=, =[[#FuncIF][$IF()]]=, =[[#FuncNOT][$NOT()]]=

#FuncPERCENTILE
---+++ PERCENTILE( num, list ) -- percentile of a list or range of cells
   * Calculates the num-th percentile, useful to establish a threshold of acceptance. num is the percentile value, range 0..100
   * Syntax: ==$PERCENTILE( num, list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$PERCENTILE(75, 400, 200, 500, 100, 300)&quot;}%== returns ==450==
   * Related: =[[#FuncLIST][$LIST()]]=, =[[#FuncMAX][$MAX()]]=, =[[#FuncMEDIAN][$MEDIAN()]]=, =[[#FuncMIN][$MIN()]]=

#FuncPRODUCT
---+++ PRODUCT( list ) -- product of a list or range of cells
   * Syntax: ==$PRODUCT( list )==
   * Example: To calculate the product of the cells to the left of the current one use ==%&lt;nop&gt;CALC{&quot;$PRODUCT($LEFT())&quot;}%==
   * Related: =[[#FuncLIST][$LIST()]]=, =[[#FuncPRODUCT][$PRODUCT()]]=, =[[#FuncSUM][$SUM()]]=, =[[#FuncSUMPRODUCT][$SUMPRODUCT()]]=

#FuncPROPER
---+++ PROPER( text ) -- properly capitalize text
   * Capitalize letters that follow any character other than a letter; convert all other letters to lowercase letters
   * Syntax: ==$PROPER( text )==
   * Example: ==%&lt;nop&gt;CALC{&quot;PROPER(a small STEP)&quot;}%== returns ==A Small Step==
   * Example: ==%&lt;nop&gt;CALC{&quot;PROPER(f1 (formula-1))&quot;}%== returns ==F1 (Formula-1)==
   * Related: =[[#FuncLOWER][$LOWER()]]=, =[[#FuncPROPERSPACE][$PROPERSPACE()]]=, =[[#FuncTRIM][$TRIM()]]=, =[[#FuncUPPER][$UPPER()]]=

#FuncPROPERSPACE
---+++ PROPERSPACE( text ) -- properly space out &lt;nop&gt;WikiWords
   * Properly spaces out %TWIKIWEB%.WikiWords preceeded by white space, parenthesis, or ==][==. Words listed in the DONTSPACE %TWIKIWEB%.%WIKIPREFSTOPIC% variable or DONTSPACE Plugins setting are excluded
   * Syntax: ==$PROPERSPACE( text )==
   * Example: Assuming DONTSPACE contains &lt;nop&gt;MacDonald: ==%&lt;nop&gt;CALC{&quot;$PROPERSPACE(Old &lt;nop&gt;MacDonald had a &lt;nop&gt;ServerFarm, &lt;nop&gt;EeEyeEeEyeOh)&quot;}%== returns ==Old &lt;nop&gt;MacDonald had a Server Farm, Ee Eye Ee Eye Oh==
   * Related: =[[#FuncLOWER][$LOWER()]]=, =[[#FuncPROPER][$PROPER()]]=, =[[#FuncTRIM][$TRIM()]]=, =[[#FuncUPPER][$UPPER()]]=

#FuncRAND
---+++ RAND( max ) -- random number
   * Random number, evenly distributed between 0 and ==max==, or 0 and 1 if max is not specified
   * Syntax: ==$RAND( max )==
   * Related: =[[#FuncEVAL][$EVAL()]]=

#FuncREPEAT
---+++ REPEAT(text) -- repeat text a number of times
   * Syntax: ==$REPEAT( text )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$REPEAT(/\, 5)&quot;}%== returns ==/\/\/\/\/\==

#FuncREPLACE
---+++ REPLACE( text, start, num, new ) -- replace part of a text string
   * Replace =num= number of characters of text string =text=, starting at =start=, with new text =new=. Starting position is 1; use a negative =start= to count from the end of the text
   * Syntax: ==$REPLACE( text, start, num, new )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$REPLACE(abcdefghijk,6,5,*)&quot;}%== returns ==abcde*k==
   * Related: =[[#FuncFIND][$FIND()]]=, =[[#FuncSEARCH][$SEARCH()]]=, =[[#FuncSUBSTITUTE][$SUBSTITUTE()]]=, =[[#FuncTRANSLATE][$TRANSLATE()]]=

#FuncRIGHT
---+++ RIGHT( ) -- address range of cells to the right of the current cell
   * Syntax: ==$RIGHT( )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SUM($RIGHT())&quot;}%== returns the sum of cells to the right of the current cell
   * Related: =[[#FuncABOVE][$ABOVE()]]=, =[[#FuncLEFT][$LEFT()]]=

#FuncROUND
---+++ ROUND( formula, digits ) -- round a number
   * Evaluates a simple ==formula== and rounds the result up or down to the number of digits if ==digits== is positive; to the nearest integer if digits is missing; or to the left of the decimal point if digits is negative
   * Syntax: ==$ROUND( formula, digits )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$ROUND(3.15, 1)&quot;}%== returns ==3.2==
   * Example: ==%&lt;nop&gt;CALC{&quot;$ROUND(3.149, 1)&quot;}%== returns ==3.1==
   * Example: ==%&lt;nop&gt;CALC{&quot;$ROUND(-2.475, 2)&quot;}%== returns ==-2.48==
   * Example: ==%&lt;nop&gt;CALC{&quot;$ROUND(34.9, -1)&quot;}%== returns ==30==
   * Related: =[[#FuncINT][$INT()]]=, =[[#FuncFORMAT][$FORMAT()]]=

#FuncROW
---+++ ROW( offset ) -- current row number
   * The current table row number with an optional offset
   * Syntax: ==$ROW( _offset_ )==
   * Example: To get the number of rows excluding table heading (first row) and summary row (last row you are in), write: ==%&lt;nop&gt;CALC{&quot;$ROW(-2)&quot;}%==
   * Related: =[[#FuncCOLUMN][$COLUMN()]]=, =[[#FuncT][$T()]]=

#FuncSEARCH
---+++ SEARCH( string, text, start ) -- search a string within a text
   * Finds one text =string=, within another =text=, and returns the number of the starting position of =string=, from the first character of =text=. This search is a %TWIKIWEB%.RegularExpression search; use =$FIND()= for non-regular expression searching. Starting position is 1; a 0 is returned if nothing is matched
   * Syntax: ==$SEARCH( string, text, _start_ )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SEARCH([uy], fluffy)&quot;}%== returns ==3==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SEARCH([uy], fluffy, 3)&quot;}%== returns ==6==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SEARCH([abc], fluffy,)&quot;}%== returns ==0==
   * Related: =[[#FuncFIND][$FIND()]]=, =[[#FuncREPLACE][$REPLACE()]]=

#FuncSET
---+++ SET( name, value ) -- set a variable for later use
   * Specify the variable name (alphanumeric characters and underscores) and the value. The value may contain a formula; formulae are evaluated before the variable assignment; see =[[#FuncNOEXEC][$NOEXEC()]]= if you want to prevent that. This function returns no output. Use =$GET()= to retrieve variables. Unlike table ranges, variables live for the time of the page view and persist across tables, i.e. you can use it to summarize results across several tables and also across included topics
   * Syntax: ==$SET( name, value )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SET(my_total, $SUM($ABOVE()))&quot;}%== sets the =my_total= variable to the sum of all table cells located above the current cell and returns an empty string
   * Related: =[[#FuncEXEC][$EXEC()]]=, =[[#FuncGET][$GET()]]=, =[[#FuncNOEXEC][$NOEXEC()]]=, =[[#FuncSETIFEMPTY][$SETIFEMPTY()]]=, =[[#FuncSETM][SETM()]]=

#FuncSETIFEMPTY
---+++ SETIFEMPTY( name, value ) -- set a variable only if empty
   * Specify the variable name (alphanumeric characters and underscores) and the value.
   * Syntax: ==$SETIFEMPTY( name, value )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SETIFEMPTY(result, default)&quot;}%== sets the =result= variable to =default= if the variable is empty or 0; in any case an empty string is returned
   * Related: =[[#FuncGET][$GET()]]=, =[[#FuncSET][$SET()]]=

#FuncSETM
---+++ SETM( name, formula ) -- update an existing variable based on a formula
   * Specify the variable name (alphanumeric characters and underscores) and the formula. The formula must start with an operator to ==+== (add), ==-== (subtract), ==*== (multiply), or ==/== (divide) something to the variable. This function returns no output. Use =$GET()= to retrieve variables
   * Syntax: ==$SETM( name, formula )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SETM(total, + $SUM($LEFT()))&quot;}%== adds the sum of all table cells on the left to the =total= variable, and returns an empty string
   * Related: =[[#FuncGET][$GET()]]=, =[[#FuncSET][$SET()]]=, =[[#FuncSETIFEMPTY][$SETIFEMPTY()]]=

#FuncSIGN
---+++ SIGN( num ) -- sign of a number
   * Returns -1 if ==num== is negative, 0 if zero, or 1 if positive
   * Syntax: ==$SIGN( num )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SIGN(-12.5)&quot;}%== returns ==-1==
   * Related: =[[#FuncABS][$ABS()]]=, =[[#FuncEVAL][$EVAL()]]=, =[[#FuncEVEN][$EVEN()]]=, =[[#FuncINT][$INT()]]=, =[[#FuncNOT][$NOT()]]=, =[[#FuncODD][$ODD()]]=

#FuncSUBSTITUTE
---+++ SUBSTITUTE( text, old, new, instance, option ) -- substitute text
   * Substitutes =new= text for =old= text in a =text= string. =instance= specifies which occurance of =old= you want to replace. If you specify =instance=, only that instance is replaced. Otherwise, every occurance is changed to the new text. A literal search is performed by default; a %TWIKIWEB%.RegularExpression search if the =option= is set to ==r==
   * Syntax: ==$SUBSTITUTE( text, old, _new_, _instance_, _option_ )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SUBSTITUTE(Good morning, morning, day)&quot;}%== returns ==Good day==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SUBSTITUTE(Q2-2002,2,3)&quot;}%== returns ==Q3-3003==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SUBSTITUTE(Q2-2002,2,3,3)&quot;}%== returns ==Q2-2003==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SUBSTITUTE(abc123def,[0-9],9,,r)&quot;}%== returns ==abc999def==
   * Related: =[[#FuncREPLACE][$REPLACE()]]=, =[[#FuncTRANSLATE][$TRANSLATE()]]=

#FuncSUM
---+++ SUM( list ) -- sum of a list or range of cells
   * Syntax: ==$SUM( list )==
   * Example: To sum up column 5 excluding the title row, write ==%&lt;nop&gt;CALC{&quot;$SUM(R2:C5..R$ROW(-1):C5)&quot;}%== in the last row; or simply ==%&lt;nop&gt;CALC{&quot;$SUM($ABOVE())&quot;}%==
   * Related: =[[#FuncLIST][$LIST()]]=, =[[#FuncPRODUCT][$PRODUCT()]]=, =[[#FuncSUMPRODUCT][$SUMPRODUCT()]]=, =[[#FuncWORKINGDAYS][$WORKINGDAYS()]]=

#FuncSUMDAYS
---+++ SUMDAYS( list ) -- sum the days in a list or range of cells
   * The total number of days in a list or range of cells containing numbers of hours, days or weeks. The default unit is days; units are indicated by a ==h==, ==hours==, ==d==, ==days==, ==w==, ==weeks== suffix. One week is assumed to have 5 working days, one day 8 hours
   * Syntax: ==$SUMDAYS( list )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SUMDAYS(2w, 1, 2d, 4h)&quot;}%== returns ==13.5==, the evaluation of =(2*5 + 1 + 2 + 4/8)=
   * Related: =[[#FuncSUM][$SUM()]]=, =[[#FuncTIME][$TIME()]]=, =[[#FuncFORMATTIME][$FORMATTIME()]]=

#FuncSUMPRODUCT
---+++ SUMPRODUCT( list, list ) -- scalar product on ranges of cells
   * Syntax: ==$SUMPRODUCT( list, list, _list..._ )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$SUMPRODUCT(R2:C1..R4:C1, R2:C5..R4:C5)&quot;}%== evaluates and returns the result of ==($T(R2:C1) * $T(R2:C5) + $T(R3:C1) * $T(R3:C5) + $T(R4:C1) * $T(R4:C5))==
   * Related: =[[#FuncLIST][$LIST()]]=, =[[#FuncPRODUCT][$PRODUCT()]]=, =[[#FuncSUM][$SUM()]]=

#FuncT
---+++ T( address ) -- content of a cell
   * Syntax: ==$T( address )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$T(R1:C5)&quot;}%== returns the text in cell ==R1:C5==
   * Related: =[[#FuncCOLUMN][$COLUMN()]]=, =[[#FuncROW][$ROW()]]=

#FuncTRANSLATE
---+++ TRANSLATE( text, from, to ) -- translate text from one set of characters to another
   * The translation is done =from= a set =to= a set, one character by one. The =text= may contain commas; all three parameters are required. In the =from= and =to= parameters you can write =$comma= to escape comma, =$sp= to escape space
   * Syntax: ==$TRANSLATE( text, from, to )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$TRANSLATE(boom,bm,cl)&quot;}%== returns ==cool==
   * Example: ==%&lt;nop&gt;CALC{&quot;$TRANSLATE(one, two,$comma,;)&quot;}%== returns ==one; two==
   * Related: =[[#FuncREPLACE][$REPLACE()]]=, =[[#FuncSUBSTITUTE][$SUBSTITUTE()]]=

#FuncTIME
---+++ TIME( text ) -- convert a date string into a serialized date number
   * Serialized date is seconds since the Epoch, e.g. midnight, 01 Jan 1970. Current time is taken if the date string is empty. Supported date formats: =31 Dec 2009=; =31 Dec 2009 GMT=; =31 Dec 09=; =31-Dec-2009=; =31/Dec/2009=; =2009/12/31=; =2009-12-31=; =2009/12/31=; =2009/12/31 23:59=; =2009/12/31 - 23:59=; =2009-12-31-23-59=; =2009/12/31 - 23:59:59=; =2009.12.31.23.59.59=. Date is assumed to be server time; add =GMT= to indicate Greenwich time zone
   * Syntax: ==$TIME( _text_ )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$TIME(2003/10/14 GMT)&quot;}%== returns ==1066089600==
   * Related: =[[#FuncFORMATTIME][$FORMATTIME()]]=, =[[#FuncFORMATGMTIME][$FORMATGMTIME()]]=, =[[#FuncTIMEADD][$TIMEADD()]]=, =[[#FuncTIMEDIFF][$TIMEDIFF()]]=, =[[#FuncTODAY][$TODAY()]]=, =[[#FuncWORKINGDAYS][$WORKINGDAYS()]]=

#FuncTIMEADD
---+++ TIMEADD( serial, value, unit ) -- add a value to a serialized date
   * The unit is seconds if not specified; unit can be =second=, =minute=, =hour=, =day=, =week=, =month=, =year=. Note: An approximation is used for month and year calculations
   * Syntax: ==$TIMEADD( serial, value, _unit_ )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$TIMEADD($TIME(), 2, week)&quot;}%== returns the serialized date two weeks from now
   * Related: =[[#FuncFORMATTIME][$FORMATTIME()]]=, =[[#FuncFORMATGMTIME][$FORMATGMTIME()]]=, =[[#FuncTIME][$TIME()]]=, =[[#FuncTIMEDIFF][$TIMEDIFF()]]=, =[[#FuncTODAY][$TODAY()]]=

#FuncTIMEDIFF
---+++ TIMEDIFF( serial_1, serial_2, unit ) -- time difference between two serialized dates
   * The unit is seconds if not specified; unit can be specified as in =$TIMEADD()=. Note: An approximation is used for month and year calculations. Use =$FORMAT()= or =$INT()= to format real numbers
   * Syntax: ==$TIMEDIFF( serial_1, serial_2, _unit_ )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$TIMEDIFF($TIME(), $EVAL($TIME()+90), minute)&quot;}%== returns ==1.5==
   * Related: =[[#FuncFORMAT][$FORMAT()]]=, =[[#FuncFORMATTIME][$FORMATTIME()]]=, =[[#FuncFORMATGMTIME][$FORMATGMTIME()]]=, =[[#FuncINT][$INT()]]=, =[[#FuncTIME][$TIME()]]=, =[[#FuncTIMEADD][$TIMEADD()]]=, =[[#FuncTODAY][$TODAY()]]=, =[[#FuncWORKINGDAYS][$WORKINGDAYS()]]=

#FuncTODAY
---+++ TODAY( ) -- serialized date of today at midnight GMT
   * In contrast, the related =$TIME()= returns the serialized date of today at the current time, e.g. it includes the number of seconds since midnight GMT
   * Syntax: ==$TODAY( )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$TODAY()&quot;}%== returns the number of seconds since Epoch
   * Related: =[[#FuncFORMATTIME][$FORMATTIME()]]=, =[[#FuncFORMATGMTIME][$FORMATGMTIME()]]=, =[[#FuncTIME][$TIME()]]=, =[[#FuncTIMEADD][$TIMEADD()]]=, =[[#FuncTIMEDIFF][$TIMEDIFF()]]=

#FuncTRIM
---+++ TRIM( text ) -- trim spaces from text
   * Removes all spaces from text except for single spaces between words
   * Syntax: ==$TRIM( text )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$TRIM( eat  spaces  )&quot;}%== returns ==eat spaces==
   * Related: =[[#FuncEXACT][$EXACT()]]=, =[[#FuncPROPERSPACE][$PROPERSPACE()]]=

#FuncUPPER
---+++ UPPER( text ) -- upper case string of a text
   * Syntax: ==$UPPER( text )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$UPPER($T(R1:C5))&quot;}%== returns the upper case string of the text in cell ==R1:C5==
   * Related: =[[#FuncLOWER][$LOWER()]]=, =[[#FuncPROPER][$PROPER()]]=, =[[#FuncPROPERSPACE][$PROPERSPACE()]]=, =[[#FuncTRIM][$TRIM()]]=

#FuncVALUE
---+++ VALUE( text ) -- convert text to number
   * Extracts a number from ==text==. Returns ==0== if not found
   * Syntax: ==$VALUE( text )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$VALUE(US$1,200)&quot;}%== returns ==1200==
   * Example: ==%&lt;nop&gt;CALC{&quot;$VALUE(&lt;nop&gt;PrjNotebook1234)&quot;}%== returns ==1234==
   * Example: ==%&lt;nop&gt;CALC{&quot;$VALUE(Total: -12.5)&quot;}%== returns ==-12.5==
   * Related: =[[#FuncEVAL][$EVAL()]]=, =[[#FuncINT][$INT()]]=

#FuncWORKINGDAYS
---+++ WORKINGDAYS( serial_1, serial_2 ) -- working days between two serialized dates
   * Working days are Monday through Friday (sorry, Israel!)
   * Syntax: ==$WORKINGDAYS( serial_1, serial_2 )==
   * Example: ==%&lt;nop&gt;CALC{&quot;$WORKINGDAYS($TIME(2004/07/15), $TIME(2004/08/03))&quot;}%== returns ==13==
   * Related: =[[#FuncSUMDAYS][$SUMDAYS()]]=, =[[#FuncTIME][$TIME()]]=, =[[#FuncTIMEDIFF][$TIMEDIFF()]]=

---++ Bug Tracking Example

| *Bug#:*  | *Priority:* | *Subject:* | *Status:* | *Days to fix* |
| Bug:1231 | Low         | File Open ...       | Open      |  3 |
| Bug:1232 | High        | Memory Window ...   | Fixed     |  2 |
| Bug:1233 | Medium      | Usability issue ... | Assigned  |  5 |
| Bug:1234 | High        | No arrange ...      | Fixed     |  1 |
| Total: %CALC{&quot;$ROW(-2)&quot;}% \
  | %CALC{&quot;$COUNTITEMS( R2:C$COLUMN()..R$ROW(-1):C$COLUMN() )&quot;}% | . \
  | %CALC{&quot;$COUNTITEMS( R2:C$COLUMN()..R$ROW(-1):C$COLUMN() )&quot;}% \
  |  Total: %CALC{&quot;$SUM( R2:C$COLUMN()..R$ROW(-1):C$COLUMN() )&quot;}% |

The last row is defined as:

&lt;verbatim&gt;
| Total: %CALC{&quot;$ROW(-2)&quot;}% \ 
  | %CALC{&quot;$COUNTITEMS( R2:C$COLUMN()..R$ROW(-1):C$COLUMN() )&quot;}% | . \ 
  | %CALC{&quot;$COUNTITEMS( R2:C$COLUMN()..R$ROW(-1):C$COLUMN() )&quot;}% \ 
  |  Total: %CALC{&quot;$SUM( R2:C$COLUMN()..R$ROW(-1):C$COLUMN() )&quot;}% |
&lt;/verbatim&gt;

Above table is created manually. Another Plugin could build the table dynamically, e.g. by pulling data out of a bug tracking system. The Spreadsheet Plugin can be used to display table data statistics.

---++ Plugin Settings

Plugin settings are stored as preferences variables. To reference
a plugin setting write ==%&lt;nop&gt;&amp;lt;plugin&amp;gt;_&amp;lt;setting&amp;gt;%==, i.e. ==%&lt;nop&gt;SPREADSHEETPLUGIN_SHORTDESCRIPTION%==

   * One line description, is shown in the %TWIKIWEB%.TextFormattingRules topic:
      * Set SHORTDESCRIPTION = Add spreadsheet calculation like =&quot;$SUM( $ABOVE() )&quot;= to tables located in %WIKITOOLNAME% topics.

   * Debug plugin: (See output in =data/debug.txt=)
      * Set DEBUG = 0

   * Do not handle =%&lt;nop&gt;CALC{}%= variable in included topic while including topic: (default: 1)
      * Set SKIPINCLUDE = 1

&lt;noautolink&gt;
   * [[%TWIKIWEB%.WikiWord][WikiWords]] to exclude from being spaced out by the ==$PROPERSPACE(text)== function. This comma delimited list can be overloaded by a DONTSPACE preferences variable:
      * Set DONTSPACE = CodeWarrior, MacDonald, McIntosh, RedHat, SuSE
&lt;/noautolink&gt;


---++ Plugin Installation Instructions

__Note:__ You do not need to install anything on the browser to use this plugin. Below installation instructions are for the administrator who needs to install this plugin on the TWiki server. 

   * Download the ZIP file from the &lt;nop&gt;%TOPIC% home
   * Unzip ==SpreadSheetPlugin.zip== in your twiki installation directory. Content:
     | *File:* | *Description:* |
     | ==data/TWiki/%TOPIC%.txt== | Plugin topic |
     | ==data/TWiki/%TOPIC%.txt,v== | Plugin topic repository |
     | ==lib/TWiki/Plugins/%TOPIC%.pm== | Plugin Perl module |
   * TWiki 4 and up: Visit =configure= in your TWiki installation, and enable the Plugin in the {Plugins} section.
   * Test if the &quot;Total&quot; in the first table in this topic is correct.

---++ Plugin Info

|  Plugin Author: | TWiki:Main/PeterThoeny |
|  Copyright: | &amp;copy; 2001-2006, Peter@Thoeny.org, [[http://www.structuredwikis.com/][StructuredWikis LLC]] |
|  License: | GPL ([[http://www.gnu.org/copyleft/gpl.html][GNU General Public License]]) |
|  Plugin Version: | 13 May 2006 (10197) |
|  Change History: | &lt;!-- specify latest version first --&gt;&amp;nbsp; |
|  13 May 2006: | Added $SETIFEMPTY(); fixes in documentation |
|  17 Jun 2005: | Added $NOEXEC(), $EXEC() |
|  25 Mar 2005: | Fixed evaluation bug when using &lt;nop&gt;SpeedyCGI accelerator; code refactor to load module only when needed, contributed by TWiki:Main/CrawfordCurrie |
|  24 Oct 2004: | Added $EXISTS(), contributed by TWiki:Main/RodrigoChandia; added $PERCENTILE() |
|  18 Oct 2004: | Added $LISTJOIN() |
|  26 Sep 2004: | Added $FORMAT(KB), $FORMAT(MB), contributed by TWiki:Main/ArthurClemens; added $FORMAT(KBMB), $EVEN(), $ODD() |
|  17 Jul 2004: | Added $WORKINGDAYS(), contributed by TWiki:Main/CrawfordCurrie |
|  24 May 2004: | Refactored documentation (no code changes) |
|  03 Apr 2004: | Added $ABS(), $LISTIF(); fixed $VALUE() to remove leading zeros; changed $FIND() and $SEARCH() to return 0 instead of empty string if no match |
|  21 Mar 2004: | Added $LISTITEM(); fixed call to unofficial function |
|  16 Mar 2004: | Added $LISTMAP(), $LISTREVERSE(), $LISTSIZE(), $LISTSORT(), $LISTUNIQUE(), $SETM(); retired $COUNTUNIQUE() in favor of $COUNTITEMS($LISTUNIQUE()); fixed evaluation order issue of $IF(); fixed missing eval error messages suppressed since version 06 Mar 2004; redirect stderr messages to warning |
|  08 Mar 2004: | Added $LIST() |
|  06 Mar 2004: | Added $AND(), $MOD(), $NOT(), $OR(), $PRODUCT(), $PROPER(), $PROPERSPACE(), $RAND(), $REPEAT(), $SIGN(), $VALUE(); added digits parameter to $ROUND(); renamed $MULT() to $PRODUCT(); $MULT() is deprecated and undocumented |
|  27 Feb 2004: | Added $COUNTUNIQUE() |
|  24 Oct 2003: | Added $SET(), $GET(), $MEDIAN(); added $SUMPRODUCT(), inspired by TWiki:Main/RobertWithrow; added $SUMDAYS(), contributed by TWiki:Main/SvenDowideit |
|  21 Oct 2003: | Added support for lists =(1, 2, 3)= and lists of table ranges =(R1:C1..R1:C5, R3:C1..R3:C5)= for all functions that accept a table range; added $TIMEADD(); in $TIMEDIFF() added week unit; in $FORMATTIME() changed $weekday to $wd and added $wday and $weekday |
|  14 Oct 2003: | Added $TIME(), $TODAY(), $FORMATTIME(), $FORMATGMTIME(), $TIMEDIFF() |
|  13 Oct 2003: | Added $MULT(), contributed by TWiki:Main/GerritJanBaarda |
|  30 Jul 2003: | Added $TRANSLATE() |
|  19 Jul 2003: | Added $FIND(), $NOP(), $REPLACE(), $SEARCH(), $SUBSTITUTE(), contributed by TWiki:Main/PaulineCheung |
|  19 Apr 2003: | Added $COUNTSTR(), $EXACT(), $IF(), $ROUND(), $TRIM(); added $FORMAT(), contributed by TWiki:Main/JimStraus; support =%= modulus operator in $EVAL(), $INT(), and $ROUND(); fixed bug in $DEF() |
|  07 Jun 2002: | Added $DEF(), contributed by TWiki:Main/MartinFuzzey; allow values with HTML formatting like =&amp;lt;u&amp;gt;102&amp;lt;/u&amp;gt;=, suggested by TWiki:Main/GladeDiviney; added SKIPINCLUDE setting |
|  12 Mar 2002: | Support for multiple functions per nesting level |
|  15 Jan 2002: | Added $CHAR(), $CODE() and $LENGTH() |
|  12 Nov 2001: | Added $RIGHT() |
|  12 Aug 2001: | Fixed bug of disappearing multi-column cells |
|  19 Jul 2001: | Fixed incorrect $SUM() calculation of cell with value =0= |
|  14 Jul 2001: | Changed to plug &amp; play |
|  01 Jun 2001: | Fixed insecure dependencies for $MIN() and $MAX() |
|  16 Apr 2001: | Fixed div by 0 bug in $AVERAGE() |
|  17 Mar 2001: | Initial version with $ABOVE(), $AVERAGE(), $COLUMN(), $COUNTITEMS(), $EVAL(), $INT(), $LEFT(), $LOWER(), $MAX(), $MIN(), $ROW(), $SUM(), $T(), $UPPER() |
|  CPAN Dependencies: | none |
|  TWiki:Plugins/Benchmark: | %TWIKIWEB%.GoodStyle 99%, %TWIKIWEB%.FormattedSearch 99%, %TOPIC% 95% |
|  Other Dependencies: | none |
|  Perl Version: | 5.000 and up |
|  Plugin Home: | http://TWiki.org/cgi-bin/view/Plugins/%TOPIC% |
|  Feedback: | http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%Dev |
|  Appraisal: | http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%Appraisal |

__Related Topics:__ %TWIKIWEB%.TWikiPreferences, %TWIKIWEB%.TWikiPlugins

-- TWiki:Main/PeterThoeny - 13 May 2006


