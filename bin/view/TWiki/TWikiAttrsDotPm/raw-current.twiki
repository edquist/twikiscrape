---+ Package =TWiki::Attrs=
Class of attribute sets, designed for parsing and storing attribute values
from a TWiki tag e.g. =%TAG{fred=&#39;bad&#39; &quot;sad&quot; joe=&quot;mad&quot;}%=

An attribute set is a map containing an entry for each parameter. The
default parameter (unnamed quoted string) is named &lt;code&gt;_&lt;nop&gt;DEFAULT&lt;/code&gt; in the map.

Attributes declared later in the string will override those of the same
name defined earlier. The one exception to this is the _DEFAULT key, where
the _first_ instance of a setting is always taken.

As well as standard TWiki syntax (parameter values double-quoted)
it also parses single-quoted values, unquoted spaceless
values, spaces around the =, and commas as well as spaces separating values,
though none of these alternatives is advertised in documentation and
the extended syntax can be turned off by passing the &#39;strict&#39; parameter
to =new=.

This class replaces the old TWiki::extractNameValuePair and
TWiki::extractParameters.


%TOC%

---++ ClassMethod *new* &lt;tt&gt;($string,$friendly)=&gt;\%attrsObjectRef&lt;/tt&gt;
   * =$string= - String containing attribute specification
   * =$friendly= - if true, the parse will be according to the extended syntax pioneered by the original Contrib::Attrs. Otherwise it will be strict as per traditional TWiki syntax.

Parse a standard attribute string containing name=value pairs and create a new
attributes object. The value may be a word or a quoted string. If there is an
error during parsing, the parse will complete but $attrs-&gt;{_ERROR} will be
set in the new object. $attrs-&gt;{_RAW} will always contain the full unprocessed
$string.

Extended syntax example:
&lt;verbatim&gt;
my $attrs = new TWiki::Attrs(&#39;the=&quot;time \\&quot;has come&quot;, &quot;the walrus&quot; said to=speak of=\&#39;many \\&#39;things\&#39;, 1);
&lt;/verbatim&gt;
In this example:
   * =the= will be =time &quot;has come=
   * &lt;code&gt;_&lt;nop&gt;_&lt;nop&gt;default__&lt;/code&gt; will be =the walrus=
   * =said= will be =on=
   * =to= will be =speak=
   * =of= will be =many &#39;things=

Only &quot; and &#39; are escaped.

Traditional syntax is as old TWiki, except that the whole string is parsed
(the old parser would only recognise default values in position 1, nowhere
else)



---++ ObjectMethod *isEmpty* &lt;tt&gt;() -&gt; boolean&lt;/tt&gt;
Return false if attribute set is not empty.



---++ ObjectMethod *remove* &lt;tt&gt;($key) -&gt; $value&lt;/tt&gt;
| $key | Attribute to remove |
Remove an attr value from the map, return old value. After a call to
=remove= the attribute is no longer defined.



---++ ObjectMethod *stringify* &lt;tt&gt;() -&gt; $string&lt;/tt&gt;
Generate a printed form for the map, using standard
attribute syntax, with only the single-quote extension
syntax observed (no {} brackets, though).



---++ StaticMethod *extractValue* &lt;tt&gt;() -&gt; $string&lt;/tt&gt;
Legacy support, formerly known as extractNameValuePair. This
static method uses context information to determine how a value
string is to be parsed. For example, if you have an attribute string
like this:

&quot;abc def=&quot;ghi&quot; jkl&quot; def=&quot;qqq&quot;

then call extractValue( &quot;def&quot; ), it will return &quot;ghi&quot;.




---++ ObjectMethod *get* &lt;tt&gt;($key) -&gt; $value&lt;/tt&gt;
| $key | Attribute to get |
Get an attr value from the map.

Synonymous with $attrs-&gt;{$key}. Retained mainly for compatibility with
the old AttrsContrib.



