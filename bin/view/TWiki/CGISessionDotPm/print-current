<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en_US" lang="en_US">
<head>
<link rel="stylesheet" href="https://twiki.opensciencegrid.org/twiki/pub/TWiki/HeadlinesPlugin/style.css" type="text/css" media="all" />
<title> CGISessionDotPm &lt; TWiki &lt; TWiki    </title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="icon" href="/twiki/pub/TWiki/WebPreferences/favicon.ico    " type="image/x-icon" />
<link rel="shortcut icon" href="/twiki/pub/TWiki/WebPreferences/favicon.ico    " type="image/x-icon" />
<link rel="alternate" href="https://twiki.opensciencegrid.org/bin/edit/TWiki/CGISessionDotPm?_T=16 Feb 2017" type="application/x-wiki" title="edit CGISessionDotPm" />
<meta name="SCRIPTURLPATH" content="/bin" />
<meta name="SCRIPTSUFFIX" content="" />
<meta name="TEXT_JUMP" content="Jump" />
<meta name="TEXT_SEARCH" content="Search" />
<meta name="TEXT_NUM_TOPICS" content="Number of topics:" />
<meta name="TEXT_MODIFY_SEARCH" content="Modify search" />
<meta name="robots" content="noindex" /><link rel="alternate" type="application/rss+xml" title="RSS Feed" href="/bin/view/TWiki/WebRss" />    
<base href="https://twiki.opensciencegrid.org/bin/view/TWiki/CGISessionDotPm"></base>
<!--BEHAVIOURCONTRIB--><script type="text/javascript" src="/twiki/pub/TWiki/BehaviourContrib/behaviour.compressed.js"></script>
<script type="text/javascript" src="/twiki/pub/TWiki/TWikiJavascripts/twikilib.js"></script>
<script type="text/javascript" src="/twiki/pub/TWiki/TWikiJavascripts/twikiWindow.js"></script>
<script type="text/javascript" src="/twiki/pub/TWiki/TWikiJavascripts/twikiEvent.js"></script>
<script type="text/javascript" src="/twiki/pub/TWiki/TWikiJavascripts/twikiHTML.js"></script>
<script type="text/javascript" src="/twiki/pub/TWiki/TWikiJavascripts/twikiCSS.js"></script>
<script type="text/javascript" src="/twiki/pub/TWiki/TWikiJavascripts/twikiForm.js"></script>
<script type="text/javascript" src="/twiki/pub/TWiki/PatternSkin/pattern.js"></script><style type="text/css" media="all">
@import url('/twiki/pub/TWiki/TWikiTemplates/base.css');
</style><script type="text/javascript" src="/twiki/pub/TWiki/TWikiJavascripts/twikiStyles.js"></script><style type="text/css" media="all">


</style>
<style type="text/css" media="all">
@import url("/twiki/pub/TWiki/TWikiNetSkin/layout.css");
@import url("/twiki/pub/TWiki/TWikiNetSkin/style.css");
@import url("/twiki/pub/TWiki/TWikiNetSkin/colors.css");
@import url("/twiki/pub/TWiki/TWikiNetSkin/rounded_corners.css");
</style>
<style type="text/css" media="all">
	/* Styles that are set using variables */
	#patternLeftBar .patternWebIndicator,
	.patternBookView .twikiTopRow {
		background-color:#FFD8AA ;
	}
	.patternBookView {
		border-color:#FFD8AA ;
	}
	.patternPreviewPage #patternMain {
		/* uncomment to set the preview image */
		/*background-image:url("/twiki/pub/TWiki/PreviewBackground/preview2bg.gif    ");*/
	}
	
</style><style type="text/css" media="all">



</style>
<style type="text/css" media="all">
	@import url("/twiki/pub/TWiki/TWikiNetSkin/print.css");
</style><!--GOOGLEANALYTICSPLUGIN--><!-- Google Analytics script -->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-69012-21']);
  _gaq.push(['_setDomainName', 'none']);
  _gaq.push(['_setAllowLinker', true]);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
</head>
<body class="patternViewPage patternPrintPage">
<a name="PageTop"></a>
<div id="patternScreen">
<div id="patternPageShadow">
<div id="patternPage">
<div id="patternOuter">
<div id="patternFloatWrap">
<div id="patternMain">
<div id="patternMainContents">
<div class="patternContent"><div class="patternTopic"> <h1><a name="Package"></a> Package == </h1>
<strong>extends</strong> <tt>CGI::Session::ErrorHandler </tt>
<p />
<p />
<div class="twikiToc"> <ul>
<li> <a href="?cover=print#Package"> Package ==</a>
</li></ul> 
</div>
=head1 NAME
<p />
CGI::Session - persistent session data in CGI applications
<p />
=head1 SYNOPSIS
<p />
    # Object initialization:
    use CGI::Session;
    $session = new CGI::Session();
<p />
    $CGISESSID = $session-&gt;id();
<p />
    # send proper HTTP header with cookies:
    print $session-&gt;header();
<p />
    # storing data in the session
    $session-&gt;param('f_name', 'Sherzod');
    # or
    $session-&gt;param(-name=&gt;'l_name', -value=&gt;'Ruzmetov');
<p />
    # flush the data from memory to the storage driver at least before your
    # program finishes since auto-flushing can be unreliable
    $session-&gt;flush();
<p />
    # retrieving data
    my $f_name = $session-&gt;param('f_name');
    # or
    my $l_name = $session-&gt;param(-name=&gt;'l_name');
<p />
    # clearing a certain session parameter
    $session-&gt;clear(["l_name", "f_name"]);
<p />
    # expire '_is_logged_in' flag after 10 idle minutes:
    $session-&gt;expire('is_logged_in', '+10m')
<p />
    # expire the session itself after 1 idle hour
    $session-&gt;expire('+1h');
<p />
    # delete the session for good
    $session-&gt;delete();
<p />
=head1 DESCRIPTION
<p />
CGI-Session is a Perl5 library that provides an easy, reliable and modular session management system across HTTP requests.
Persistency is a key feature for such applications as shopping carts, login/authentication routines, and application that
need to carry data across HTTP requests. CGI::Session does that and many more.
<p />
=head1 TRANSLATIONS
<p />
This document is also available in Japanese.
<p />
=over 4
<p />
=item o 
<p />
Translation based on 4.14: <a href="http://digit.que.ne.jp/work/index.cgi?Perldoc/ja" target="_top">http://digit.que.ne.jp/work/index.cgi?Perldoc/ja</a>
<p />
=item o
<p />
Translation based on 3.11, including Cookbook and Tutorial: <a href="http://perldoc.jp/docs/modules/CGI-Session-3.11/" target="_top">http://perldoc.jp/docs/modules/CGI-Session-3.11/</a>
<p />
=back
<p />
=head1 TO LEARN MORE
<p />
Current manual is optimized to be used as a quick reference. To learn more both about the philosophy and CGI::Session
programming style, consider the following:
<p />
=over 4
<p />
=item *
<p />
L&lt;CGI::Session::Tutorial|CGI::Session::Tutorial&gt; - extended CGI::Session manual. Also includes library architecture and driver specifications.
<p />
=item *
<p />
We also provide mailing lists for CGI::Session users. To subscribe to the list or browse the archives visit <a href="https://lists.sourceforge.net/lists/listinfo/cgi-session-user" target="_top">https://lists.sourceforge.net/lists/listinfo/cgi-session-user</a>
<p />
=item *
<p />
B<RFC 2965> - "HTTP State Management Mechanism" found at <a href="ftp://ftp.isi.edu/in-notes/rfc2965.txt" target="_top">ftp://ftp.isi.edu/in-notes/rfc2965.txt</a>
<p />
=item *
<p />
L&lt;CGI|CGI&gt; - standard CGI library
<p />
=item *
<p />
L&lt;Apache::Session|Apache::Session&gt; - another fine alternative to CGI::Session.
<p />
=back
<p />
=head1 METHODS
<p />
Following is the overview of all the available methods accessible via CGI::Session object.
<p />
=head2 new()
<p />
=head2 new( $sid )
<p />
=head2 new( $query )
<p />
=head2 new( $dsn, $query||$sid )
<p />
=head2 new( $dsn, $query||$sid, \%dsn_args )
<p />
Constructor. Returns new session object, or undef on failure. Error message is accessible through L&lt;errstr() - class method|CGI::Session::ErrorHandler/errstr&gt;. If called on an already initialized session will re-initialize the session based on already configured object. This is only useful after a call to L&lt;load()|/"load"&gt;.
<p />
Can accept up to three arguments, $dsn - Data Source Name, $query||$sid - query object OR a string representing session id, and finally, \%dsn_args, arguments used by $dsn components.
<p />
If called without any arguments, $dsn defaults to I&lt;driver:file;serializer:default;id:md5&gt;, $query||$sid defaults to C&lt;&lt; CGI-&gt;new() &gt;&gt;, and C&lt;\%dsn_args&gt; defaults to I<undef>.
<p />
If called with a single argument, it will be treated either as C&lt;$query&gt; object, or C&lt;$sid&gt;, depending on its type. If argument is a string , C&lt;new()&gt; will treat it as session id and will attempt to retrieve the session from data store. If it fails, will create a new session id, which will be accessible through L&lt;id() method|/"id"&gt;. If argument is an object, L&lt;cookie()|CGI/cookie&gt; and L&lt;param()|CGI/param&gt; methods will be called on that object to recover a potential C&lt;$sid&gt; and retrieve it from data store. If it fails, C&lt;new()&gt; will create a new session id, which will be accessible through L&lt;id() method|/"id"&gt;. C&lt;name()&gt; will define the name of the query parameter and/or cookie name to be requested, defaults to I<CGISESSID>.
<p />
If called with two arguments first will be treated as $dsn, and second will be treated as $query or $sid or undef, depending on its type. Some examples of this syntax are:
<p />
    $s = CGI::Session-&gt;new("driver:mysql", undef);
    $s = CGI::Session-&gt;new("driver:sqlite", $sid);
    $s = CGI::Session-&gt;new("driver:db_file", $query);
    $s = CGI::Session-&gt;new("serializer:storable;id:incr", $sid);
    # etc...
<p />
<p />
Following data source components are supported:
<p />
=over 4
<p />
=item *
<p />
B<driver> - CGI::Session driver. Available drivers are L&lt;file|CGI::Session::Driver::file&gt;, L&lt;db_file|CGI::Session::Driver::db_file&gt;, L&lt;mysql|CGI::Session::Driver::mysql&gt; and L&lt;sqlite|CGI::Session::Driver::sqlite&gt;. Third party drivers are welcome. For driver specs consider L&lt;CGI::Session::Driver|CGI::Session::Driver&gt;
<p />
=item *
<p />
B<serializer> - serializer to be used to encode the data structure before saving
in the disk. Available serializers are L&lt;storable|CGI::Session::Serialize::storable&gt;, L&lt;freezethaw|CGI::Session::Serialize::freezethaw&gt; and L&lt;default|CGI::Session::Serialize::default&gt;. Default serializer will use L&lt;Data::Dumper|Data::Dumper&gt;.
<p />
=item *
<p />
B<id> - ID generator to use when new session is to be created. Available ID generator is L&lt;md5|CGI::Session::ID::md5&gt;
<p />
=back
<p />
For example, to get CGI::Session store its data using DB_File and serialize data using <span class="twikiNewLink">FreezeThaw<a href="/bin/edit/TWiki/FreezeThaw?topicparent=TWiki.CGISessionDotPm" rel="nofollow" title="FreezeThaw (this topic does not yet exist; you can create it)">?</a></span>:
<p />
    $s = new CGI::Session("driver:DB_File;serializer:FreezeThaw", undef);
<p />
If called with three arguments, first two will be treated as in the previous example, and third argument will be C&lt;\%dsn_args&gt;, which will be passed to C&lt;$dsn&gt; components (namely, driver, serializer and id generators) for initialization purposes. Since all the $dsn components must initialize to some default value, this third argument should not be required for most drivers to operate properly.
<p />
undef is acceptable as a valid placeholder to any of the above arguments, which will force default behavior.
<p />
=head2 load()
<p />
=head2 load($query||$sid)
<p />
=head2 load($dsn, $query||$sid)
<p />
=head2 load($dsn, $query, \%dsn_args);
<p />
Accepts the same arguments as new(), and also returns a new session object, or
undef on failure.  The difference is, L&lt;new()|/"new"&gt; can create new session if
it detects expired and non-existing sessions, but C&lt;load()&gt; does not.
<p />
C&lt;load()&gt; is useful to detect expired or non-existing sessions without forcing the library to create new sessions. So now you can do something like this:
<p />
    $s = CGI::Session-&gt;load() or die CGI::Session-&gt;errstr();
    if ( $s-&gt;is_expired ) {
        print $s-&gt;header(),
            $cgi-&gt;start_html(),
            $cgi-&gt;p("Your session timed out! Refresh the screen to start new session!")
            $cgi-&gt;end_html();
        exit(0);
    }
<p />
    if ( $s-&gt;is_empty ) {
        $s = $s-&gt;new() or die $s-&gt;errstr;
    }
<p />
Notice, all I<expired> sessions are empty, but not all I<empty> sessions are expired!
<p />
<p />
=head2 id()
<p />
Returns effective ID for a session. Since effective ID and claimed ID can differ, valid session id should always
be retrieved using this method.
<p />
=head2 param($name)
<p />
=head2 param(-name=E<gt>$name)
<p />
Used in either of the above syntax returns a session parameter set to $name or undef if it doesn't exist. If it's called on a deleted method param() will issue a warning but return value is not defined.
<p />
=head2 param($name, $value)
<p />
=head2 param(-name=E<gt>$name, -value=E<gt>$value)
<p />
Used in either of the above syntax assigns a new value to $name parameter,
which can later be retrieved with previously introduced param() syntax. C&lt;$value&gt;
may be a scalar, arrayref or hashref.
<p />
Attempts to set parameter names that start with I<_SESSION_> will trigger
a warning and undef will be returned.
<p />
=head2 param_hashref()
<p />
B<Deprecated>. Use L&lt;dataref()|/"dataref"&gt; instead.
<p />
=head2 dataref()
<p />
Returns reference to session's data table:
<p />
    $params = $s-&gt;dataref();
    $sid = $params-&gt;{_SESSION_ID};
    $name= $params-&gt;{name};
    # etc...
<p />
Useful for having all session data in a hashref, but too risky to update.
<p />
=head2 save_param()
<p />
=head2 save_param($query)
<p />
=head2 save_param($query, \@list)
<p />
Saves query parameters to session object. In other words, it's the same as calling L&lt;param($name, $value)|/"param"&gt; for every single query parameter returned by C&lt;&lt; $query-&gt;param() &gt;&gt;. The first argument, if present, should be either CGI object or any object which can provide param() method. If it's undef, defaults to the return value of L&lt;query()|/"query"&gt;, which returns C&lt;&lt; CGI-&gt;new &gt;&gt;. If second argument is present and is a reference to an array, only those query parameters found in the array will be stored in the session. undef is a valid placeholder for any argument to force default behavior.
<p />
=head2 load_param()
<p />
=head2 load_param($query)
<p />
=head2 load_param($query, \@list)
<p />
Loads session parameters into a query object. The first argument, if present, should be query object, or any other object which can provide param() method. If second argument is present and is a reference to an array, only parameters found in that array will be loaded to the query object.
<p />
=head2 clear()
<p />
=head2 clear('field')
<p />
=head2 clear(\@list)
<p />
Clears parameters from the session object.
<p />
With no parameters, all fields are cleared. If passed a single parameter or a
reference to an array, only the named parameters are cleared.
<p />
=head2 flush()
<p />
Synchronizes data in memory  with the copy serialized by the driver. Call flush() 
if you need to access the session from outside the current session object. You should
at least call flush() before your program exits. 
<p />
As a last resort, CGI::Session will automatically call flush for you just
before the program terminates or session object goes out of scope. This automatic
behavior was the recommended behavior until the 4.x series. Automatic flushing
has since proven to be unreliable, and in some cases is now required in places
that worked with 3.x. For further details see:
<p />
 <a href="http://rt.cpan.org/Ticket/Display.html?id=17541" target="_top">http://rt.cpan.org/Ticket/Display.html?id=17541</a>
 <a href="http://rt.cpan.org/Ticket/Display.html?id=17299" target="_top">http://rt.cpan.org/Ticket/Display.html?id=17299</a>
<p />
=head2 atime()
<p />
Read-only method. Returns the last access time of the session in seconds from epoch. This time is used internally while
auto-expiring sessions and/or session parameters.
<p />
=head2 ctime()
<p />
Read-only method. Returns the time when the session was first created in seconds from epoch.
<p />
=head2 expire()
<p />
=head2 expire($time)
<p />
=head2 expire($param, $time)
<p />
Sets expiration interval relative to L&lt;atime()|/"atime"&gt;.
<p />
If used with no arguments, returns the expiration interval if it was ever set. If no expiration was ever set, returns undef. For backwards compatibility, a method named C&lt;etime()&gt; does the same thing.
<p />
Second form sets an expiration time. This value is checked when previously stored session is asked to be retrieved, and if its expiration interval has passed, it will be expunged from the disk immediately. Passing 0 cancels expiration.
<p />
By using the third syntax you can set the expiration interval for a particular
session parameter, say I&lt;~logged-in&gt;. This would cause the library call clear()
on the parameter when its time is up. Note it only makes sense to set this value to 
something I<earlier> than when the whole session expires.  Passing 0 cancels expiration.
<p />
All the time values should be given in the form of seconds. Following keywords are also supported for your convenience:
<p />
    +-----------+---------------+
<table cellspacing="0" cellpadding="0" border="0" class="twikinetWrapperTable" rules="none">
<tr class="twikinetWrapperTableRow">
<td class="twikinetWrapperTableT twikinetWrapperTableTL"></td>
<td class="twikinetWrapperTableT twikinetWrapperTableTR"></td>
</tr>
<tr class="twikinetWrapperTableRow">
<td colspan="2" class="twikinetWrapperTableMain">
     <table cellspacing="0" id="table1" cellpadding="0" class="twikiTable" rules="cols" border="1">    
		<tr class="twikiTableOdd twikiTableRowdataBgSorted0 twikiTableRowdataBg0">
			<td bgcolor="#ffffff" align="center" valign="top" class="twikiTableCol0 twikiFirstCol twikiLast"> alias </td>
			<td bgcolor="#ffffff" align="center" valign="top" class="twikiTableCol1 twikiLastCol twikiLast"> meaning </td>
		</tr>    </table>
</td>
</tr>
<tr class="twikinetWrapperTableRow">
<td class="twikinetWrapperTableB twikinetWrapperTableBL"></td>
<td class="twikinetWrapperTableB twikinetWrapperTableBR"></td>
</tr>
</table>
    +-----------+---------------+
<table cellspacing="0" cellpadding="0" border="0" class="twikinetWrapperTable" rules="none">
<tr class="twikinetWrapperTableRow">
<td class="twikinetWrapperTableT twikinetWrapperTableTL"></td>
<td class="twikinetWrapperTableT twikinetWrapperTableTR"></td>
</tr>
<tr class="twikinetWrapperTableRow">
<td colspan="2" class="twikinetWrapperTableMain">
           <table cellspacing="0" id="table2" cellpadding="0" class="twikiTable" rules="cols" border="1">    
		<tr class="twikiTableOdd twikiTableRowdataBgSorted0 twikiTableRowdataBg0">
			<td bgcolor="#ffffff" align="center" valign="top" class="twikiTableCol0 twikiFirstCol"> s </td>
			<td bgcolor="#ffffff" align="center" valign="top" class="twikiTableCol1 twikiLastCol"> Second </td>
		</tr>
		<tr class="twikiTableEven twikiTableRowdataBgSorted1 twikiTableRowdataBg1">
			<td bgcolor="#f2f3f6" align="center" valign="top" class="twikiTableCol0 twikiFirstCol"> m </td>
			<td bgcolor="#f2f3f6" align="center" valign="top" class="twikiTableCol1 twikiLastCol"> Minute </td>
		</tr>
		<tr class="twikiTableOdd twikiTableRowdataBgSorted0 twikiTableRowdataBg0">
			<td bgcolor="#ffffff" align="center" valign="top" class="twikiTableCol0 twikiFirstCol"> h </td>
			<td bgcolor="#ffffff" align="center" valign="top" class="twikiTableCol1 twikiLastCol"> Hour </td>
		</tr>
		<tr class="twikiTableEven twikiTableRowdataBgSorted1 twikiTableRowdataBg1">
			<td bgcolor="#f2f3f6" align="center" valign="top" class="twikiTableCol0 twikiFirstCol"> d </td>
			<td bgcolor="#f2f3f6" align="center" valign="top" class="twikiTableCol1 twikiLastCol"> Day </td>
		</tr>
		<tr class="twikiTableOdd twikiTableRowdataBgSorted0 twikiTableRowdataBg0">
			<td bgcolor="#ffffff" align="center" valign="top" class="twikiTableCol0 twikiFirstCol"> w </td>
			<td bgcolor="#ffffff" align="center" valign="top" class="twikiTableCol1 twikiLastCol"> Week </td>
		</tr>
		<tr class="twikiTableEven twikiTableRowdataBgSorted1 twikiTableRowdataBg1">
			<td bgcolor="#f2f3f6" align="center" valign="top" class="twikiTableCol0 twikiFirstCol"> M </td>
			<td bgcolor="#f2f3f6" align="center" valign="top" class="twikiTableCol1 twikiLastCol"> Month </td>
		</tr>
		<tr class="twikiTableOdd twikiTableRowdataBgSorted0 twikiTableRowdataBg0">
			<td bgcolor="#ffffff" align="center" valign="top" class="twikiTableCol0 twikiFirstCol twikiLast"> y </td>
			<td bgcolor="#ffffff" align="center" valign="top" class="twikiTableCol1 twikiLastCol twikiLast"> Year </td>
		</tr>    </table>
</td>
</tr>
<tr class="twikinetWrapperTableRow">
<td class="twikinetWrapperTableB twikinetWrapperTableBL"></td>
<td class="twikinetWrapperTableB twikinetWrapperTableBR"></td>
</tr>
</table>
    +-----------+---------------+
<p />
Examples:
<p />
    $session-&gt;expire("2h");                # expires in two hours
    $session-&gt;expire(0);                   # cancel expiration
    $session-&gt;expire("~logged-in", "10m"); # expires '~logged-in' parameter after 10 idle minutes
<p />
Note: all the expiration times are relative to session's last access time, not to its creation time. To expire a session immediately, call L&lt;delete()|/"delete"&gt;. To expire a specific session parameter immediately, call L&lt;clear([$name])|/"clear"&gt;.
<p />
<p />
=head2 is_new()
<p />
Returns true only for a brand new session.
<p />
=head2 is_expired()
<p />
Tests whether session initialized using L&lt;load()|/"load"&gt; is to be expired. This method works only on sessions initialized with load():
<p />
    $s = CGI::Session-&gt;load() or die CGI::Session-&gt;errstr;
    if ( $s-&gt;is_expired ) {
        die "Your session expired. Please refresh";
    }
    if ( $s-&gt;is_empty ) {
        $s = $s-&gt;new() or die $s-&gt;errstr;
    }
<p />
<p />
=head2 is_empty()
<p />
Returns true for sessions that are empty. It's preferred way of testing whether requested session was loaded successfully or not:
<p />
    $s = CGI::Session-&gt;load($sid);
    if ( $s-&gt;is_empty ) {
        $s = $s-&gt;new();
    }
<p />
Actually, the above code is nothing but waste. The same effect could've been achieved by saying:
<p />
    $s = CGI::Session-&gt;new( $sid );
<p />
L&lt;is_empty()|/"is_empty"&gt; is useful only if you wanted to catch requests for expired sessions, and create new session afterwards. See L&lt;is_expired()|/"is_expired"&gt; for an example.
<p />
=head2 delete()
<p />
Deletes a session from the data store and empties session data from memory, completely, so subsequent read/write requests on the same object will fail. Technically speaking, it will only set object's status to I<STATUS_DELETED> and will trigger L&lt;flush()|/"flush"&gt;, and flush() will do the actual removal.
<p />
=head2 find( \&amp;code )
<p />
=head2 find( $dsn, \&amp;code )
<p />
=head2 find( $dsn, \&amp;code, \%dsn_args )
<p />
Experimental feature. Executes \&amp;code for every session object stored in disk, passing initialized CGI::Session object as the first argument of \&amp;code. Useful for housekeeping purposes, such as for removing expired sessions. Following line, for instance, will remove sessions already expired, but are still in disk:
<p />
The following line, for instance, will remove sessions already expired, but which are still on disk:
<p />
    CGI::Session-&gt;find( sub {} );
<p />
Notice, above \&amp;code didn't have to do anything, because load(), which is called to initialize sessions inside find(), will automatically remove expired sessions. Following example will remove all the objects that are 10+ days old:
<p />
    CGI::Session-&gt;find( \&amp;purge );
    sub purge {
        my ($session) = @_;
        next if $session-&gt;is_empty;    # &lt;-- already expired?!
        if ( ($session-&gt;ctime + 3600*240) &lt;= time() ) {
            $session-&gt;delete() or warn "couldn't remove " . $session-&gt;id . ": " . $session-&gt;errstr;
        }
    }
<p />
B<Note>: find will not change the modification or access times on the sessions it returns.
<p />
Explanation of the 3 parameters to C&lt;find()&gt;:
<p />
=over 4
<p />
=item $dsn
<p />
This is the DSN (Data Source Name) used by CGI::Session to control what type of
sessions you previously created and what type of sessions you now wish method
C&lt;find()&gt; to pass to your callback.
<p />
The default value is defined above, in the docs for method C&lt;new()&gt;, and is
'driver:file;serializer:default;id:md5'.
<p />
Do not confuse this DSN with the DSN arguments mentioned just below, under \%dsn_args.
<p />
=item \&amp;code
<p />
This is the callback provided by you (i.e. the caller of method C&lt;find()&gt;)
which is called by CGI::Session once for each session found by method C&lt;find()&gt;
which matches the given $dsn.
<p />
There is no default value for this coderef.
<p />
When your callback is actually called, the only parameter is a session. If you
want to call a subroutine you already have with more parameters, you can
achieve this by creating an anonymous subroutine that calls your subroutine
with the parameters you want. For example:
<p />
    CGI::Session-&gt;find($dsn, sub { my_subroutine( @_, 'param 1', 'param 2' ) } );
    CGI::Session-&gt;find($dsn, sub { $coderef-&gt;( @_, $extra_arg ) } );
<p />
Or if you wish, you can define a sub generator as such:
<p />
    sub coderef_with_args {
        my ( $coderef, @params ) = @_;
        return sub { $coderef-&gt;( @_, @params ) };
    }
<p />
    CGI::Session-&gt;find($dsn, coderef_with_args( $coderef, 'param 1', 'param 2' ) );
<p />
=item \%dsn_args
<p />
If your $dsn uses file-based storage, then this hashref might contain keys such as:
<p />
    {
        Directory =&gt; Value 1,
        <span class="twikiNewLink">NoFlock<a href="/bin/edit/TWiki/NoFlock?topicparent=TWiki.CGISessionDotPm" rel="nofollow" title="NoFlock (this topic does not yet exist; you can create it)">?</a></span>   =&gt; Value 2,
        UMask     =&gt; Value 3
    }
<p />
If your $dsn uses db-based storage, then this hashref contains (up to) 3 keys, and looks like:
<p />
    {
        <span class="twikiNewLink">DataSource<a href="/bin/edit/TWiki/DataSource?topicparent=TWiki.CGISessionDotPm" rel="nofollow" title="DataSource (this topic does not yet exist; you can create it)">?</a></span> =&gt; Value 1,
        User       =&gt; Value 2,
        Password   =&gt; Value 3
    }
<p />
These 3 form the DSN, username and password used by DBI to control access to your database server,
and hence are only relevant when using db-based sessions.
<p />
The default value of this hashref is undef.
<p />
=back
<p />
B&lt;Note:&gt; find() is meant to be convenient, not necessarily efficient. It's best suited in cron scripts.
<p />
=head1 MISCELLANEOUS METHODS
<p />
=head2 remote_addr()
<p />
Returns the remote address of the user who created the session for the first time. Returns undef if variable REMOTE_ADDR wasn't present in the environment when the session was created.
<p />
<p />
=head2 errstr()
<p />
Class method. Returns last error message from the library.
<p />
=head2 dump()
<p />
Returns a dump of the session object. Useful for debugging purposes only.
<p />
=head2 header()
<p />
Replacement for L&lt;CGI.pm|CGI&gt;'s header() method. Without this method, you usually need to create a CGI::Cookie object and send it as part of the HTTP header:
<p />
    $cookie = CGI::Cookie-&gt;new(-name=&gt;$session-&gt;name, -value=&gt;$session-&gt;id);
    print $cgi-&gt;header(-cookie=&gt;$cookie);
<p />
You can minimize the above into:
<p />
    print $session-&gt;header();
<p />
It will retrieve the name of the session cookie from C&lt;$session-&gt;name()&gt; which defaults to C&lt;$CGI::Session::NAME&gt;. If you want to use a different name for your session cookie, do something like following before creating session object:
<p />
    CGI::Session-&gt;name("MY_SID");
    $session = new CGI::Session(undef, $cgi, \%attrs);
<p />
Now, $session-&gt;header() uses "MY_SID" as a name for the session cookie.
<p />
=head2 query()
<p />
Returns query object associated with current session object. Default query object class is L&lt;CGI.pm|CGI&gt;.
<p />
=head2 DEPRECATED METHODS
<p />
These methods exist solely for for compatibility with CGI::Session 3.x.
<p />
=head3 close()
<p />
Closes the session. Using flush() is recommended instead, since that's exactly what a call
to close() does now.
<p />
=head1 DISTRIBUTION
<p />
CGI::Session consists of several components such as L&lt;drivers|"DRIVERS"&gt;, L&lt;serializers|"SERIALIZERS"&gt; and L<id generators|"ID GENERATORS">. This section lists what is available.
<p />
=head2 DRIVERS
<p />
Following drivers are included in the standard distribution:
<p />
=over 4
<p />
=item *
<p />
L&lt;file|CGI::Session::Driver::file&gt; - default driver for storing session data in plain files. Full name: B&lt;CGI::Session::Driver::file&gt;
<p />
=item *
<p />
L&lt;db_file|CGI::Session::Driver::db_file&gt; - for storing session data in <span class="twikiNewLink">BerkelyDB<a href="/bin/edit/TWiki/BerkelyDB?topicparent=TWiki.CGISessionDotPm" rel="nofollow" title="BerkelyDB (this topic does not yet exist; you can create it)">?</a></span>. Requires: L<DB_File>.
Full name: B&lt;CGI::Session::Driver::db_file&gt;
<p />
=item *
<p />
L&lt;mysql|CGI::Session::Driver::mysql&gt; - for storing session data in <span class="twikiNewLink">MySQL<a href="/bin/edit/TWiki/MySQL?topicparent=TWiki.CGISessionDotPm" rel="nofollow" title="MySQL (this topic does not yet exist; you can create it)">?</a></span> tables. Requires L&lt;DBI|DBI&gt; and L&lt;DBD::mysql|DBD::mysql&gt;.
Full name: B&lt;CGI::Session::Driver::mysql&gt;
<p />
=item *
<p />
L&lt;sqlite|CGI::Session::Driver::sqlite&gt; - for storing session data in SQLite. Requires L&lt;DBI|DBI&gt; and L&lt;DBD::SQLite|DBD::SQLite&gt;.
Full name: B&lt;CGI::Session::Driver::sqlite&gt;
<p />
=back
<p />
=head2 SERIALIZERS
<p />
=over 4
<p />
=item *
<p />
L&lt;default|CGI::Session::Serialize::default&gt; - default data serializer. Uses standard L&lt;Data::Dumper|Data::Dumper&gt;.
Full name: B&lt;CGI::Session::Serialize::default&gt;.
<p />
=item *
<p />
L&lt;storable|CGI::Session::Serialize::storable&gt; - serializes data using L<Storable>. Requires L<Storable>.
Full name: B&lt;CGI::Session::Serialize::storable&gt;.
<p />
=item *
<p />
L&lt;freezethaw|CGI::Session::Serialize::freezethaw&gt; - serializes data using L<FreezeThaw>. Requires L<FreezeThaw>.
Full name: B&lt;CGI::Session::Serialize::freezethaw&gt;
<p />
=item *
<p />
L&lt;yaml|CGI::Session::Serialize::yaml&gt; - serializes data using YAML. Requires L<YAML> or L&lt;YAML::Syck&gt;.
Full name: B&lt;CGI::Session::Serialize::yaml&gt;
<p />
=item *
<p />
L&lt;json|CGI::Session::Serialize::json&gt; - serializes data using JSON. Requires L&lt;JSON::Syck&gt;.
Full name: B&lt;CGI::Session::Serialize::json&gt;
<p />
=back
<p />
=head2 ID GENERATORS
<p />
Following ID generators are available:
<p />
=over 4
<p />
=item *
<p />
L&lt;md5|CGI::Session::ID::md5&gt; - generates 32 character long hexadecimal string. Requires L&lt;Digest::MD5|Digest::MD5&gt;.
Full name: B&lt;CGI::Session::ID::md5&gt;.
<p />
=item *
<p />
L&lt;incr|CGI::Session::ID::incr&gt; - generates incremental session ids.
<p />
=item *
<p />
L&lt;static|CGI::Session::ID::static&gt; - generates static session ids. B&lt;CGI::Session::ID::static&gt;
<p />
=back
<p />
<p />
=head1 CREDITS
<p />
CGI::Session evolved to what it is today with the help of following developers. The list doesn't follow any strict order, but somewhat chronological. Specifics can be found in F<Changes> file
<p />
=over 4
<p />
=item Andy Lester 
<p />
=item Brian King E<lt>mrbbking@mac.comE<gt>
<p />
=item Olivier Dragon E<lt>dragon@shadnet.shad.caE<gt>
<p />
=item Adam Jacob E<lt>adam@sysadminsith.orgE<gt>
<p />
=item Igor Plisco E<lt>igor@plisco.ruE<gt>
<p />
=item Mark Stosberg 
<p />
=item Matt <span class="twikiNewLink">LeBlanc<a href="/bin/edit/TWiki/LeBlanc?topicparent=TWiki.CGISessionDotPm" rel="nofollow" title="LeBlanc (this topic does not yet exist; you can create it)">?</a></span> E<lt>mleblanc@cpan.orgE<gt>
<p />
=item Shawn Sorichetti
<p />
=back
<p />
=head1 COPYRIGHT
<p />
Copyright (C) 2001-2005 Sherzod Ruzmetov E<lt>sherzodr@cpan.orgE<gt>. All rights reserved.
This library is free software. You can modify and or distribute it under the same terms as Perl itself.
<p />
=head1 PUBLIC CODE REPOSITORY
<p />
You can see what the developers have been up to since the last release by
checking out the code repository. You can browse the Subversion repository from here:
<p />
 <a href="http://svn.cromedome.net/" target="_top">http://svn.cromedome.net/</a>
<p />
Or check it directly with C<svn> from here:
<p />
 svn://svn.cromedome.net/CGI-Session
<p />
=head1 SUPPORT
<p />
If you need help using CGI::Session consider the mailing list. You can ask the list by sending your questions to
<a href="mailto&#58;cgi&#45;session&#45;user&#64;lists&#46;sourceforge&#46;net">cgi-session-user&#64;lists.sourceforge.net</a> .
<p />
You can subscribe to the mailing list at <a href="https://lists.sourceforge.net/lists/listinfo/cgi-session-user" target="_top">https://lists.sourceforge.net/lists/listinfo/cgi-session-user</a> .
<p />
Bug reports can be submitted at <a href="http://rt.cpan.org/NoAuth/ReportBug.html?Queue=CGI-Session" target="_top">http://rt.cpan.org/NoAuth/ReportBug.html?Queue=CGI-Session</a>
<p />
=head1 AUTHOR
<p />
Sherzod Ruzmetov E<lt>sherzodr@cpan.orgE<gt>, <a href="http://author.handalak.com/" target="_top">http://author.handalak.com/</a>
<p />
Mark Stosberg became a co-maintainer during the development of 4.0. C&lt;markstos@cpan.org&gt;.
<p />
=head1 SEE ALSO
<p />
=over 4
<p />
=item *
<p />
L&lt;CGI::Session::Tutorial|CGI::Session::Tutorial&gt; - extended CGI::Session manual
<p />
=item *
<p />
B<RFC 2965> - "HTTP State Management Mechanism" found at <a href="ftp://ftp.isi.edu/in-notes/rfc2965.txt" target="_top">ftp://ftp.isi.edu/in-notes/rfc2965.txt</a>
<p />
=item *
<p />
L&lt;CGI|CGI&gt; - standard CGI library
<p />
=item *
<p />
L&lt;Apache::Session|Apache::Session&gt; - another fine alternative to CGI::Session
<p />
=back</div><!-- /patternTopic-->
<p />
<p />
</div><!-- /patternContent-->
<hr />
This topic: TWiki<span class='twikiSeparator'>&nbsp;&gt;&nbsp;</span>CGISessionDotPm</span> <br />    
Topic revision: r1 - 22 Jan 2008 - 03:21:31 - <a href="/bin/view/Main/TWikiContributor" class="twikiLink">TWikiContributor</a>
</div><!-- /patternMainContents-->
</div><!-- /patternMain-->
</div><!-- /patternFloatWrap-->
<div class="clear">&nbsp;</div>
</div><!-- /patternOuter--><div id="patternBottomBar"><div id="patternBottomBarContents"><div id="twikinetBadge"><a href="http://www.twiki.net/"><img src="https://twiki.opensciencegrid.org/twiki/pub/TWiki/TWikiNetSkin/twiki-badge-88x31.gif" alt="TWIKI.NET" width="88" height="31" border="0" /></a></div><!--/twikinetBadge--><div id="patternWebBottomBar"><p>
<font size="-1">
TWiki |
<a href="https://ticket.grid.iu.edu/goc/twiki">Report Bugs</a> |
<a href="https://twiki.grid.iu.edu/bin/view/Operations/IUPrivacyPolicy">Privacy Policy</a>
</p>
<p>
<font size="-2">
<span class="twikiRight"> <a href="http://twiki.org/"><img src="/twiki/pub/TWiki/TWikiLogos/T-logo-80x15.gif" alt="This site is powered by the TWiki collaboration platform" width="80" height="15" title="This site is powered by the TWiki collaboration platform" border="0" /></a></span>Copyright by the contributing authors. All material on this collaboration platform is the property of the contributing authors..
</font>
</p></div><!--/patternWebBottomBar--></div><!-- /patternBottomBarContents--></div><!-- /patternBottomBar-->
</div><!-- /patternPage-->
</div><!-- /patternPageShadow-->
</div><!-- /patternScreen-->
</body></html>
<p />