<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en_US" lang="en_US">
<head>
<link rel="stylesheet" href="https://twiki.opensciencegrid.org/twiki/pub/TWiki/HeadlinesPlugin/style.css" type="text/css" media="all" />
<title> Running_OpenSees_on_OSG_b &lt; Engagement &lt; TWiki    </title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="icon" href="/twiki/pub/Engagement/WebPreferences/favicon.ico    " type="image/x-icon" />
<link rel="shortcut icon" href="/twiki/pub/Engagement/WebPreferences/favicon.ico    " type="image/x-icon" />
<link rel="alternate" href="https://twiki.opensciencegrid.org/bin/edit/Engagement/Running_OpenSees_on_OSG_b?_T=16 Feb 2017" type="application/x-wiki" title="edit Running_OpenSees_on_OSG_b" />
<meta name="SCRIPTURLPATH" content="/bin" />
<meta name="SCRIPTSUFFIX" content="" />
<meta name="TEXT_JUMP" content="Jump" />
<meta name="TEXT_SEARCH" content="Search" />
<meta name="TEXT_NUM_TOPICS" content="Number of topics:" />
<meta name="TEXT_MODIFY_SEARCH" content="Modify search" />
<meta name="robots" content="noindex" /><link rel="alternate" type="application/rss+xml" title="RSS Feed" href="/bin/view/Engagement/WebRss" />    
<base href="https://twiki.opensciencegrid.org/bin/view/Engagement/Running_OpenSees_on_OSG_b"></base>
<!--BEHAVIOURCONTRIB--><script type="text/javascript" src="/twiki/pub/TWiki/BehaviourContrib/behaviour.compressed.js"></script>
<script type="text/javascript" src="/twiki/pub/TWiki/TWikiJavascripts/twikilib.js"></script>
<script type="text/javascript" src="/twiki/pub/TWiki/TWikiJavascripts/twikiWindow.js"></script>
<script type="text/javascript" src="/twiki/pub/TWiki/TWikiJavascripts/twikiEvent.js"></script>
<script type="text/javascript" src="/twiki/pub/TWiki/TWikiJavascripts/twikiHTML.js"></script>
<script type="text/javascript" src="/twiki/pub/TWiki/TWikiJavascripts/twikiCSS.js"></script>
<script type="text/javascript" src="/twiki/pub/TWiki/TWikiJavascripts/twikiForm.js"></script>
<script type="text/javascript" src="/twiki/pub/TWiki/PatternSkin/pattern.js"></script><style type="text/css" media="all">
@import url('/twiki/pub/TWiki/TWikiTemplates/base.css');
</style><script type="text/javascript" src="/twiki/pub/TWiki/TWikiJavascripts/twikiStyles.js"></script><style type="text/css" media="all">


</style>
<style type="text/css" media="all">
@import url("/twiki/pub/TWiki/TWikiNetSkin/layout.css");
@import url("/twiki/pub/TWiki/TWikiNetSkin/style.css");
@import url("/twiki/pub/TWiki/TWikiNetSkin/colors.css");
@import url("/twiki/pub/TWiki/TWikiNetSkin/rounded_corners.css");
</style>
<style type="text/css" media="all">
	/* Styles that are set using variables */
	#patternLeftBar .patternWebIndicator,
	.patternBookView .twikiTopRow {
		background-color:#D0D0D0;
	}
	.patternBookView {
		border-color:#D0D0D0;
	}
	.patternPreviewPage #patternMain {
		/* uncomment to set the preview image */
		/*background-image:url("/twiki/pub/TWiki/PreviewBackground/preview2bg.gif    ");*/
	}
	
</style><style type="text/css" media="all">



</style>
<style type="text/css" media="all">
	@import url("/twiki/pub/TWiki/TWikiNetSkin/print.css");
</style><!--GOOGLEANALYTICSPLUGIN--><!-- Google Analytics script -->
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-69012-21']);
  _gaq.push(['_setDomainName', 'none']);
  _gaq.push(['_setAllowLinker', true]);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
</head>
<body class="patternViewPage patternPrintPage">
<a name="PageTop"></a>
<div id="patternScreen">
<div id="patternPageShadow">
<div id="patternPage">
<div id="patternOuter">
<div id="patternFloatWrap">
<div id="patternMain">
<div id="patternMainContents">
<div class="patternContent"><div class="patternTopic"> <div id="content">
<p />
<h1 class="title">OpenSees OSG Trash/Integration Details</h1>
<p />
<p />
<div id="table-of-contents">
<h2 class="twikinetRoundedAttachments"><span class="twikinetHeader"><a name="Table_of_Contents"></a> Table of Contents </span></h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Introduction </a></li>
<li><a href="#sec-2">2 How the Task Was Parallelized to Run on the Grid </a></li>
<li><a href="#sec-3">3 Get a proxy certificate </a></li>
<li><a href="#sec-4">4 Create a Job Submission file </a>
<ul>
<li><a href="#sec-4_1">4.1 Manual Approach </a>
<ul>
<li><a href="#sec-4_1_1">4.1.1 opensees_input_file </a></li>
<li><a href="#sec-4_1_2">4.1.2 opensees_output_directory </a></li>
<li><a href="#sec-4_1_3">4.1.3 opensees_num_runs </a></li>
</ul>
</li>
<li><a href="#sec-4_2">4.2 (Mostly) Automatic Approach </a></li>
</ul>
</li>
<li><a href="#sec-5">5 Automated Tests </a></li>
<li><a href="#sec-6">6 A More Realistic Test Case </a></li>
<li><a href="#sec-7">7 Monitoring Jobs </a></li>
<li><a href="#sec-8">8 Troubleshooting and Resubmitting Failed Jobs </a>
<ul>
<li><a href="#sec-8_1">8.1 Resubmitting DAGman Jobs </a></li>
<li><a href="#sec-8_2">8.2 Resubmitting Ordinary Jobs </a></li>
</ul>
</li>
<li><a href="#sec-9">9 Untarring multiple output files at once </a></li>
<li><a href="#sec-10">10 Example of Monitoring Jobs </a></li>
<li><a href="#sec-11">11 Getting Email Output from Jobs </a></li>
</ul>
</div>
</div>
<p />
<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Introduction </h2>
<div class="outline-text-2" id="text-1">
<p />
<p />
<p>
OSG consistes of many <i>sites</i>, each of which is a
network of computers administered by a single
organization. The computers at any particular site
typically have the same software configuration, and
have access to a shared file system for the site.
</p>
<p>
We are going to be running jobs using the Condor
distributed computing system. More specifically, in
this case Condor will actually be running on top of a
system called glideinWMS, which makes it easier to
run at many sites, but that is mostly transparent to
us.
</p>
<p>
Background reading: <a href="https://twiki.grid.iu.edu/bin/view/Documentation/UsingTheGrid">UsingTheGrid</a>.
</p>
</div>
<p />
</div>
<p />
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> How the Task Was Parallelized to Run on the Grid </h2>
<div class="outline-text-2" id="text-2">
<p />
<p />
<p>
The <span class="twikiNewLink">OpenSees<a href="/bin/edit/Engagement/OpenSees?topicparent=Engagement.Running_OpenSees_on_OSG_b" rel="nofollow" title="OpenSees (this topic does not yet exist; you can create it)">?</a></span> setup in this case has two key files:
</p>
<ul>
<li>
<span class="twikiNewLink">SAClaRecords<a href="/bin/edit/Engagement/SAClaRecords?topicparent=Engagement.Running_OpenSees_on_OSG_b" rel="nofollow" title="SAClaRecords (this topic does not yet exist; you can create it)">?</a></span>.txt:: This gives information on the ground acceleration
records to be used. Each line of the file indicates three things:
the filename of the .txt file containing the ground acceleration
time history, the total time of the ground motion, and the time
increment between individual acceleration values (all separated by
commas).
<p />
</li>
<li>
gmMP.tcl:: A Tcl script that parallelizes the running of the
analyses. This gives the ability to subject one building (or
structure) model to multiple acceleration records simultaneously.
</li>
</ul>
<p />
<p />
<p>
The parallelization to run on OSG works like this: The submit file
sets an environment variable, OPENSEES_PROCESS_ID, from the condor
$(Process) macro. Then, at the worker node, gmMP.tcl skips over the
first $OPENSEES_PROCESS_ID - 1 lines of the <span class="twikiNewLink">SAClaRecords<a href="/bin/edit/Engagement/SAClaRecords?topicparent=Engagement.Running_OpenSees_on_OSG_b" rel="nofollow" title="SAClaRecords (this topic does not yet exist; you can create it)">?</a></span>.txt file, and
does the processing for the ground acceleration record on the next
line.
</p>
</div>
<p />
</div>
<p />
<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Get a proxy certificate </h2>
<div class="outline-text-2" id="text-3">
<p />
<p />
<p>
A proxy certificate is necessary to have permission
to run on OSG. The commands to get one are:
</p>
<pre class="example">
. /opt/osg/osg-1.2/setup.sh
</pre>
<p />
<p />
<p>
This command sets up the environment so that
condor and its associated commands (including the
ones to get a proxy) work.
</p>
<pre class="example">
voms-proxy-init -valid 72:00 --voms Engage:/Engage/NEES
</pre>
<p />
<p />
<p>
This gets a proxy certificate good for 3 days
good for running as the Engage VO in the NEES group.
Can add the "-debug" option if there are problems.
</p>
<pre class="example">
voms-proxy-info --all
</pre>
<p />
<p />
<p>
This lists some information about the new proxy.
</p>
</div>
<p />
</div>
<p />
<div id="outline-container-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Create a Job Submission file </h2>
<div class="outline-text-2" id="text-4">
<p />
<p />
<p />
</div>
<p />
<div id="outline-container-4_1" class="outline-3">
<h3 id="sec-4_1"><span class="section-number-3">4.1</span> Manual Approach </h3>
<div class="outline-text-3" id="text-4_1">
<p />
<p />
<p>
There is a kind of template file, <i>openseesA.csf</i>,
included in the distribution. The three variables that
need to change from run to run are at the top of the file:
</p>
<p />
</div>
<p />
<div id="outline-container-4_1_1" class="outline-4">
<h4 id="sec-4_1_1"><span class="section-number-4">4.1.1</span> opensees_input_file </h4>
<div class="outline-text-4" id="text-4_1_1">
<p />
<p />
<p>
This has to be in gzipped tar format. At the top
level there should be an <span class="twikiNewLink">OpenSees<a href="/bin/edit/Engagement/OpenSees?topicparent=Engagement.Running_OpenSees_on_OSG_b" rel="nofollow" title="OpenSees (this topic does not yet exist; you can create it)">?</a></span> executable, and a
single directory that contains the <span class="twikiNewLink">OpenSees<a href="/bin/edit/Engagement/OpenSees?topicparent=Engagement.Running_OpenSees_on_OSG_b" rel="nofollow" title="OpenSees (this topic does not yet exist; you can create it)">?</a></span> input
files. Both the executable and the directory
can have any valid name, but there must be only
one of each.
</p>
</div>
<p />
</div>
<p />
<div id="outline-container-4_1_2" class="outline-4">
<h4 id="sec-4_1_2"><span class="section-number-4">4.1.2</span> opensees_output_directory </h4>
<div class="outline-text-4" id="text-4_1_2">
<p />
<p />
<p>
This is a directory on the submit host where the
output from all of the runs from a particular
condor_submit command (see below) should go. It
just needs to be different from any other directory
names where output goes.
</p>
</div>
<p />
</div>
<p />
<div id="outline-container-4_1_3" class="outline-4">
<h4 id="sec-4_1_3"><span class="section-number-4">4.1.3</span> opensees_num_runs </h4>
<div class="outline-text-4" id="text-4_1_3">
<p />
<p />
<p>
This is the number of separate runs required. In this prototype
integration it is typically the number of lines in the
<i>SAClaRecords.txt</i> file.
</p>
</div>
</div>
<p />
</div>
<p />
<div id="outline-container-4_2" class="outline-3">
<h3 id="sec-4_2"><span class="section-number-3">4.2</span> (Mostly) Automatic Approach </h3>
<div class="outline-text-3" id="text-4_2">
<p />
<p />
<p>
There is a script called setup_opensees.pl that
partially automates this process. Typing
"setup_opensees.pl -h" will print
out its usage, which currently says
</p>
<p />
<p />
<p />
<pre class="example">This script modifies a template submit file to have
the proper parameters for running opensees, and also
creates the tar file and a directory for the output.
  This script should be run from the directory where
the submit will occur.

-c [filename]
    Input condor submit file to be used as a template
    to run the job.  This can be an actual working
    submit file, but needs to have the
    opensees_input_file, opensees_output_directory,
    and opensees_num_runs macros at the top.

-i [name of directory]
   Name of directory that contains the input
   data for OpenSees, like exampleTeraGridCode/.

-e [filename]
   Path to the OpenSees executable.

Optional arguments:
-a
   Submit using dagman. If the -a
   argument is not present then this script only
   creates a regular condor submit file.

-d [name of directory]
    This script will create a directory with
    this name on the submit host. All the files
    specifically associated with the job,
    including the output files after the job finishes,
    go here. This must be just a simple name
    without any "/" directory separators.

    Note: If -d is not present, then the script will
    call the job directory
      &lt;executable name&gt;_&lt;input dir&gt;_X
    where &lt;executable name&gt; is from the -e switch,
    &lt;input dir&gt; is from the -i switch, and X is a
    number chosen so the resulting name does not conflict
    with other file names in the current directory.

    In all cases, the submit file, input tar file,
    and (if needed) dag input file will be called
    &lt;job_directory&gt;.csf, &lt;job_directory&gt;.tgz, and
    &lt;job_directory&gt;.dag respectively where
    &lt;job_directory&gt; is as described in the previous
    paragraph.

-l
    Submit a job that is expected to last a long
    time, meaning more than about 10 hours but less
    than about 37 hours. This switch should not be
    used for shorter jobs since it requests resources
    that could be used by jobs that really are long.

    *This is still an experimental feature.*
</pre>
<p />
<p />
<p />
<p>
An example of this command is:
</p>
<p />
<p />
<p />
<pre class="example">./setup_opensees.pl -c openseesA.csf -i exampleTeraGridCodeZZZ \
    -e ./OpenSees -a
</pre>
<p />
<p />
<p />
<p>
Here the inputs (files or directories that must already exist)
are
</p><dl>
<dt><i>openseesA.csf</i></dt><dd>
is a template submission file,
</dd>
<dt><i>exampleTeraGridCodeZZZ</i></dt><dd>
has the input data for <span class="twikiNewLink">OpenSees<a href="/bin/edit/Engagement/OpenSees?topicparent=Engagement.Running_OpenSees_on_OSG_b" rel="nofollow" title="OpenSees (this topic does not yet exist; you can create it)">?</a></span>, and
</dd>
<dt><i>OpenSees</i></dt><dd>
is the executable to run on the worker node.
</dd>
</dl>
<p />
<p />
<p>
The script will also print a suggested command to run the
job, in this case:<br/>
</p><pre class="example">
  condor_submit_dag -usedagdir OpenSees_exampleTeraGridCodeZZZ_4/OpenSees_exampleTeraGridCodeZZZ_4.dag
</pre>
<p />
<p />
<p>
Here setup_opensees.pl has constructed its own name for the
directory (<span class="twikiNewLink">OpenSees<a href="/bin/edit/Engagement/OpenSees?topicparent=Engagement.Running_OpenSees_on_OSG_b" rel="nofollow" title="OpenSees (this topic does not yet exist; you can create it)">?</a></span>_exampleTeraGridCodeZZZ_4). The -d option can
be used to specify a more-decriptive or just short one.
</p>
<p>
It is possible to stop the jobs before they're done
by issuing a command like
</p><pre class="example">
condor_rm [cluster #]
</pre>
<p />
<p>where the cluster number is printed by condor_submit,
or is listed as the number before the dot by condor_q (see below).
</p>
<p>
Further reading:
<a href="http://www.cs.wisc.edu/condor/manual/v7.5/condor_submit.html">http://www.cs.wisc.edu/condor/manual/v7.5/condor\_submit.html</a>
For the -a option:
<a href="http://www.cs.wisc.edu/condor/manual/v7.5/condor_submit_dag.html">http://www.cs.wisc.edu/condor/manual/v7.5/condor\_submit\_dag.html</a>
<a href="http://www.cs.wisc.edu/condor/manual/v7.5/2_10DAGMan_Applications.html#sec:DAGLotsaJobs">http://www.cs.wisc.edu/condor/manual/v7.5/2\_10DAGMan\_Applications.html#sec:DAGLotsaJobs</a>
</p>
</div>
</div>
<p />
</div>
<p />
<div id="outline-container-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Automated Tests </h2>
<div class="outline-text-2" id="text-5">
<p />
<p />
<p>
There is a script called test_opensees.pl that will
try running a couple <span class="twikiNewLink">OpenSees<a href="/bin/edit/Engagement/OpenSees?topicparent=Engagement.Running_OpenSees_on_OSG_b" rel="nofollow" title="OpenSees (this topic does not yet exist; you can create it)">?</a></span> test cases. It expects
the directory exampleTeraGridCodeZZZ and the
executable <span class="twikiNewLink">OpenSees<a href="/bin/edit/Engagement/OpenSees?topicparent=Engagement.Running_OpenSees_on_OSG_b" rel="nofollow" title="OpenSees (this topic does not yet exist; you can create it)">?</a></span> to be in the same directory from
which it is run. It may be run as follows:
</p>
<pre class="example">
./test_opensees.pl
</pre>
<p />
<p />
<p>
and doesn't need any arguments.
</p>
</div>
<p />
</div>
<p />
<div id="outline-container-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> A More Realistic Test Case </h2>
<div class="outline-text-2" id="text-6">
<p />
<ol>
<li>
Suppose the directory with the input data is called
<code>exampleTeraGridCode_rl</code>. Make sure to to modify
userDir in gmMP.tcl to say
<pre class="example">
set userDir "[pwd]/exampleTeraGridCode_rl"
</pre>
<p />
<p>(This is specific to this particular user's <span class="twikiNewLink">OpenSees<a href="/bin/edit/Engagement/OpenSees?topicparent=Engagement.Running_OpenSees_on_OSG_b" rel="nofollow" title="OpenSees (this topic does not yet exist; you can create it)">?</a></span> setup.)
</p>
</li>
<li>
If not already done, set up the environment with
<code>. /opt/osg/osg-1.2/setup.sh</code>, and the proxy with
<code>voms-proxy-init -valid 72:00 --voms     Engage:/Engage/NEES</code>.
<p />
</li>
<li>
Run this command to set things up:
<pre class="example">
$ ./setup_opensees.pl -c openseesA.csf -i exampleTeraGridCode_rl -e ./OpenSees -a
Using SAClaRecords.txt as the SACla file.
num_runs: 60
Proxy certificate is valid for 52.27 more hours.
Job directory:   OpenSees_exampleTeraGridCode_rl_8
Suggested command:  condor_submit_dag -usedagdir OpenSees_exampleTeraGridCode_rl_8/OpenSees_exampleTeraGridCode_rl_8.dag
</pre>
<p />
<p />
<p>
All the output will go to the directory indicated
by the "Job directory" line, which in this example
is <code>OpenSees_exampleTeraGridCode_rl_8</code>.  Use the
<code>-l</code> flag if the jobs are expected to run for more
than 10 hours.
</p>
</li>
<li>
If needed, fix the <code>.dag</code> file to have the runs
you'd like, although it may be easier to change the
SACla file before Step 3.
<p />
</li>
<li>
Submit job using the suggested command from setup_opensees.pl:
<pre class="example">
$ condor_submit_dag -usedagdir OpenSees_exampleTeraGridCode_rl_8/OpenSees_exampleTeraGridCode_rl_8.dag

-----------------------------------------------------------------------
File for submitting this DAG to Condor           : OpenSees_exampleTeraGridCode_rl_8/OpenSees_exampleTeraGridCode_rl_8.dag.condor.sub
Log of DAGMan debugging messages                 : OpenSees_exampleTeraGridCode_rl_8/OpenSees_exampleTeraGridCode_rl_8.dag.dagman.out
Log of Condor library output                     : OpenSees_exampleTeraGridCode_rl_8/OpenSees_exampleTeraGridCode_rl_8.dag.lib.out
Log of Condor library error messages             : OpenSees_exampleTeraGridCode_rl_8/OpenSees_exampleTeraGridCode_rl_8.dag.lib.err
Log of the life of condor_dagman itself          : OpenSees_exampleTeraGridCode_rl_8/OpenSees_exampleTeraGridCode_rl_8.dag.dagman.log

Submitting job(s).
1 job(s) submitted to cluster 2723.
-----------------------------------------------------------------------
</pre>
<p />
<p />
</li>
<li>
Check its progress:
<pre class="example">
$ condor_q -dag 2723


-- Submitter: glidein.unl.edu : &lt;129.93.239.145:54881&gt; : glidein.unl.edu
 ID      OWNER/NODENAME   SUBMITTED     RUN_TIME ST PRI SIZE CMD
2723.0   mslyz           2/24 15:21   0+00:02:16 R  0   2.4  condor_dagman -f -
</pre>
<p />
<p />
<p>
In this case it hasn't really started running yet.
</p></li>
</ol>
<p />
<p />
</div>
<p />
</div>
<p />
<div id="outline-container-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Monitoring Jobs </h2>
<div class="outline-text-2" id="text-7">
<p />
<p />
<p>
It is possible to see the status of jobs in the
following ways:
</p>
<ol>
<li>
While the job is running, the <code>condor_q</code>
can print information it. This can be called as
<p />
<pre class="example">
 condor_q [username]
</pre>
<p />
<p />
<p>
The first column that condor_q prints
is the jobid, which uniquely identifies the job.
</p>
</li>
<li>
Check the condor logs for that job.
These are in the job directory and have the suffix
<code>.log</code>. Condor updates these even as the
jobs are running. The logs show things like
job evictions and disconnects, and restarts
of the jobs on different computers.
<p />
</li>
<li>
Use <code>condor_ssh_to_job  [jobid]</code>
to start a login session at the
computer where the job is running.
Then it's possible to check
the output files etc using standard
unix commands like less/more, tail, etc.
This may not always work.
<p />
</li>
<li>
Use <code>glidein_ls [jobid]</code><br/>
This lists the files in the directory
where condor is running.
<p />
<p>
<code>glidein_interactive [jobid] [command]</code><br/>
This runs an arbitrary command in that
directory.
</p>
<p>
Likewise, these may not always work.
</p>
</li>
<li>
Check the console output that the jobs
produced. This is stored in files that have names
with the string <code>_stdout_</code>. Aside from information
printed by the wrapper script, these files have all
the output that the <span class="twikiNewLink">OpenSees<a href="/bin/edit/Engagement/OpenSees?topicparent=Engagement.Running_OpenSees_on_OSG_b" rel="nofollow" title="OpenSees (this topic does not yet exist; you can create it)">?</a></span> executable
produced. These files are only returned
to the job directory after the job is done,
but the programs in Steps 3 and 4 can be
used to check them before that.
<p />
</li>
<li>
If the job finished, check the output files that
<span class="twikiNewLink">OpenSees<a href="/bin/edit/Engagement/OpenSees?topicparent=Engagement.Running_OpenSees_on_OSG_b" rel="nofollow" title="OpenSees (this topic does not yet exist; you can create it)">?</a></span> was expected to produce.
</li>
</ol>
<p />
<p />
<p>
There is an example of the use of the programs
in Steps 3 and 4 below.
</p>
</div>
<p />
</div>
<p />
<div id="outline-container-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> Troubleshooting and Resubmitting Failed Jobs </h2>
<div class="outline-text-2" id="text-8">
<p />
<p />
<p>
One type of job failure is caused by problems in the
infrastructure (network disconnects, job preemptions,
etc.). The system will resubmit automatically jobs failed
because of the infrastructure indefinitely.
</p>
<p>
Another type of job failure is caused by problems with
the user jobs, which includes both the wrapper script
and <span class="twikiNewLink">OpenSees<a href="/bin/edit/Engagement/OpenSees?topicparent=Engagement.Running_OpenSees_on_OSG_b" rel="nofollow" title="OpenSees (this topic does not yet exist; you can create it)">?</a></span> program (missing input file, corrupted
input file, bug in the application, etc.)  These jobs
often need to be resubmitted manually.
</p>
<p />
</div>
<p />
<div id="outline-container-8_1" class="outline-3">
<h3 id="sec-8_1"><span class="section-number-3">8.1</span> Resubmitting DAGman Jobs </h3>
<div class="outline-text-3" id="text-8_1">
<p />
<p />
<p>
As mentioned above, when <code>setup_opensees.pl</code> is give
the <code>-a</code> option it will arrange for condor's DAGman
feature to submit jobs. DAGman will automatically
resubmit jobs that failed (defined as exiting with a
non-zero status) because of problems with the user
job. Using the current wrapper scripts, this resubmit
will happen three times. These resubmissions are useful
in case the problem is due to something in the
environment where the job runs like a missing library.
</p>
<p>
If the job is still not succeeding then most likely
there is some kind of a bug. After that's fixed, it's
possible to resubmit just the jobs that failed using a
file, called the <i>rescue dag</i>, that DAGman had created
when it finished running.
</p>
<p />
<p />
<p />
<pre class="example"># First change runOpenSeesA.sh to have "exit -1"
# instead of "exit $last_command_status".
# This will cause all the jobs to seem like they
# failed.

# Next set up a small run with DAGman:

$ ./setup_opensees.pl -c openseesA.csf -i exampleTeraGridCodeZZZ \
  -e ./OpenSees -a
Using SAClaRecords_test.txt as the SACla file.
num_runs: 2
Proxy certificate is valid for 29.72 more hours.
Job directory:   OpenSees_exampleTeraGridCodeZZZ_4
Suggested command:  condor_submit_dag -usedagdir OpenSees_exampleTeraGridCodeZZZ_4/O\
penSees_exampleTeraGridCodeZZZ_4.dag

# Now submit it:

$ condor_submit_dag -usedagdir OpenSees_exampleTeraGridCodeZZZ_4/OpenSees_exampleTeraGridCodeZZZ_4.dag
  
-----------------------------------------------------------------------
File for submitting this DAG to Condor           : OpenSees_exampleTeraGridCodeZZZ_4\
/OpenSees_exampleTeraGridCodeZZZ_4.dag.condor.sub
Log of DAGMan debugging messages                 : OpenSees_exampleTeraGridCodeZZZ_4\
/OpenSees_exampleTeraGridCodeZZZ_4.dag.dagman.out
Log of Condor library output                     : OpenSees_exampleTeraGridCodeZZZ_4\
/OpenSees_exampleTeraGridCodeZZZ_4.dag.lib.out
Log of Condor library error messages             : OpenSees_exampleTeraGridCodeZZZ_4\
/OpenSees_exampleTeraGridCodeZZZ_4.dag.lib.err
Log of the life of condor_dagman itself          : OpenSees_exampleTeraGridCodeZZZ_4\
/OpenSees_exampleTeraGridCodeZZZ_4.dag.dagman.log

Submitting job(s).
1 job(s) submitted to cluster 3327.
-----------------------------------------------------------------------

# Wait for it to finish running. When it does, there will be
# a file called OpenSees_exampleTeraGridCodeZZZ_4.dag.rescue001
# in the job directory. This has the information to rerun the
# failed jobs.

# Put "exit $last_command_status" back in place of
# exit -1 in runOpenSeesA.sh.

# Now resubmit the jobs:

$ condor_submit_dag OpenSees_exampleTeraGridCodeZZZ_4/OpenSees_exampleTeraGridCodeZZZ_4.dag.rescue001

-----------------------------------------------------------------------
File for submitting this DAG to Condor           : OpenSees_exampleTeraGridCodeZZZ_4\
/OpenSees_exampleTeraGridCodeZZZ_4.dag.rescue001.condor.sub
Log of DAGMan debugging messages                 : OpenSees_exampleTeraGridCodeZZZ_4\
/OpenSees_exampleTeraGridCodeZZZ_4.dag.rescue001.dagman.out
Log of Condor library output                     : OpenSees_exampleTeraGridCodeZZZ_4\
/OpenSees_exampleTeraGridCodeZZZ_4.dag.rescue001.lib.out
Log of Condor library error messages             : OpenSees_exampleTeraGridCodeZZZ_4\
/OpenSees_exampleTeraGridCodeZZZ_4.dag.rescue001.lib.err
Log of the life of condor_dagman itself          : OpenSees_exampleTeraGridCodeZZZ_4\
/OpenSees_exampleTeraGridCodeZZZ_4.dag.rescue001.dagman.log

Submitting job(s).
1 job(s) submitted to cluster 3341.
-----------------------------------------------------------------------

# In this example, all of the jobs effectively failed,
# so there is no real advantage to using the rescue dag
# compared to just starting again with setup_opensees.pl.
# The rescue dag is useful when some of the jobs succceeded
# and some failed, since running the rescue dag won't rerun
# the jobs that already succceeded.
</pre>
<p />
<p />
<p />
</div>
<p />
</div>
<p />
<div id="outline-container-8_2" class="outline-3">
<h3 id="sec-8_2"><span class="section-number-3">8.2</span> Resubmitting Ordinary Jobs </h3>
<div class="outline-text-3" id="text-8_2">
<p />
<p />
<p>
Without the <code>-a</code> option, <code>setup_opensees.pl</code> will only
arrange for ordinary condor jobs to be submitted.
These do not have any provisions for resubmitting
failed jobs, but it is possible to edit the submit file
to start them running again.
</p>
<p>
The two key lines are "environment" and "queue".
Initially these are
</p><pre class="example">
environment = "OPENSEES_PROCESS_ID=$(Process)  OPENSEES_CLUSTER_ID=$(Cluster)"
queue $(opensees_num_runs)
</pre>
<p />
<p>which causes all of the jobs to run.
To run only job numbers 7 and 42, replace these with
</p><pre class="example">
environment = "OPENSEES_PROCESS_ID=7  OPENSEES_CLUSTER_ID=$(Cluster)"
queue 1
environment = "OPENSEES_PROCESS_ID=42  OPENSEES_CLUSTER_ID=$(Cluster)"
queue 1
</pre>
<p />
<p>These should occur at the end of the submit file. Then resubmit
the job.
</p>
<p>
This may also be a useful technique to rerun only some
of the jobs after editing the input files or the <code>tcl</code>
scripts.
</p>
</div>
</div>
<p />
</div>
<p />
<div id="outline-container-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> Untarring multiple output files at once </h2>
<div class="outline-text-2" id="text-9">
<p />
<p />
<p>
Here is an example with comments that
uses a for loop to untar
several output files at once.
</p>
<p>
[TODO: This section needs to be fixed to have the new
setup_opensees.pl command line, although the part
about the tar files is ok.]
</p>
<p />
<p />
<p />
<pre class="example">
# Set up a quick run:

glidein:opensees$ ./setup_opensees.pl -c openseesA.csf -o test4.csf \
  -t opensees_distA2.tgz -i exampleTeraGridCodeZZZ -e ./OpenSees \
  -d test4_C $extra_params
Using SAClaRecords_test.txt as the SACla file.
num_runs: 2
Suggested command:  condor_submit test4.csf
glidein:opensees$ 

# Start jobs going:

glidein:opensees$ condor_submit test4.csf
Submitting job(s)..
2 job(s) submitted to cluster 2471.
glidein:opensees$ 

# ... Wait for them to finish.

glidein:opensees$ condor_q mslyz


-- Submitter: glidein.unl.edu : &lt;129.93.239.145:49510&gt; : glidein.unl.edu
 ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD               

0 jobs; 0 idle, 0 running, 0 held


glidein:opensees$ cd test4_C

# Use a bash for loop to list all the output files:

glidein:test4_C$ for x in OpenSees_output_*.tgz; do echo $x; done
OpenSees_output_0.tgz
OpenSees_output_1.tgz

# Now add the untar command to the for loop:

glidein:test4_C$ for x in OpenSees_output_*.tgz; do echo $x; tar -x -f $x; done
OpenSees_output_0.tgz
OpenSees_output_1.tgz


# See that the la29GM and la28GM directories were created:

glidein:test4_C$ ls -lt
total 1924
-rw-r--r-- 1 mslyz bockelman   1324 Feb 10 11:35 openseesA_2471.log
-rw-r--r-- 1 mslyz bockelman  24585 Feb 10 11:35 debug_output_for_1.txt
-rw-r--r-- 1 mslyz bockelman     60 Feb 10 11:35 openseesA_stderr.2471.1.txt
-rw-r--r-- 1 mslyz bockelman   5874 Feb 10 11:35 openseesA_stdout.2471.1.txt
-rw-r--r-- 1 mslyz bockelman 843226 Feb 10 11:35 OpenSees_output_1.tgz
-rw-r--r-- 1 mslyz bockelman  29230 Feb 10 11:35 debug_output_for_0.txt
-rw-r--r-- 1 mslyz bockelman     60 Feb 10 11:35 openseesA_stderr.2471.0.txt
-rw-r--r-- 1 mslyz bockelman   5835 Feb 10 11:35 openseesA_stdout.2471.0.txt
-rw-r--r-- 1 mslyz bockelman 973440 Feb 10 11:35 OpenSees_output_0.tgz
drwxr-xr-x 3 mslyz bockelman   4096 Feb 10 11:35 la29GM
drwxr-xr-x 3 mslyz bockelman   4096 Feb 10 11:35 la28GM


# Another variant:

# Clean up the just-produced output:

glidein:test4_C$ 
glidein:test4_C$ 
glidein:test4_C$ rm -r la*GM


# Put the numbers of the output files that you'd like to
# untar in a list in braces (called "brace expansion"):

glidein:test4_C$ 
glidein:test4_C$ for x in OpenSees_output_{0,1}.tgz; do echo $x; tar -x -f $x; done
OpenSees_output_0.tgz
OpenSees_output_1.tgz

# In this case using the * is less typing, but brace expansion is
# useful if you'd like to untar more than one output file but not all
# of them.

glidein:test4_C$ ls -lt
total 1924
-rw-r--r-- 1 mslyz bockelman   1324 Feb 10 11:35 openseesA_2471.log
-rw-r--r-- 1 mslyz bockelman  24585 Feb 10 11:35 debug_output_for_1.txt
-rw-r--r-- 1 mslyz bockelman     60 Feb 10 11:35 openseesA_stderr.2471.1.txt
-rw-r--r-- 1 mslyz bockelman   5874 Feb 10 11:35 openseesA_stdout.2471.1.txt
-rw-r--r-- 1 mslyz bockelman 843226 Feb 10 11:35 OpenSees_output_1.tgz
-rw-r--r-- 1 mslyz bockelman  29230 Feb 10 11:35 debug_output_for_0.txt
-rw-r--r-- 1 mslyz bockelman     60 Feb 10 11:35 openseesA_stderr.2471.0.txt
-rw-r--r-- 1 mslyz bockelman   5835 Feb 10 11:35 openseesA_stdout.2471.0.txt
-rw-r--r-- 1 mslyz bockelman 973440 Feb 10 11:35 OpenSees_output_0.tgz
drwxr-xr-x 3 mslyz bockelman   4096 Feb 10 11:35 la29GM
drwxr-xr-x 3 mslyz bockelman   4096 Feb 10 11:35 la28GM
glidein:test4_C$ 
glidein:test4_C$ 

# Clean-up:

glidein:test4_C$ cd ..
glidein:opensees$ rm -r test4_C opensees_distA2.tgz test4.csf
glidein:opensees$ 
</pre>
<p />
<p />
<p />
<p />
</div>
<p />
</div>
<p />
<div id="outline-container-10" class="outline-2">
<h2 id="sec-10"><span class="section-number-2">10</span> Example of Monitoring Jobs </h2>
<div class="outline-text-2" id="text-10">
<p />
<p />
<p>
[TODO: This section needs to be fixed to have the new
setup_opensees.pl command line, although apart from that
should be ok.]
</p>
<p />
<p />
<p />
<pre class="example">
# On the submit host, set up the job:

glidein:opensees$ ./setup_opensees.pl -c openseesA.csf -o test_fnpB.csf \
   -t opensees_distA2_fnpB.tgz -i exampleTeraGridCode_rl -e ./OpenSees \
   -d test_fnpB -a test_fnpB.dag
Using SAClaRecords.txt as the SACla file.
num_runs: 60
Suggested command:  condor_submit_dag -usedagdir test_fnpB/test_fnpB.dag
glidein:opensees$ 
glidein:opensees$ 
glidein:opensees$ 


# Start it running.

glidein:opensees$ condor_submit_dag -usedagdir test_fnpB/test_fnpB.dag

-----------------------------------------------------------------------
File for submitting this DAG to Condor           : test_fnpB/test_fnpB.dag.condor.sub
Log of DAGMan debugging messages                 : test_fnpB/test_fnpB.dag.dagman.out
Log of Condor library output                     : test_fnpB/test_fnpB.dag.lib.out
Log of Condor library error messages             : test_fnpB/test_fnpB.dag.lib.err
Log of the life of condor_dagman itself          : test_fnpB/test_fnpB.dag.dagman.log

Submitting job(s).
1 job(s) submitted to cluster 2403.
-----------------------------------------------------------------------


# Wait a little while for jobs to start running.

# Do "condor_q" to figure out what the job ids are.
# 2406.0 is one of them in this case.


======================================================================
# Using condor_ssh_to_job:

glidein:opensees$ condor_ssh_to_job 2406.0
Welcome to glidein_20209@red-d8n6!
Your condor job is running with pid(s) 20793.

# We are now logged into the machine where the
# job is running.

bash-3.2$ ls -lat
total 13004
drwxr-xr-x 6 hcc grid    4096 Feb 10 00:05 .
drwxr-xr-x 2 hcc grid    4096 Feb 10 00:05 .condor_ssh_to_job_3
-rw-r--r-- 1 hcc grid    3948 Feb 10 00:05 .job.ad
-rw-r--r-- 1 hcc grid    5215 Feb 10 00:05 .machine.ad
-rw-r--r-- 1 hcc grid   59748 Feb 10 00:05 openseesA_stdout.2406.2.txt
drwxr-xr-x 2 hcc grid    4096 Feb  9 23:57 .condor_ssh_to_job_2
drwxr-xr-x 2 hcc grid    4096 Feb  9 23:42 .condor_ssh_to_job_1
drwxr-xr-x 3 hcc grid    4096 Feb  9 23:34 ..
-rwxr-xr-x 1 hcc grid    2038 Feb  9 23:34 condor_exec.exe
-rw-r--r-- 1 hcc grid       0 Feb  9 23:34 debug_output_for_2.txt
-rw-r--r-- 1 hcc grid      60 Feb  9 23:34 openseesA_stderr.2406.2.txt
-rw-r--r-- 1 hcc grid 4082242 Feb  9 23:34 opensees_distA2_fnpB.tgz
-rw-r--r-- 1 hcc grid       0 Feb  9 23:34 OpenSees_output_2.tgz
drwxr-xr-x 4 hcc grid    4096 Feb  4 00:41 exampleTeraGridCode_rl
-rwxr-xr-x 1 hcc grid 9099208 Jan 12 16:49 OpenSees
bash-3.2$ 

# Look at the end of the output file that OpenSees would
# usually print to the screen. "tail" is a standard
# unix command the lists the last few lines.

bash-3.2$ tail openseesA_stdout.2406.2.txt
DirectIntegrationAnalysis::analyze() - the Algorithm failed at time 4.03793
OpenSees &gt; analyze failed, returned: -3 error flag
Trying Reducing This Time Step by 2 ..
WARNING: CTestEnergyIncr::test() - failed to converge 
after: 70 iterations
AcceleratedNewton::solveCurrentStep() -The ConvergenceTest object failed in test()
DirectIntegrationAnalysis::analyze() - the Algorithm failed at time 4.03743
OpenSees &gt; analyze failed, returned: -3 error flag
Trying Reducing This Time Step by 10 ..
Converged at this step, continuing....
bash-3.2$ 
bash-3.2$ 


# Look the info about the running processes.

bash-3.2$ ps uaxw | grep -i opensees
hcc       4129  0.0  0.0  61208   816 pts/0    SN+  00:06   0:00 grep -i opensees
hcc      20793  0.0  0.0   8928  1140 ?        SN   Feb09   0:00 /bin/bash -x /var/lib/condor/execute/dir_17051/glide_Q17104/execute/dir_20791/condor_exec.exe opensees_distA2_fnpB.tgz
hcc      20806 99.9  0.4 130828 104188 ?       RNl  Feb09  31:51 ./OpenSees exampleTeraGridCode_rl/gmMP.tcl
hcc      24587  0.0  0.0   8928  1140 ?        SN   Feb09   0:00 /bin/bash -x /var/lib/condor/execute/dir_21879/glide_K21932/execute/dir_24585/condor_exec.exe opensees_distA2_fnpB.tgz
hcc      24600 99.8  0.4 130828 104052 ?       RNl  Feb09  27:47 ./OpenSees exampleTeraGridCode_rl/gmMP.tcl
bash-3.2$ 
bash-3.2$ 

# Done looking around.

bash-3.2$ logout
Connection to condor-job.red-d8n6 closed.

============================================================
# Using the glidein_* tools:


# List files in the directory where the job # 2406.0 is running:

glidein:opensees$ glidein_ls 2406.0
OpenSees
OpenSees_output_2.tgz
condor_exec.exe
debug_output_for_2.txt
exampleTeraGridCode_rl
openseesA_stderr.2406.2.txt
openseesA_stdout.2406.2.txt
opensees_distA2_fnpB.tgz
glidein:opensees$ 


# See the last few line of the output using the tail command again:

glidein:opensees$ glidein_interactive 2406.0 tail openseesA_stdout.2406.2.txt
DirectIntegrationAnalysis::analyze() - the Algorithm failed at time 4.06923
OpenSees &gt; analyze failed, returned: -3 error flag
Trying Reducing This Time Step by 10 ..
Converged at this step, continuing....
WARNING: CTestEnergyIncr::test() - failed to converge 
after: 70 iterations
AcceleratedNewton::solveCurrentStep() -The ConvergenceTest object failed in test()
DirectIntegrationAnalysis::analyze() - the Algorithm failed at time 4.06983
OpenSees &gt; analyze failed, returned: -3 error flag
Trying Reducing This Time Step by 2 ..
glidein:opensees$ 


# Could do "glidein_cat openseesA_stdout.2406.2.txt"
# to see the whole output so far.


# If the runs were just to experiment with the job
# monitoring tools then it's probably best to
# do a condor_rm on the first job at this point.

</pre>
<p />
<p />
<p />
</div>
<p />
</div>
<p />
<div id="outline-container-11" class="outline-2">
<h2 id="sec-11"><span class="section-number-2">11</span> Getting Email Output from Jobs </h2>
<div class="outline-text-2" id="text-11">
<p />
<p />
<p>
By default, DAGman will email the result of running the
jobs to the user's local account on the submit
machine. To redirect email to another address, run the
command
</p><pre class="example">
echo '\USERNAME@OTHERACCOUNT.COM' &gt; ~/.forward
</pre>
<p />
<p>where <a href="mailto&#58;USERNAME&#64;OTHERACCOUNT&#46;COM">USERNAME&#64;OTHERACCOUNT.COM</a> is replaced
with the other address. The backslash character
is significant.
</p>
<p>
&ndash; OSG User Support for NEES, with help from P. Clayton
</p>
<p />
<p />
<p />
<p />
</div>
</div>
</div></div><!-- /patternTopic-->
<p />
<p />
</div><!-- /patternContent-->
<hr />
This topic: Engagement<span class='twikiSeparator'>&nbsp;&gt;&nbsp;</span><a href="/bin/view/Engagement/WebHome" class="twikiCurrentWebHomeLink twikiLink">WebHome</a> &gt; <a href="/bin/view/Engagement/EngageOpenSeesB" class="twikiLink">EngageOpenSeesB</a><span class='twikiSeparator'>&nbsp;&gt;&nbsp;</span>Running_OpenSees_on_OSG_b</span> <br />    
Topic revision: r5 - 12 Oct 2016 - 15:10:29 - <a href="/bin/view/Main/KyleGross" class="twikiLink">KyleGross</a>
</div><!-- /patternMainContents-->
</div><!-- /patternMain-->
</div><!-- /patternFloatWrap-->
<div class="clear">&nbsp;</div>
</div><!-- /patternOuter--><div id="patternBottomBar"><div id="patternBottomBarContents"><div id="twikinetBadge"><a href="http://www.twiki.net/"><img src="https://twiki.opensciencegrid.org/twiki/pub/TWiki/TWikiNetSkin/twiki-badge-88x31.gif" alt="TWIKI.NET" width="88" height="31" border="0" /></a></div><!--/twikinetBadge--><div id="patternWebBottomBar"><p>
<font size="-1">
TWiki |
<a href="https://ticket.grid.iu.edu/goc/twiki">Report Bugs</a> |
<a href="https://twiki.grid.iu.edu/bin/view/Operations/IUPrivacyPolicy">Privacy Policy</a>
</p>
<p>
<font size="-2">
<span class="twikiRight"> <a href="http://twiki.org/"><img src="/twiki/pub/TWiki/TWikiLogos/T-logo-80x15.gif" alt="This site is powered by the TWiki collaboration platform" width="80" height="15" title="This site is powered by the TWiki collaboration platform" border="0" /></a></span>Copyright by the contributing authors. All material on this collaboration platform is the property of the contributing authors..
</font>
</p></div><!--/patternWebBottomBar--></div><!-- /patternBottomBarContents--></div><!-- /patternBottomBar-->
</div><!-- /patternPage-->
</div><!-- /patternPageShadow-->
</div><!-- /patternScreen-->
</body></html>
<p />