&lt;verbatim&gt;

#!/usr/bin/perl -w

use strict;
use Getopt::Std;

# Looks at the gridmapfile located from /etc/sysconfig/edg
# and also uses the host certificate
# to create a dcache.kpwd file from the grid-mapfile.
#
# -c hostcert can be used to give the location of the host cert.
# -o output can be used to create the file in a different location.
# -u user can be used to map the host cert to the named user.

my %opts;
getopts(&#39;c:o:u:&#39;, \%opts);

my $hostcert   = $opts{c} || &quot;/etc/grid-security/hostcert.pem&quot;;
my $hostuser   = $opts{u} || &quot;edginfo&quot;;
my $dcacheKpwd = $opts{o} || &quot;/opt/d-cache/etc/dcache.kpwd&quot;;
my $tmp = &quot;$dcacheKpwd.tmp&quot;;
my ($uid, $gid) = (getpwnam($hostuser))[2, 3];
my $hostdn;

open(HOSTDN, &quot;openssl x509 -subject -noout &lt; $hostcert |&quot;);

while (&lt;HOSTDN&gt;) {
    if (/^subject=\s*(.*CN=.*)/) {
   $hostdn = $1;
   last;
    }
}
close(HOSTDN);

die &quot;Could not determine host DN\n&quot; unless $hostdn;
die &quot;Could not find user &#39;$hostuser&#39; in passwd file\n&quot; unless
    defined($uid) &amp;&amp; defined($gid);

my $globuscfg = &#39;/etc/sysconfig/edg&#39;;
open(GLOBUSCFG, &quot;&lt;$globuscfg&quot;) or die &quot;Could not open $globuscfg: $!\n&quot;;
my $gridmap = &#39;/etc/grid-security/grid-mapfile&#39;;

while (&lt;GLOBUSCFG&gt;) {
    $gridmap = $1 if (/^GRIDMAP\s*=\s*(\S*)\s*/);
}
close(GLOBUSCFG);

open(GRIDMAP, &quot;&lt;$gridmap&quot;) or die &quot;Could not open $gridmap: $!\n&quot;;

my %map;
my %ac4gid;
my %uid4ac;

while (&lt;GRIDMAP&gt;) {
    if (/^&quot;(.*CN=.*)&quot;\s+(\S+)\s*$/) {
   my $dn = $1;
   my $ac = $2;

   push( @{$map{$ac}} , $dn );

   # Something changes Email= to E= somewhere
   # If we have a DN with Email= change it to E= and add it also

   if ($dn =~ s/Email=/E=/) {
      push( @{$map{$ac}} , $dn );
   }
    }
}

open(DCACHE, &quot;&gt;$tmp&quot;) || die &quot;Could not open $tmp: $!\n&quot;;

print DCACHE &quot;# This was created by the grid-mapfile2dcache-kpwd command\n&quot;;
print DCACHE &quot;# from the grid-mapfile\n\n&quot;;
print DCACHE &quot;version 2.1\n\n&quot;;

if ($hostdn) {
    print DCACHE &#39;mapping &quot;&#39;.$hostdn.&#39;&quot; &#39;.&quot;$hostuser\n&quot;
          . &quot;\n&quot;
               . &quot;login $hostuser read-write $uid $gid / / /\n&quot;
          . &quot;\t$hostdn\n\n&quot;;
}
if ($hostdn =~ s/Email=/E=/) {
    print DCACHE &#39;mapping &quot;&#39;.$hostdn.&#39;&quot; &#39;.&quot;$hostuser\n&quot;
          . &quot;\n&quot;
               . &quot;login $hostuser read-write $uid $gid / / /\n&quot;
          . &quot;\t$hostdn\n\n&quot;;
}

for (sort keys %map) {
    my $ac = $_;
    my ($uid, $gid);

    if ($ac =~ s/^\.//) {
   # pool account

   $ac .= &quot;001&quot;;
   ($uid, $gid) = (getpwnam($ac))[2, 3];

   if (defined($gid)) {
       $ac4gid{$gid} = $ac;
       $uid4ac{$ac} = $uid;
   } else {
       warn &quot;$0: cannot find user &#39;$ac&#39;\n&quot;;
   }

    } else {
   # static account: use corresponding pool account if needed

   ($uid, $gid) = (getpwnam($ac))[2, 3];

   if (defined($gid)) {
       if (exists $ac4gid{$gid}) {
      $ac = $ac4gid{$gid};
      $uid = $uid4ac{$ac};
       }
   } else {
       warn &quot;$0: cannot find user &#39;$ac&#39;\n&quot;;
   }
    }

    next unless defined $gid;

    my @grp = sort @{$map{$_}};

    print DCACHE &quot;# Mappings for &#39;$_&#39; users\n&quot;;

    for (@grp) {
   print DCACHE &quot;mapping \&quot;$_\&quot; $ac\n&quot;;
    }

    print DCACHE &quot;\n&quot;;
    print DCACHE  &quot;# Login for &#39;$_&#39; users\n&quot;;
    print DCACHE  &quot;login $ac read-write $uid $gid / / /\n&quot;;

    for (@grp) {
   print DCACHE &quot;\t$_\n&quot;;
    }

    print DCACHE &quot;\n&quot;;
}

close(DCACHE);
rename($tmp, $dcacheKpwd) or die &quot;Error: cannot rename $tmp to $dcacheKpwd: $!\n&quot;;


&lt;/verbatim&gt;

