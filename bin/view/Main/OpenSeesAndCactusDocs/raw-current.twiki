---+ !OpenSees and Cactus Documentation
%TOC%

---++ !OpenSees Overview
Contacts:
   * Gregory Rodgers &lt;grodgers@purdue.edu&gt; - NEES Contact
   * Frank !McKenna &lt;fmckenna@ce.berkeley.edu&gt; - !OpenSees Developer

!OpenSees is an Earthquake engineering application.  It has MPI bits that can be turned off.  I worked with Frank !McKenna &lt;fmckenna@ce.berkeley.edu&gt;, a developer of !OpenSees, to turn off MPI and to build it for RHEL 5.  For the most part, !OpenSees is used by engineers on their Windows workstations.

My main Nees contact is Gregory Rodgers &lt;grodgers@purdue.edu&gt;.  His goal is to integrate !OpenSees into !HubZero, including the ability to submit opensees jobs.  Gregory and I agreed that a first step would be to submit jobs from the command line (!GlideinWMS/Daigrid).  Support is best provided on the Nees Hub: http://nees.org/resources/openseesbuild .


---+++ !OpenSees Technical
!OpenSees is a C/C++/Fortran application that reads in a tcl file for instructions/specifications.

SVN from Frank:
&lt;pre class=&quot;screen&quot;&gt;svn://opensees.berkeley.edu/usr/local/svn/OpenSees/trunk
&lt;/pre&gt;

In order to build, !OpenSees used a machine dependent Makefile.def file.  This had to be heavily modified from the original in order to work on RHEL5, and disable MPI.  It is attached to this page.
   * [[%ATTACHURL%/Makefile.def][Makefile.def]]: Makefile.def

!OpenSees outputs a dynamically linked executable with the following requirements:
&lt;pre class=&quot;screen&quot;&gt;
$ ldd ../bin/OpenSees 
        libstdc++.so.6 =&gt; /usr/lib64/libstdc++.so.6 (0x00000034b5a00000)
        libgfortran.so.1 =&gt; /usr/lib64/libgfortran.so.1 (0x00002b8ab501c000)
        libm.so.6 =&gt; /lib64/libm.so.6 (0x00000034b4600000)
        libtcl8.4.so =&gt; /usr/lib64/libtcl8.4.so (0x00000034b4e00000)
        libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00000034b6600000)
        libc.so.6 =&gt; /lib64/libc.so.6 (0x00000034b3600000)
        libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00000034b3a00000)
        /lib64/ld-linux-x86-64.so.2 (0x00000034b3200000)
        libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00000034b3e00000)
&lt;/pre&gt;

I created a condor submit file that successfully ran a test job on multiple sites using !GlideinWMS
&lt;pre class=&quot;file&quot;&gt;
universe = vanilla
output = condor_out/out.$(Cluster).$(Process)
error = condor_out/err.$(Cluster).$(Process)
executable = ../bin/OpenSees
log = test.log
when_to_transfer_output = ON_EXIT
transfer_input_files = EXAMPLES/ExamplesForTesting/Test.RCFrame3.ops
arguments = Test.RCFrame3.ops
queue 100
&lt;/pre&gt;

All relevant output is put in stderr, and for this test, it small:
&lt;pre class=&quot;file&quot;&gt;
$ cat err.515966.83


         OpenSees -- Open System For Earthquake Engineering Simulation
        Pacific Earthquake Engineering Research Center -- 2.2.2.a

            (c) Copyright 1999,2000 The Regents of the University of California
                                 All Rights Reserved
    (Copyright and Disclaimer @ http://www.berkeley.edu/OpenSees/copyright.html)



 Node: 3
        Coordinates  : 0 324 
        Disps: 3.41138 -0.0175742 -0.00740496 
         unbalanced Load: 240 -96 0 
        ID : 12 13 14
&lt;/pre&gt;

Further work that OSG has done with !OpenSees is recorded on
[[Trash/Engagement.EngageOpenSeesB][another page]].


---++ Cactus
Contacts:
   * Gabrielle Allen &lt;gallen@cct.lsu.edu&gt;
   * Michael Thomas &lt;mthomas@cct.lsu.edu&gt; (Grad Student)

Cactus is several gpl&#39;d libraries that are statically compiled into a final executable.  Cactus is normally run with MPI on large clusters (500+ cores).  Michael and Gabrielle are not certain that Cactus will fit into the OSG single core model.  

All customizations for a particular workflow are done at compile time, and the executable is unique between uses of Cactus.  It takes as input a small O(1KB) parameter file.  The output is proportional the the running time of the executable.  Michael tells me that the output for a 24 hour single core job should be less than 1 GB.

Michael used a !GetComponents script (attached) to download the necessary bits of Cactus.  !WaveDemo.th (attached) describes the files need for a specific use of Cactus, a demo.
   * [[%ATTACHURL%/GetComponents][GetComponents]]: !GetComponents
   * [[%ATTACHURL%/WaveDemo.th][WaveDemo.th]]: !WaveDemo.th


Michael compiled this on the Nebraska RHEL5 machine, it took less than 10 minutes from login to running.  The svn is:
&lt;pre class=&quot;screen&quot;&gt;http://svn.cactuscode.org/flesh/trunk&lt;/pre&gt;

Condor Submit file for !GlideinWMS:
&lt;pre class=&quot;file&quot;&gt;
universe = vanilla
executable = Cactus/exe/cactus_WaveDemo
output = condor_out/out.$(Cluster).$(Process)
error = condor_out/err.$(Cluster).$(Process)
log = test.log
when_to_transfer_output = ON_EXIT
transfer_input_files = Cactus/WaveDemo.par
arguments = WaveDemo.par
queue 30
&lt;/pre&gt;

&lt;br&gt;&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-- DerekWeitzel

