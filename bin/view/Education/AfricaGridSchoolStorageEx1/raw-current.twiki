---+ Determining Storage Requirements

---++ Introduction

This exercise&#39;s goal is to learn to think critically about an application&#39;s data needs.  In this exercise we will attempt to understand the input and output of the bioinformatics application [[http://blast.ncbi.nlm.nih.gov/][BLAST]].

---++ Customize this Document

&lt;!-- OSG Summer School 2012 Defaults
   * Local VO= %URLPARAM{&quot;INPUT_VO&quot; encode=&quot;quote&quot; default=&quot;osgedu&quot;}%
   * Local UCL_HOST = %URLPARAM{&quot;INPUT_HOST&quot; encode=&quot;quote&quot; default=&quot;osg-ss-glidein&quot;}%
   * Local UCL_USER = %URLPARAM{&quot;INPUT_USER&quot; encode=&quot;quote&quot; default=&quot;user&quot;}%
   * Local UCL_DOMAIN = %URLPARAM{&quot;INPUT_DOMAIN&quot; encode=&quot;quote&quot; default=&quot;chtc.wisc.edu&quot;}%
   * Local GATEKEEPER = %URLPARAM{&quot;INPUT_GATEKEEPER&quot; encode=&quot;quote&quot; default=&quot;red.unl.edu&quot;}%
   * Local UCL_CWD= %URLPARAM{&quot;INPUT_CWD&quot; encode=&quot;quote&quot; default=&quot;/share/users/%UCL_USER%/osg_school/dm_part_1&quot;}%
   * Local BATCH_SYSTEM = %URLPARAM{&quot;BATCH_SYSTEM&quot; encode=&quot;quote&quot; default=&quot;condor&quot;}%
   * Local REMOTE_ROOT = %URLPARAM{&quot;INPUT_REMOTE_ROOT&quot; encode=&quot;quote&quot; default=&quot;/mnt/hadoop/user&quot;}%
   * Local REMOTE_SRM = %URLPARAM{&quot;INPUT_SRM&quot; encode=&quot;quote&quot; default=&quot;red-srm1.unl.edu:8443&quot;}%
   * Local REMOTE_GRIDFTP= %URLPARAM{&quot;INPUT_GRIDFTP&quot; encode=&quot;quote&quot; default=&quot;red-gridftp12.unl.edu&quot;}%
   * Local SURL = srm://%REMOTE_SRM%/srm/v2/server?SFN=%REMOTE_ROOT%
   * Local TURL= gsiftp://%REMOTE_GRIDFTP%/%REMOTE_ROOT%
   * Local OSG_DATA=%URLPARAM{&quot;INPUT_OSG_DATA&quot; encode=&quot;quote&quot; default=&quot;/osg/data&quot;}%
   * Local BLAST_DB_SUBMIT=%URLPARAM{&quot;INPUT_BLAST_DB_SUBMIT&quot; encode=&quot;quote&quot; default=&quot;/share/blast&quot;}%
   * Local VDT_LOCATION=/opt/osg-client
--&gt;

%ICON{&quot;warning&quot;}% %RED% Please change your Login Name and click on the Customize button!%ENDCOLOR%
&lt;form action=&quot;%SCRIPTURLPATH{&quot;view&quot;}%/%WEB%/%TOPIC%&quot;&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      %RED%Login Name%ENDCOLOR%
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_USER&quot; value=&quot;%UCL_USER%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      VO
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_VO&quot; value=&quot;%VO%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      Host Name
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_HOST&quot; value=&quot;%UCL_HOST%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      Domain Name
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_DOMAIN&quot; value=&quot;%UCL_DOMAIN%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;!--
  &lt;tr&gt;
    &lt;td&gt;
      Exercise Path
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_CWD&quot; value=&quot;%UCL_CWD%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      Remote SE root directory
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_REMOTE_ROOT&quot; value=&quot;%REMOTE_ROOT%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      SRM host endpoint
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_SRM&quot; value=&quot;%REMOTE_SRM%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      !GridFTP host endpoint
    &lt;/td&gt;
    &lt;td&gt;
      &lt;input size=100 type=&quot;text&quot; name=&quot;INPUT_GRIDFTP&quot; value=&quot;%REMOTE_GRIDFTP%&quot;/&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
--&gt;
  &lt;tr&gt;
    &lt;td&gt;
     &amp;nbsp;
     &lt;input type=&quot;submit&quot; class=&quot;twikiSubmit&quot; value=&quot;Customize&quot; /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/form&gt;

---+ Exercises

---++ Prerequisite 

   * Login on submission node &lt;pre class=&quot;screen&quot;&gt;
ssh %UCL_USER%@%UCL_HOST%.%UCL_DOMAIN%
&lt;/pre&gt;
&lt;!--   * Initialize the OSG client environment &lt;pre class=&quot;screen&quot;&gt;
source %VDT_LOCATION%/setup.sh
&lt;/pre&gt;
   * Obtain proxy certificate, if you have not done so already &lt;pre class=&quot;screen&quot;&gt;
voms-proxy-init -voms %VO%:/%VO%
&lt;/pre&gt;
--&gt;
   * Make a directory for this exercise&lt;pre class=&quot;screen&quot;&gt;
mkdir -p %UCL_CWD%
cd %UCL_CWD%
&lt;/pre&gt;

---++ Understanding blastp

The executable used for blast is ==blastp==.  It is located at ==%BLAST_DB_SUBMIT%/bin==.  The goal of this exercise is to understand ==blastp== enough to be able to copy all files necessary for a single blast search into a directory.  ==blastp== is executed with: &lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT% blastp -db %RED%database_file%ENDCOLOR% -query %RED%query_file%ENDCOLOR%
&lt;/pre&gt;

I have provided an input query file in ==%BLAST_DB_SUBMIT%/queries/query1==.  Create a shell script that will copy the files for a yeast search into a directory.  

%TWISTY{
showlink=&quot;Show hint&quot;
hidelink=&quot;Hide hint&quot;
mode=&quot;div&quot;
showimgleft=&quot;%ICONURLPATH{toggleopen-small}%&quot;
hideimgleft=&quot;%ICONURLPATH{toggleclose-small}%&quot;
}%
Here&#39;s the command line that you should end up with to start ==blastp==:
&lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT% ./blastp -db ./yeast.aa -query ./query1
&lt;/pre&gt;
%ENDTWISTY%

This may require copying files into a directory, running ==blastp==, ==blastp== failing, then copying more files into a directory.  Repeat until blastp successfully completes.  Make a note of the files in the directory and create a shell script that will copy those files into a directory and run ==blastp==.

%TWISTY{
showlink=&quot;Show example script&quot;
hidelink=&quot;Hide example script&quot;
mode=&quot;div&quot;
showimgleft=&quot;%ICONURLPATH{toggleopen-small}%&quot;
hideimgleft=&quot;%ICONURLPATH{toggleclose-small}%&quot;
}%
&lt;pre class=&quot;file&quot;&gt;
#!/bin/sh
mkdir example_dir
cp %BLAST_DB_SUBMIT%/bin/blastp example_dir/
cp %BLAST_DB_SUBMIT%/queries/query1 example_dir/
cp %BLAST_DB_SUBMIT%/data/yeast.aa* example_dir/

cd example_dir
./blastp -db ./yeast.aa -query ./query1
&lt;/pre&gt;
%ENDTWISTY%

---+++ Input requirements

The input to blast is a database (files).  In the ==%BLAST_DB_SUBMIT%/data== directory, there is a few different databases.  For this exercise, attempt to only run the yeast db.

How to determine a file size: &lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT% ls -lh %RED%file%ENDCOLOR%
&lt;/pre&gt;

How to determine the size of a directory: &lt;pre class=&quot;screen&quot;&gt;
%UCL_PROMPT% du -sh %RED%directory%ENDCOLOR%
&lt;/pre&gt;

Make a note of the files required for a run of ==blastp==.  This will be important in future exercises.  

---+++ Output requirements

The output that we care about is sent to stdout.

---++ Replicating setup

Now that you have made an execution for yeast, can you do the same for drosoph.aa ?

---++ Possible storage possibilities

Once you have completed the script, you will have a list of files that are required for running ==blastp==.  This will help in finding what files need to be stored.  Can you answer some of the questions:

   * How much disk space is required for the yeast run?  drosoph.aa?
   * How many files are needed for the runs?
   * Assuming the each file is read completely by BLAST, and since you know how long blastp runs (time it!):
      * At what rate are files read in?  
      * How many MB/s?


---++ Extra Credit: Running the script as a condor job

Since you now know the files necessary for blast to run, you can use ==transfer_input_files== in the condor submit file to send them in a condor job.  Make a condor job that runs a yeast query.

In this extra credit, the ==executable== would be ==/share/blast/bin/blastp==.  The ==arguments== would be the normal arguments to blast, ==-db %RED%database%ENDCOLOR% -query %RED%queryfile%ENDCOLOR%==.  The ==transfer_input_files== should list the query file and the database files.

-- Main.HorstSeverini - 18 Jul 2012
