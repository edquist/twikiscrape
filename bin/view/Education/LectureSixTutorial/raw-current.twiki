%LINKCSS%

---+!! Tutorial: Using the Grid Application Toolkit 


%TOC%

---++ Getting started
The &lt;span class=&quot;firstterm&quot;&gt;Grid Application Toolkit (GAT)&lt;/span&gt; is installed in =/opt/gat/=. The adaptors are located at =/opt/gat/lib/GAT/adaptors=. To set the environment variables, logon to =gridlab1.phys.utb.edu= and do the following:

&lt;pre class=&quot;screen&quot;&gt;
gridlab1$ &lt;userinput&gt;source /opt/gat/gatenv.sh&lt;/userinput&gt;
&lt;/pre&gt;

This will export two environment variables: 
   1. =GAT_LOCATION= which points to the folder where the Grid Application Toolkit engine is installed. 
   2. =GAT_ADAPTOR_PATH= tells the engine the location of the adaptors which are to be loaded when the engine starts.

&lt;pre class=&quot;screen&quot;&gt;
gridlab1$ &lt;userinput&gt;echo $GAT_LOCATION&lt;/userinput&gt;
/opt/gat
gridlab1$ &lt;userinput&gt;echo $GAT_ADAPTOR_PATH&lt;/userinput&gt;
/opt/gat/lib/GAT/adaptorlistc
&lt;/pre&gt;

The =GAT_ADAPTOR_PATH= variable points to a text file that contains the names of adaptor libraries.

&lt;pre class=&quot;screen&quot;&gt;
gridlab1$ &lt;userinput&gt;cat $GAT_ADAPTOR_PATH&lt;/userinput&gt;
&lt;/pre&gt;

In this exercise we will write GAT programs to move files between resources using the GridFTP
adaptor that uses the gsiftp protocol to transfer files and to submit jobs using the GAT. In order to test file transfer we will as before create files:

&lt;pre class=&quot;screen&quot;&gt;
gridlab1$ &lt;userinput&gt;dd if=/dev/zero of=./testfile&lt;replaceable&gt;YOURNAME&lt;/replaceable&gt; bs=1M count=10&lt;/userinput&gt;
&lt;/pre&gt;

Again to check the size

&lt;pre class=&quot;screen&quot;&gt;
gridlab1$ &lt;userinput&gt;ls lh&lt;/userinput&gt;
./testfile&lt;replaceable&gt;YOURNAME&lt;/replaceable&gt;
&lt;/pre&gt;


---++ GAT Program to transfer files
Make a directory that will house your GAT programs:

&lt;pre class=&quot;screen&quot;&gt;
gridlab1$ &lt;userinput&gt;mkdir gatprg&lt;/userinput&gt;
gridlab1$ &lt;userinput&gt;cd gatprg&lt;/userinput&gt;
&lt;/pre&gt;


---++ Creating copyfile.c
Create the C program ( =copyfile.c= ) that will copy files locally and between machines.

&lt;noautolink&gt;
&lt;pre class=&quot;screen&quot;&gt;
gridlab1$ &lt;userinput&gt;cat &gt; copyfile.c
/* System Header Files */
#include &amp;lt;stdio.h&gt;

/* GAT Header Files */
#include &quot;GAT.h&quot;
#include &quot;GATTestUtils.h&quot;

int main (int argc, char *argv[])
{
  GATContext context = NULL;
  GATLocation name1 = NULL;
  GATLocation name2 = NULL;
  GATFile file1 = NULL;
  GATResult retval = GAT_FAIL;
  
  /* check for correct invocation */
  if ( argc &lt; 2 )
  {
    printf (&quot;\n\tUsage: %s &amp;lt;src&gt; &amp;lt;target&gt;\n&quot;
  		&quot;\n\tprogram does:\n&quot;
  		&quot;\n\t\tcp &amp;lt;name1&gt; &amp;lt;name2&gt;\n\n&quot; , argv[0]);
    exit (1);
  }
  
  /* initialize GAT: create context */
  context = GATContext_Create ();
  
  /* create URLs for all file names */
  name1 = GATLocation_Create (argv[1]);
  name2 = GATLocation_Create (argv[2]);
  
  /* create initial file object */
  file1 = GATFile_Create (context, name1, 0);
  
  /* cp &amp;lt;name1&gt; &amp;lt;name2&gt; */
  retval = GATFile_Copy (file1, name2, GATFileMode_Overwrite);
  GAT_TEST_TRACE(retval == GAT_SUCCESS, context);
  
  /* clean up */
  GATFile_Destroy (&amp;file1);
  GATLocation_Destroy (&amp;name1);
  GATLocation_Destroy (&amp;name2);
  GATContext_Destroy (&amp;context);
  
  return (0);
}
&lt;em&gt;&lt;strong&gt;[Ctrl+D]&lt;/strong&gt;&lt;/em&gt;&lt;/userinput&gt;
&lt;/pre&gt;
&lt;/noautolink&gt;

Test if your file is there&amp;#8230;

&lt;pre class=&quot;screen&quot;&gt;
$ &lt;userinput&gt;cat copyfile.c&lt;/userinput&gt;
&lt;/pre&gt;


---++ Compiling our GAT program
Next we need to compile our GAT program. We will need a Makefile that will ease this job. We will also need to do a =grid-proxy-init= to be able to use gisftp to transfer files.


&lt;pre class=&quot;screen&quot;&gt;
$ &lt;userinput&gt;cp /home/architk/gatprg/Makefile .&lt;/userinput&gt;
$ &lt;userinput&gt;make&lt;/userinput&gt;
&lt;/pre&gt;

Now generate a proxy that we will use to transfer files and submit jobs using GridFTP and GRAM.

&lt;pre class=&quot;screen&quot;&gt;
$ &lt;userinput&gt;grid-proxy-init&lt;/userinput&gt;
&lt;/pre&gt;


Now you will see an executable file with the name of the C source file (without the extension) that you created

&lt;pre class=&quot;screen&quot;&gt;
$ &lt;userinput&gt;./copyfile /home/train&lt;replaceable&gt;XX&lt;/replaceable&gt;/testfile&lt;replaceable&gt;YOURNAME&lt;/replaceable&gt; /home/train&lt;replaceable&gt;XX&lt;/replaceable&gt;/testfile&lt;/userinput&gt;
&lt;/pre&gt;

Check if your file exists.

%NOTE% Replace =&lt;replaceable&gt;XX&lt;/replaceable&gt;= with your team number.


---+++ Transferring files to remote systems

Now we will switch the adaptor used by GAT and use the same program to transfer files.

The environment variable =GAT_ADAPTOR_PATH= points to a file containing the list of adaptors available to GAT. These can be switched by modifying this file.

We will create a new adaptor-list with the gridftp adaptor to use gridftp to transfer files.

&lt;pre class=&quot;screen&quot;&gt;
$ &lt;userinput&gt;cat &gt; adaptor-list-globus
/opt/gat/lib/GAT/adaptors/libgridftp_adaptor.so
# /opt/gat/lib/GAT/adaptors/libgram_adaptor.so
/opt/gat/lib/GAT/adaptors/libfileops_adaptor.so
/opt/gat/lib/GAT/adaptors/liblogicalfile_adaptor.so
/opt/gat/lib/GAT/adaptors/libresourcebroker_adaptor.so
/opt/gat/lib/GAT/adaptors/libservicebroker_adaptor.so
/opt/gat/lib/GAT/adaptors/libfilestream_adaptor.so
/opt/gat/lib/GAT/adaptors/libendpoint_adaptor.so
/opt/gat/lib/GAT/adaptors/libadvertservice_adaptor.so
&lt;strong&gt;&lt;em&gt;CtrlD&lt;/em&gt;&lt;/strong&gt;&lt;/userinput&gt;

$ &lt;userinput&gt;export GAT_ADAPTOR_PATH=/home/trainXX/gatprg/adaptor-list-globus&lt;/userinput&gt;
&lt;/pre&gt;

Now execute:

&lt;pre class=&quot;screen&quot;&gt;
$ &lt;userinput&gt;./copyfile gsiftp://gridlab1.phys.utb.edu/home/train&lt;replaceable&gt;XX&lt;/replaceable&gt;/testfile&lt;replaceable&gt;YOURNAME&lt;/replaceable&gt;
gsiftp://gridlab2.phys.utb.edu/home/train&lt;replaceable&gt;XX&lt;/replaceable&gt;/testfile&lt;/userinput&gt;
&lt;/pre&gt;

Logon to gridlab2 to check if the file exists.


---++ Submitting Jobs
Now we will write a GAT Program that reads a command line argument that is the name of an
executable and some arguments and executes it on the local system. Type out/paste the following program. The program can be found at the Syllabus page. To get it
from there use:

&lt;pre class=&quot;screen&quot;&gt;
$ &lt;userinput&gt;wget http://osg.ivdgl.org/twiki/pub/SummerGridWorkshop/SummerGridSyllabus2006/submitjob.c&lt;/userinput&gt;
&lt;/pre&gt;

In the file find the line that reads

&lt;pre class=&quot;programlisting&quot;&gt;
GATTable_Add_String(attributes, &quot;stdout&quot;, &quot;/home/train36/result.out&quot;);
&lt;/pre&gt;

and change =train36= to your userid (=train&lt;replaceable&gt;XX&lt;/replaceable&gt;=).

Now as before we will compile and link the C program using the make command. To do this simply
type the make command that uses the Makefile that we wrote earlier.

&lt;pre class=&quot;screen&quot;&gt;
$ &lt;userinput&gt;make&lt;/userinput&gt;
&lt;/pre&gt;

This will generate the executable file submitjob.

&lt;pre class=&quot;screen&quot;&gt;
$ &lt;userinput&gt;./submitjob /bin/date&lt;/userinput&gt;
&lt;/pre&gt;

This will submit /bin/date to the local system.

Now we will submit a job to a remote machine via GRAM. We will replace the local resourcebroker adaptor with the GRAM adaptor:

Use an editor to edit =/home/train&lt;replaceable&gt;XX&lt;/replaceable&gt;/gatprg/adaptor-list-globus= to look like the below listing.

%NOTE% The =#= in front of the gram adaptor entry is deleted to enable the GRAM adaptor.

&lt;pre class=&quot;programlisting&quot;&gt;
/opt/gat/lib/GAT/adaptors/libgridftp_adaptor.so
/opt/gat/lib/GAT/adaptors/libgram_adaptor.so
/opt/gat/lib/GAT/adaptors/libfileops_adaptor.so
/opt/gat/lib/GAT/adaptors/liblogicalfile_adaptor.so
/opt/gat/lib/GAT/adaptors/libresourcebroker_adaptor.so
/opt/gat/lib/GAT/adaptors/libservicebroker_adaptor.so
/opt/gat/lib/GAT/adaptors/libfilestream_adaptor.so
/opt/gat/lib/GAT/adaptors/libendpoint_adaptor.so
/opt/gat/lib/GAT/adaptors/libadvertservice_adaptor.so
# /opt/gat/lib/GAT/adaptors/libtracing_adaptor.so
&lt;/pre&gt;


Now create a file that will hold a list of remote resources that you can submit to:

&lt;pre class=&quot;screen&quot;&gt;
$ &lt;userinput&gt;cat &gt; resources.ini
[resources.gridlab2globus]
memory.size = 0.256000
memory.accesstime = 0.25
memory.str = 1
machine.type = unknown
machine.node = gridlab2.phys.utb.edu
machine.nodecount = 1
machine.address = gridlab2.phys.utb.edu
machine.maxpos = 2
machine.minpos = 1
rms.name = none
rms.host = gridlab2.phys.utb.edu
rms.version = 10.000000
rms.queues = none
rms.availableprocs = 2
rms.load = 45
rms.maxtime = 0:45
rms.maxwalltime = 4:00
cpu.type = unknown
cpu.speed = 3.000000
cpu.count = 1
vm.count = 4
disk.size = 10.000000
disk.virtualsize = 1000
disk.filesystem = ext3
disk.accesstime = 0.01
disk.str = 1
bandwidth = 130
latency = 0.1
interconnect.type = none
ssh_type = globus
ssh_port = 2222
&lt;strong&gt;&lt;em&gt;[Ctrl+D]&lt;/em&gt;&lt;/strong&gt;&lt;/userinput&gt;
&lt;/pre&gt;

Now do:

&lt;pre class=&quot;screen&quot;&gt;
$ &lt;userinput&gt;export GAT_RESOURCE_INI=/home/train&lt;replaceable&gt;XX&lt;/replaceable&gt;/gatprg/resources.ini&lt;/userinput&gt;
&lt;/pre&gt;

Now run the same submit job program again:

&lt;pre class=&quot;screen&quot;&gt;
$ &lt;userinput&gt;./submitjob /bin/date&lt;/userinput&gt;
&lt;/pre&gt;

Log on to gridlab2 and look for result.out in your home directory. You should see todays date and current time in the file.


---++ EXTRA CREDIT
Write a GAT Program that transfers a binary (write a small program if needed) to a remote system and then submits it to the machine.


---++ Sample Files

   * [[%ATTACHURL%/copyfile.c][copyfile.c]]: GAT File copy Example
   * [[%ATTACHURL%/submitjob.c][submitjob.c]]: GAT Job Submission Example
   * [[%ATTACHURL%/submitgramjob.c][submitgramjob.c]]: GAT Gram submission program
   * [[%ATTACHURL%/gat_resources.ini][gat_resources.ini]]: GAT GRAM Resource file

---++!! Major Updates
-- Main.ForrestChristian - 29 Jan 2007: edited from original

