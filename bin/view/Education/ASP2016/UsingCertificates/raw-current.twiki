&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;%PUBURL%/%WEB%/WorkshopTutorialModules/exercises.css&quot;&gt;

---+!! Using Certificates

%TOC%

%STARTINCLUDE%
%EDITTHIS%

---+++ Default Credential Location

By default the user certificate and user key are installed in =~/.globus=. Unless overriden explicitly on command line, the clients use these credentials.

&lt;pre class=&quot;screen&quot;&gt;
[%LOGINNAME% ~]$ &lt;userinput&gt;ls -lt ~/.globus/&lt;/userinput&gt;
total 12
-rw-------  1 %LOGINNAME% %LOGINNAME% 1743 Jun 22 16:45 userkey.pem
-rw-------  1 %LOGINNAME% %LOGINNAME% 5011 Jun 22 16:37 usercert.pem
[%LOGINNAME% ~]$ 
&lt;/pre&gt;

---++++ Notes

The userkey.pem is the file containing encrypted private key. The permissions on that file are restrictive, such that only the owner can read or write to that file.

The usercert.pem is the certificate, containting the public key. This file is not encrypted and can be distributed freely.

---+++ Certificate Contents
This shows the an example of a certificate&#39;s contents. You can show the contents of your certificate using the =&lt;userinput&gt;grid-cert-info&lt;/userinput&gt;= command. %STARTMore%

&lt;pre class=&quot;programlisting&quot;&gt;
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 923 (0x39b)
        Signature Algorithm: md5WithRSAEncryption
        Issuer: C=US, O=SDSC, OU=SDSC-CA, CN=Certificate Authority/UID=certman
        Validity
            Not Before: Jun 22 00:46:02 2006 GMT
            Not After : Jul  2 00:46:02 2006 GMT
        Subject: C=US, O=SDSC, OU=SDSC, CN=Account Train99/UID=train99
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
            RSA Public Key: (2048 bit)
                Modulus (2048 bit):
                    00:af:93:40:80:ce:14:68:d6:6c:67:89:45:0c:3e:
                    30:98:38:35:c9:bd:b5:08:00:17:4c:e1:fb:38:50:
                    bd:97:f5:41:92:e7:6e:c4:6f:dc:ad:52:2c:e0:2a:
                    54:83:79:45:fb:5d:e2:f5:a5:cf:42:94:45:98:22:
                    d9:5b:81:93:e2:46:5f:e0:7f:71:5f:2d:b0:4a:82:
                    21:7d:f2:41:f7:b6:33:eb:59:93:f1:71:e3:79:ea:
                    c0:1b:5e:07:c6:d5:c2:67:41:56:73:d8:1f:a3:fb:
                    32:4b:f5:96:9f:65:f5:0a:f0:28:d5:90:d6:b0:dc:
                    4b:29:85:aa:8b:b7:d5:c0:f3:45:28:f9:af:80:7a:
                    88:40:40:21:60:ea:14:cd:8a:8e:53:40:67:c5:47:
                    51:bc:95:76:1e:90:b0:ee:ee:41:5a:ec:d4:4c:3c:
                    ea:eb:2f:f1:55:82:d8:b2:36:d9:92:88:bd:b6:93:
                    eb:46:69:3b:3a:e2:15:54:82:c0:30:4b:a9:54:3c:
                    af:52:4e:a5:71:40:a1:58:21:2e:ab:6d:c4:7c:59:
                    5d:68:b6:95:80:0e:12:91:51:90:0e:38:84:3f:de:
                    07:99:43:86:a1:0f:70:01:2f:3c:bf:e3:47:b2:16:
                    67:eb:00:6b:c4:7d:d8:e5:39:77:ac:29:cc:76:94:
                    2b:d3
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:FALSE
            Netscape Cert Type: 
                SSL Client, S/MIME, Object Signing
            Netscape Comment: 
                OpenSSL Generated Certificate
            Netscape CA Revocation Url: 
                http://www.sdsc.edu/CA/SDSC_CRL.pem
            X509v3 Subject Key Identifier: 
                E1:E3:C9:6E:A6:CF:2C:FC:D3:B7:51:F6:03:66:98:C5:18:71:60:F8
            X509v3 Authority Key Identifier: 
                keyid:BF:A3:87:2C:F6:0D:74:BD:48:6C:0E:27:BF:01:E4:F2:4F:46:BA:27
                DirName:/C=US/O=SDSC/OU=SDSC-CA/CN=Certificate Authority/UID=certman
                serial:00

    Signature Algorithm: md5WithRSAEncryption
        93:b2:78:07:d9:72:e2:71:d7:66:83:0c:d3:97:0c:9e:24:33:
        4e:e3:48:28:9c:44:7e:31:13:70:cc:f8:4a:5d:bc:64:84:3e:
        aa:fa:da:86:3f:5e:f8:4a:72:a1:59:57:5a:89:49:5a:2d:c9:
        09:5c:a5:69:6e:65:f7:85:8b:07:57:f1:6a:cb:6e:e5:00:17:
        5d:02:0a:b5:52:6f:92:93:5b:94:c3:84:59:66:f4:29:f1:6a:
        a2:ff:eb:5d:6a:89:43:1a:82:cf:d7:66:d3:f6:f6:b6:ba:45:
        02:ec:60:86:88:00:4d:09:53:fc:7e:a7:cd:71:d8:ff:72:4f:
        36:1f:15:b1:af:ca:d3:8c:ac:4c:1b:99:5a:de:98:7a:81:22:
        c3:c3:3f:65:04:06:b7:5b:de:1a:65:f1:69:74:51:67:bc:0d:
        d2:00:cd:f0:c1:b2:c1:12:ba:6a:30:01:4c:98:fe:7a:bb:a8:
        d8:1e:61:39:9f:c4:c3:f4:f5:ba:be:43:13:75:84:fe:82:93:
        a9:00:3e:35:75:60:f7:8c:68:58:74:ed:27:c6:99:49:a8:e4:
        c0:27:32:1f:5c:b0:06:ed:63:d7:f7:79:89:11:d2:4e:5d:31:
        33:6e:d4:fd:90:51:4b:65:29:c6:6c:68:55:e6:2d:41:6a:c1:
        58:2b:f4:d3
&lt;/pre&gt;

%ENDMore%

---++++ Notes

Since no parameters were specified on command line, the default credentials were used. Try the same command with =-help= to look at other options. We will use some later in the exercise.

The _Issuer DN_ is the distinguished name (DN) of the Certificate Authority who issues the certificate.

Note that the certificate has validity that determines valid from and valid until.

_Subject:_ is the distinguished name that this certificate is bound to.

_Key information_ is the public key.

The CA generates a digest of the key and other binding information (validity, DN and so on) and signs it. The signature is included at the end of the cerificate.

The algorithm used to generate digest and sign is important information, since the same algorithms should be applied at verification.

---+++ Using certificates to transfer file &lt;/h4&gt;

The client _globus-url-copy_ can be used to transfer files on the grid. It uses the GridFTP server to transfer the files. This requires that the client who is requesting transfer have valid credentials and be authorized to the transfer. We will go into authorization step later, for now you are already authorized, so lets try the  client.

&lt;ol&gt;
  &lt;li&gt;Run =&lt;userinput&gt;grid-proxy-destroy&lt;/userinput&gt;=. Ignore any errors.&lt;/li&gt;
  &lt;li&gt;Run the following commands to set the environment variables. This will ensure that the certificate and key are used, since by default _globus-url-copy_ uses proxy certificates.
      * &lt;userinput&gt;export X509_USER_CERT=.globus/usercert.pem&lt;/userinput&gt;
      * &lt;userinput&gt;export X509_USER_KEY=.globus/userkey.pem&lt;/userinput&gt;
   &lt;/li&gt;
   &lt;li&gt;Create a temporary file to move using _globus-url-copy_. You can use some text editor (e.g., vi) to create it and add some contents. For example:
&lt;pre class=&quot;screen&quot;&gt;
[%LOGINNAME% ~]$ &lt;userinput&gt;cat tempFile&lt;/userinput&gt;
Temporary file for testing globus-url-copy
[%LOGINNAME% ~]$ 
&lt;/pre&gt;&lt;/li&gt;
   &lt;li&gt; Use _globus-url-copy_ to move the file. 
&lt;pre class=&quot;screen&quot;&gt;
[%LOGINNAME%@gridlab1 ~]$ &lt;userinput&gt;globus-url-copy gsiftp://localhost:2811/home/%LOGINNAME%/tempFile  
     gsiftp://localhost:2811/home/%LOGINNAME%/destFile&lt;/userinput&gt;

error: globus_ftp_control: gss_init_sec_context failed
globus_gsi_gssapi: Error with gss credential handle
globus_credential: Valid credentials could not be found in any of the possible locations 
  specified by the credential search order.
Valid credentials could not be found in any of the possible locations specified by the 
  credential search order.

Attempt 1

globus_credential: Error reading host credential
globus_sysconfig: Error with certificate filename
globus_sysconfig: Error with certificate filename
globus_sysconfig: File is not owned by current user: /etc/grid-security/hostcert.pem is not 
  owned by current user

Attempt 2

globus_credential: Error reading proxy credential
globus_sysconfig: Could not find a valid proxy certificate file location
globus_sysconfig: Error with key filename
globus_sysconfig: File does not exist: /tmp/x509up_u502 is not a valid file

Attempt 3

globus_credential: Error reading user credential
globus_credential: Key is password protected: GSI does not currently support password 
  protected private keys.
OpenSSL Error: pem_lib.c:401: in library: PEM routines, function PEM_do_header: bad 
  password read

[%LOGINNAME% ~]$
&lt;/pre&gt;

The client first attempts to authenticate with the server, to prove its identity. To do that it needs valid credentials. The command attempts to use host credentials. Second, it attempts to use a proxy, which does not exist. Last, it attempts to use your user credentials. The command failed since the private key is encrypted.

A real, live person will be required each time to enter the passphrase. To alleviate the problems associated with this, that is to sign on once and run numerous time, we use proxies.

&lt;/li&gt;
   &lt;li&gt; Unset variables to use default locations
&lt;pre class=&quot;screen&quot;&gt;
[%LOGINNAME% ~]$ &lt;userinput&gt;unset X509_USER_CERT&lt;/userinput&gt;
[%LOGINNAME% ~]$ &lt;userinput&gt;unset X509_USER_KEY&lt;/userinput&gt;
[%LOGINNAME% ~]$ 
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- ***  Comments plugin to create comments table for section   ***    --&gt;
&lt;span style=&quot;text-align:center; font-weight:bold; font-size:1.2em;&quot;&gt;ADD A COMMENT&lt;/span&gt;
%STARTMore%

%TABLE{ }%
|  *COMMENT*  |  *NAME*  |  *DATE*  |
%COMMENT{ type=&quot;tableappend&quot; }%

%ENDMore%
&lt;!-- ***  End Comment                                            ***    --&gt;


%STOPINCLUDE%

&lt;!--                                                                            
      * Set LOGINHOST = workshop1.lac.uic.edu
      * Set LOGINIP = 131.193.181.56
      * Set GRIDHOST = tg-login.sdsc.teragrid.org
      * Set OTHERHOST = workshop2.lac.uic.edu
      * Set CERTSUBJECT = /O=Grid/OU=OSG/CN=Training User 99
      * Set LOGINNAME = train99
      * Set HOMEDIR = /home/%LOGINNAME%
--&gt; 

%BOTTOMMATTER%
-- Main.ForrestChristian - 2007 Jan 29: pulled from original %BR%
