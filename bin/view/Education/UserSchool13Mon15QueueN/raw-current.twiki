&lt;style type=&quot;text/css&quot;&gt;
pre em { font-style: normal; background-color: yellow; }
pre strong { font-style: normal; font-weight: bold; color: #008; }
&lt;/style&gt;

---+ Monday Exercise 2.5: Use queue _N_, $(Cluster), and $(Process)

The goal of this exercise is to learn to submit many jobs from a single =queue= statement, and then to control filenames and arguments per job.


---++ Running Many Jobs With One queue Statement

It turns out, the =queue= statement in an HTCondor submit file takes an optional argument: the number of jobs to queue. You can easily see this version of =queue= in action.

   1. From earlier this morning, find and copy a submit file that runs the =sleep= command
   1. In the submit file, change the =queue= statement to run many jobs instead:\
       &lt;pre class=&quot;file&quot;&gt;queue 10&lt;/pre&gt;\
       &lt;p&gt;You do not need to change any other statements, although you may wish to leave out the =output= and =error= statements (=sleep= produces no output).&lt;/p&gt;
   1. Submit the file; note the message from =condor_q=
   1. Look at your jobs in the queue; do you see all 10? Did they appear right away?
   1. When the jobs have finished, look through the resulting log file

Easy, right?


---++ Using queue _N_ With Output

What happens if you queue many jobs with a single =queue= statement, and those jobs produce output? There is no way to change the name of the output or error files between =queue= statements. You can probably guess what happens by now, but in case you want to experiment…

Here is a very simple Perl script (just to show another scripting language) that prints out a single random number.

&lt;pre class=&quot;file&quot;&gt;
#!/usr/bin/env perl
use strict;
use warnings;
print &quot;Random number: &quot; . rand() . &quot;\n&quot;;
&lt;/pre&gt;

   1. Create a simple submit file that runs this Perl program once
   1. Test your submit file to make sure it works — do you get the output?
   1. Change the submit file to run the program many times, say 10–20
   1. Submit it again, wait for all jobs to finish, then look at the output file

Not quite what you want, right?


---++ Using $(Process) to Separate Files

- define output and error in terms of $(process); get all output files
- add $(cluster); save across runs
- define arguments in terms of $(process); change script
- extra: queue 10 sleep, add +Something, queue 10 more, view in condor_q
