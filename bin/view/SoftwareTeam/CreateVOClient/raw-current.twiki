---+ Creating the VO Client package

---++ Overview

The VO Client package is just a conversion of the tarball created by GOC into the RPM format.

In order to build the RPM, one needs:
   * The tarball containing the:
      * =vomses= file
      * =edg-mkgridmap.conf= file
      * =gums.config.template= file
      * =vomsdir= directory tree, containing the lsc files.
   * The RPM spec file

---++ Making the tarball

To make the tarball:
   * start with a clean directory
   * copy in the =vomses=, =gums.template=,  and =edg-mkgridmap.conf= files and rename the edg-mkgridmap file:
&lt;pre&gt;
      wget http://repo.grid.iu.edu/pacman/tarballs/vo-package/vomses
      wget http://repo.grid.iu.edu/pacman/tarballs/vo-package/edg-mkgridmap.osg
      mv edg-mkgridmap.osg edg-mkgridmap.conf
      wget http://repo.grid.iu.edu/pacman/tarballs/vo-package/gums.template # TODO UNSURE
&lt;/pre&gt;
   * Create the vomsdir directory by downloading the .lsc files
&lt;pre&gt;
     wget --recursive --no-host-directories --cut-dirs=3 -A &quot;*.lsc&quot; http://repo.grid.iu.edu/pacman/tarballs/vo-package/vomsdir
&lt;/pre&gt;
&lt;!--
   * create the vomsdir directory with&lt;br&gt;
     =osg-make-vomsdir --vomsdir vomsdir --vomses vomses=
      * If you have issue running the script osg-make-vomsdir
        &lt;pre&gt; Copy the osg-make-vomsdir from /usr/sbin to /usr/bin&lt;/pre&gt;
        &lt;pre&gt; Make sure the script&#39;s permission is set to 755 &lt;/pre&gt;
      * If you do not have the osg-make-vomsdir script it can be retrieved with&lt;br&gt;
       &lt;pre&gt;rpm -Uvh http://repo.grid.iu.edu/osg-testing/x86_64/osg-make-vomsdir-1.0.0-1.osg.noarch.rpm&lt;/pre&gt;
--&gt;
   * In a separate directory, unpack the _old_ vo-client tarball (from the upstream source cache)
   * diff the two directories, and compare the changes to the changelog posted at https://twiki.grid.iu.edu/bin/view/Operations/PackageV44 (replace &#39;44&#39; with the current version)

&lt;!--
&lt;verbatim&gt;
grep groupToAccountMappings=\&#39;cdf gums.config.template | cut -d\&#39; -f2 | perl -ne &#39;print join(&quot;\n&quot;, split(&quot;, &quot;, $_))&#39; | sort # gums 1.3 format
grep hostGroup gums.config.1.1.template | egrep -o &#39;groups=&quot;[^&quot;]+&quot;&#39; | cut -d\&quot; -f2 | perl -ne &#39;print join(&quot;\n&quot;, split(&quot;,&quot;, $_))&#39; | sort # gums 1.1 format
&lt;/verbatim&gt;
--&gt;
   * Follow the instructions in the attached [[%ATTACHURL%/gums-template-conversion.txt][gums-template-conversion.txt]] file to convert it from GUMS 1.1 (1.2?) format to GUMS 1.3 format. Name the result =gums.config.template=.  See also the [[#Automated_GUMS_Conversion][Automated GUMS Conversion]] section below for a scripted version of this step.
   * Move the files into a subdirectory to include in the tarball:
&lt;pre&gt;
      VERSION=44  # set appropriately
      mkdir vo-client-$VERSION
      mv vomses gums.config.template edg-mkgridmap.conf vomsdir vo-client-$VERSION/
      tar -czf vo-client-$VERSION-osg.tar.gz vo-client-$VERSION/
&lt;/pre&gt;

Upload the tarball into the [[https://twiki.grid.iu.edu/bin/view/SoftwareTeam/RPMDevelopmentGuide#Upstream_Source_Cache][upstream source cache]], in the&lt;br&gt;
=vo-client/VERSION/= directory.

---++ Automated GUMS Conversion

The above [[%ATTACHURL%/gums-template-conversion.txt][instructions]] outline a procedure for converting the osg gums.config template from GUMS 1.1 format to 1.3 format.  Because setting up a GUMS instance for this can be time consuming and tricky to get right, a script was written to automate the procedure on a Fermi VM.  The script lives in svn under: =$SVN/software/tools/convert-osg-gums-template-for-vo-client.sh= .

To use it:

   * Create a new Fermi VM (el5 or el6)
   * Copy the script and the new =gums.template= to be converted to the /root homedir on the VM.
   * Log into the VM as root, make sure the script is executable, and run against the gums template:
&lt;pre&gt;
      $ ssh root@el6-vo-client
      # wget https://vdt.cs.wisc.edu/svn/software/tools/convert-osg-gums-template-for-vo-client.sh
      # chmod +x convert-osg-gums-template-for-vo-client.sh
      # ./convert-osg-gums-template-for-vo-client.sh gums.template
&lt;/pre&gt;

   * It takes a little while to install and set up gums and related packages, but if it succeeds, you should see a message that says &quot;User group has been saved.&quot;, and a file =gums.config.template= should be written in the current directory.
   * The newly converted =gums.config.template= should be compared to the old version of that file (from the previous vo-client package) to ensure that the only the differences are the changes for this release.  (I have had to manually strip the extra test account stuff.)  The &#39;meld&#39; program is a nice graphical diff tool that I use for comparing them.

---++ RPM spec file maintenance

The OSG RPM spec file is [[https://twiki.grid.iu.edu/bin/view/SoftwareTeam/RPMDevelopmentGuide#Revision_Control_System][maintained in Subversion]].

The VO Client package is located in&lt;br&gt;
=native/redhat/trunk/vo-client=

There are two files that need to be maintained:
   * =osg/vo-client.spec= - This is the RPM spec file proper. One needs to update the version (and/or the release number) every time a new RPM is created.
   * =upstream/release_tarball.source= - This file contains the relative path of the tarball within the [[https://twiki.grid.iu.edu/bin/view/SoftwareTeam/RPMDevelopmentGuide#Upstream_Source_Cache][upstream source cache]]. Since the tarball file name will change with every new RPM version, this file has to be changed accordingly.

---++ RPM building

After installing the [[https://twiki.grid.iu.edu/bin/view/SoftwareTeam/VDTRPMBuildBox][osg-build tools]], check out a clean copy from svn, then:
   * =osg-build prebuild .=
   * Once there are no errors, run&lt;br&gt;
     =osg-build koji . --scratch=
      This can be done without making any permanent change.
   * Once that builds successfully, run&lt;br&gt;
     =osg-build koji .=
      This is permanent, unlike when you ran with =--scratch=.  You cannot rebuild this version of the RPM again - you must bump the release number and edit the changelog.

This will push the RPMs into the OSG development repository.  Koji requires additional setup compared to rpmbuild; [[SoftwareTeam.KojiWorkflow][see the documentation here]].

---++ Promotion to testing and release:

---+++ Policies

Read [[SoftwareTeam.ReleasePolicy][Release Policy]].

These should be synchronized internally with other GOC update activities.


