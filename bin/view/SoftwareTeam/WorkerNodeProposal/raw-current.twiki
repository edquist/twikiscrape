---+ Proposal — Project 1 — Basic Worker Node Client RPMs

---++ Requirements

---+++ Concise Statement

Deliver the software components of the OSG’s current Worker Node Client (Pacman) package as a set of RPMs.

---+++ Deadline

No specific deadline has been requested.

---+++ Stakeholders

The OSG site administrators. This has been requested frequently by many site administrators.

---++ Proposed Scope of Work

Deliver basic binary RPMs, including basic configuration, for the current Worker Node Client package for OSG. By “basic”, we mean a direct conversion of the current Pacman binaries, lacking many features commonly associated with RPMs found in large distributions. Specifically:

   * These will install into /opt/vdt instead of FHS locations (such as /opt/usr), 
   * There will not be source RPMs, only binary RPMs. 
   * An environment setup file will still be required, etc...) 

A basic binary RPM installs without error and provides functioning software.

   * *Required components:* dccp, EDG !GridFTP client, Fetch CRL, gLite FTS (File Transfer Service) client, Globus Toolkit base &amp; RLS clients, LCG Utilities, LCG File Catalog (LFC) client, !MyProxy client, Pegasus worker, SRM client Fermi, SRM client LBNL, !UberFTP, VOMS client
   * *Dependencies:* CGSI-gSOAP, GFAL, gLite Data Delegation API, gLite Data Delegation Client, gLite Data Util C, gLite Service Discovery API C, gLite Service Discovery BDII, gLite Service Discovery File-C, GPT, Gridsite Shared
   * *Configurgation package:* SRM client Fermi
   * *Components to get from other repositories:* CA certificates (OSG or VDT), cURL (base OS), Expat (base OS), and Wget (base OS).

Thus, there are a total of 23 software components to deliver, 1 of which needs separate configuration. These components will produce a total of 33 RPMs. [[http://vdt.cs.wisc.edu/internal/native/project-1-details.html][Further details]] about components and RPMs are available.

---++ Proposed WBS

*Note:* For our estimates of effort, we are using “FTE weeks” according to Chander’s definition: “1 FTE week (at CS UW-Madison) is the amount of work that can be reasonably completed by 1 person in one week working on one task (at CS UW-Madison). This implicitly covers all the overheads and interrupts that occur in this environment.” Thus, actual calendar time may be greater, if other projects or delays intervene.

%TABLE{sort=&quot;off&quot;}%
| *WBS* | *Task* | *Estimate* | *Notes* |
|*1* | *Make binary RPMs of software components* |||
|1.1 | Instrument builds to produce RPMs | 1.0 FTE weeks| 23 builds |
|1.2 | Add necessary post-install steps | 1.0 FTE weeks| |
|1.3 | Test and fix RPM installation | 2.0 FTE weeks| 31 RPMs |
|*2* | *Make configuration RPMs* |||
|2.1 | Replicate install config functionality | 0.5 FTE weeks| That is, vdt-untar |
|2.2 | Port, package, and test SRM Fermi configuration | 0.5 FTE weeks| |
|*TOTAL* || *5.0 FTE weeks* | ** |
