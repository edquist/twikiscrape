---+!! Migration from Oracle JDK 6 (WIP)

%TOC%

[[https://jira.opensciencegrid.org/browse/SOFTWARE-890][Main Oracle JDK 6 Deprecation Ticket (SOFTWARE-890)]]

---++ Background

Currently, several of our packages are Java-based, and we build them against
the Oracle JDK 6. Oracle is officially discontinuing public support for Java 6
at the end of February 2013, including security fixes. This is a problem for us due to the
numerous security flaws in Java that people keep discovering. Therefore we must
move away from Oracle JDK 6.

---++ Possible Replacements
[[https://jira.opensciencegrid.org/browse/SOFTWARE-892][Oracle JDK 6 Replacements Ticket (SOFTWARE-892)]]

Current options on the table are:
   * Oracle JDK 7
   * !OpenJDK 6
   * *OpenJDK 7* (most likely)

---++ Java Software in Use (TODO)

Most of this software will need to be certified to work on whichever Oracle JDK 6
replacement we plan to switch to. However, see the notes below.

---+++ Lists

(As we narrow down the items we require, these lists should be turned into a
table or a spreadsheet with information on the status of the packages)

---++++ Packages depending directly on Oracle JDK

   * bestman2
   * emi-trustmanager-tomcat
   * gridftp-hdfs
   * gums
   * hadoop-0.20
   * jclassads
   * voms-admin-server
   * osg-ce
   * osg-client
   * osg-gridftp-xrootd
   * osg-se-bestman
   * osg-se-bestman-xrootd
   * osg-se-hadoop
   * osg-wn-client
   
---++++ Packages depending indirectly on Oracle JDK

   * glite-ce-common-java
   * glite-ce-monitor
   * glite-jdl-api-java
   * glite-ce-cream (we don&#39;t ship it yet)
   * glite-ce-cream-api-java (we don&#39;t ship it yet)
   * glite-ce-osg-ce-plugin
   * gratia (via glite-trustmanager-tomcat)
   * rsv-metrics (via bestman2-client)
   * xrootd-hdfs
    
---++++ OSG Software depending on Java
   * dcache-srmclient
   * gratia 
   * hadoop (ie Hadoop 2.0.0)
   * pegasus

---++++ Dependencies of OSG Software depending on Java
   * argus-* (argus-pep-api-java, cemon build only)
   * cog-jglobus*
   * cryptix
   * emi-trustmanager*
   * jetty
   * jglobus
   * maven*
   * puretls
   * slf4j
   * voms-api-java
   * xalan-j2
   * xerces
   * zookeeper (hadoop builds)

---+++ Notes:

Since we are planning to deprecate =glite-ce-monitor= (aka !CEMon) in favor of
=osg-info-services=, we may be able to get rid of it and its dependencies,
namely:
   * argus-*
   * glite-ce-monitor
   * glite-ce-osg-ce-plugin
   * jclassads

Since we are planning to deprecate =jglobus-1= in favor of =jglobus-2=, we may
be able to get rid of its dependencies, namely:
   * cog-jglobus
   * cryptix
   * puretls


---++ Groups to Contact (TODO)

Since we do not even remotely have the resources to re-certify all the software
we ship, we should ask the upstream developers for help and information
whenever we can.

(TODO: This list should probably also be a table, and should contain (a) group name; (b); contact info; (c) packages they support; (d) status)

   * gratia team (gratia)
   * EGI (glite-*?)
   * dCache team (dcache-srmclient, others?)
   * ...


---++ Other items

---+++ Koji

We will create new koji tags and targets for this:

| *Target* | *Build Tag* | *Destination Tag* |
| el5-osg-newjdk | el5-osg-newjdk-build | el5-osg-newjdk |
| el6-osg-newjdk | el6-osg-newjdk-build | el6-osg-newjdk |
| kojira-fake-el5-osg-newjdk &lt;sup&gt;*&lt;/sup&gt; | el5-osg-newjdk | kojira-fake |
| kojira-fake-el6-osg-newjdk &lt;sup&gt;*&lt;/sup&gt; | el6-osg-newjdk | kojira-fake |

&lt;sup&gt;*&lt;/sup&gt; These targets cause kojira to automatically update the elX-osg-newjdk repos.

Installs can be tested directly out of the elX-osg-newjdk repos.
(I&#39;ll post a .repo file for them either in this page or on the JIRA ticket).

---+++ Promotion Policy

Builds that have been tested should go in =elX-osg-upcoming-testing= instead of =elX-osg-testing=.
See UpcomingSoftwareRepoProposal.

---+++ SVN

We&#39;ll put any changes we need to make for the builds in =$SVN/native/redhat/branches/newjdk=

---+++ java-1.7.0-openjdk

Currently, only the most up-to-date EL5 distros have openjdk 7.
We will need some way of making it available to users who haven&#39;t updated their distros.

One way of doing this is to pass-through the RPM.
However, we would need to keep updating the RPM we are passing through as openjdk gets updated.
Furthermore, since we would be behind any official updates to the jdk, this
would bother people whose distros _are_ up-to-date and expect to get the latest
when they yum update.

Perhaps we could add &quot;exclude=java-1.7.0-openjdk*&quot; to our .repo files and
instruct users to remove it if they need openjdk. (Or include it commented
and people that want to update their jdk regularly can uncomment it).


---++ Upgrade instructions

NOTES: java uses the &quot;alternatives&quot; system, so in theory it is possible to
install different versions of the jdk side-by-side and pick which one to use.
In practice, not so much. The package =jdk= itself does not use alternatives
and instead creates a symlink =/usr/bin/java -&amp;gt;
/usr/java/default/bin/java=, which alternatives is _not_ going to overwrite.
It&#39;s actually =java-1.6.0-sun-compat= that provides the alternatives support
for oracle =jdk=.  But that gets installed _after_ =jdk=, at which point the
=/usr/bin/java= symlink is already screwed up.

On the flip side, =jdk= isn&#39;t going to overwrite the =/usr/bin/java= symlink if
it already exists, so if some other version of java is installed _first_, then
the symlink will point to =/etc/alternatives/java=, and once
=java-1.6.0-sun-compat= is installed, the user can use =alternatives --config
java= to pick which runtime they want to use.

Since we can&#39;t be sure which situation the user is going to be in, we can
provide the following instructions which, while clunky, should work for either
the &quot;installed oracle jdk first&quot; or the &quot;installed other jdk first&quot; situation:

   1. One of these two:
      1. =yum install java-1.7.0-openjdk java-1.7.0-openjdk-devel=
      1. (once we&#39;ve switched our packages to require openjdk7) =yum update --enablerepo=osg-upcoming=
   1. =yum erase jdk java-1.6.0-sun-compat= (nothing else should get uninstalled by this)
   1. =yum reinstall java-1.7.0-openjdk java-1.7.0-openjdk-devel=
   1. =yum install jdk java-1.6.0-sun-compat=
   1. =alternatives --config java= and pick one of them
   1. =alternatives --config javac= and pick the same one
   1. Run =java -version= and =javac -version= to make sure the right versions are symlinked. They should both be 1.7.something
   1. Restart java services, for example tomcat. See if they work
   1. If everything works, =yum erase jdk java-1.6.0-sun-compat=

Once we&#39;re done with fixing our packages, here&#39;s the situations that need to
be tested:

   * ( ) Fresh install of osg, with java not already on the system
   * ( ) Fresh install of osg, with oracle jdk on the system
   * ( ) Fresh install of osg, with some other jdk on the system
   * ( ) Upgrade of osg, with oracle jdk on the system
   * ( ) Upgrade of osg, with some other jdk on the system

---++ Testing

---+++ GUMS

Main.MatyasSelmeci: Briefly did a functional test of GUMS on EL6. 
Set up FC machines in parallel with GUMS from osg-testing:
&lt;pre class=&quot;rootscreen&quot;&gt;
%UCL_PROMPT_ROOT% yum install -y osg-ca-certs gums-{client,service} fetch-crl globus-proxy-utils
%UCL_PROMPT_ROOT% service mysqld start
%UCL_PROMPT_ROOT% mysql_secure_installation
%UCL_PROMPT_ROOT% mysql -p mysql
&gt;&gt; create user &#39;gums&#39;@&#39;localhost&#39; identified by &#39;GUMSPASSWORD&#39;;
&gt;&gt; grant all privileges on *.* to &#39;gums&#39;@&#39;localhost&#39; with grant option;
%UCL_PROMPT_ROOT% gums-setup-mysql-database --user gums --host `hostname`:3306 --password GUMSPASSWORD
%UCL_PROMPT_ROOT% gums-add-mysql-admin YOUR_DN
%UCL_PROMPT_ROOT% fetch-crl
%UCL_PROMPT_ROOT% sed -i -e &quot;s/localhost/`hostname`/&quot; /etc/gums/gums-client.properties
%UCL_PROMPT_ROOT% mkdir -p /etc/grid-security/http
%UCL_PROMPT_ROOT% cd /etc/grid-security/http; for x in cert key; do rm -f http$x.pem; cp -f ../host$x.pem http$x.pem; done
%UCL_PROMPT_ROOT% chown -R tomcat:tomcat /etc/grid-security/http
%UCL_PROMPT_ROOT% /var/lib/trustmanager-tomcat/configure.sh
&lt;/pre&gt;
(replace YOUR_DN with your DN, and GUMSPASSWORD with a password for the gums db user)
Then I edited =/etc/gums/gums.config= and made the following changes:
&lt;verbatim class=&quot;file&quot;&gt;
--- old 2012-04-25 16:29:14.000000000 -0500
+++ new 2012-04-25 16:32:31.000000000 -0500
@@ -31,6 +31,8 @@
                         access=&#39;read self&#39;
                         description=&#39;Testing GUMS-status with GIP Probe&#39;
                         persistenceFactory=&#39;mysql&#39;/&gt;
+
+                &lt;manualUserGroup persistenceFactory=&#39;mysql&#39; name=&#39;LOGIN&#39;/&gt;
        &lt;/userGroups&gt;

        &lt;accountMappers&gt;
@@ -38,6 +40,8 @@
                        name=&#39;gums-test&#39;
                        description=&#39;Testing GUMS-status with GIP Probe&#39;
                        accountName=&#39;GumsTestUserMappingSuccessful&#39;/&gt;
+
+                &lt;groupAccountMapper name=&#39;LOGIN&#39; accountName=&#39;LOGIN&#39;/&gt;
        &lt;/accountMappers&gt;

        &lt;groupToAccountMappings&gt;
@@ -48,13 +52,18 @@
                        accountingVo=&#39;&#39;
                        userGroups=&#39;gums-test&#39;
                        accountMappers=&#39;gums-test&#39;/&gt;
+
+                &lt;groupToAccountMapping name=&#39;LOGIN&#39; userGroups=&#39;LOGIN&#39; accountMappers=&#39;LOGIN&#39;/&gt;
        &lt;/groupToAccountMappings&gt;

        &lt;hostToGroupMappings&gt;
+        &lt;!--
                &lt;hostToGroupMapping
                        groupToAccountMappings=&#39;gums-test&#39;
                        description=&#39;&#39;
                        cn=&#39;*/?*.fnal.gov&#39;/&gt;
+        --&gt;
+                &lt;hostToGroupMapping cn=&#39;HOSTNAME&#39; groupToAccountMappings=&#39;LOGIN&#39;/&gt;
        &lt;/hostToGroupMappings&gt;

 &lt;/gums&gt;
&lt;/verbatim&gt;
(replace =HOSTNAME= with the hostname and =LOGIN= with your login)

At this point you can do the following:
&lt;pre class=&quot;rootscreen&quot;&gt;
%UCL_PROMPT_ROOT% service tomcat6 start
%UCL_PROMPT_ROOT% gums manualGroupAdd LOGIN YOUR_DN
%UCL_PROMPT_ROOT% gums-host generateGridMapfile
%UCL_PROMPT_ROOT% gums-host mapUser YOUR_DN
&lt;/pre&gt;
as well as try out the web interface by going to =https://HOSTNAME:8443/gums=


Once I verified that it worked on both machines, I shut off tomcat6 on the experimental machine, and did the following to replace oracle jdk with openjdk 7:
&lt;pre class=&quot;rootscreen&quot;&gt;
%UCL_PROMPT_ROOT%; yum install java-1.7.0-openjdk{,-devel}
%UCL_PROMPT_ROOT%; yum erase java-1.6.0-openjdk
%UCL_PROMPT_ROOT%; rpm -e --nodeps jdk java-1.6.0-sun-compat
&lt;/pre&gt;
Then I restarted tomcat6, tried the previous tests, and had no problems.
