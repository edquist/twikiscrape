---++ Koji permissions and policy

These are some notes I wrote on koji acls/policy doing some source diving in the koji code.

EDIT: I later found some documentation at [[https://docs.pagure.org/koji/defining_hub_policies/]]. Go read it, that page has better examples.

---+++ Default policies (defined in =hub/kojixmlrpc.py=)
&lt;pre&gt;
build_from_srpm =
       has_perm admin :: allow
       all :: deny
build_from_repo_id =
       has_perm admin :: allow
       all :: deny
channel =
       has req_channel :: req
       is_child_task :: parent
       all :: use default
package_list =
       has_perm admin :: allow
       all :: deny
vm =
       has_perm admin win-admin :: allow
       all :: deny
&lt;/pre&gt;

If =MissingPolicyOk= is true (default), then policies that do not exist default to &quot;allow&quot;.

---+++ Policy syntax

Policies are set in the =[policy]= section of =/etc/koji-hub/hub.conf=

Each policy definition starts with

&lt;pre&gt;policy_name =&lt;/pre&gt;

The rest of the definition is indented.
The lines in the policy definition have the following format:

Simple tests:
&lt;pre&gt;
test [params] [&amp;&amp; test [params] ...] :: action-if-true
test [params] [&amp;&amp; test [params] ...] !! action-if-false
&lt;/pre&gt;
Complex tests:
&lt;pre&gt;
test [params [&amp;&amp; ...]] :: {
   test [params [&amp;&amp; ...]] :: action
   test [params [&amp;&amp; ...]] :: {
      ...
      }
}
&lt;/pre&gt;

The following generic tests are defined in =koji/policy.py=:
   $ =true= / =all= : always true
   $ =false= / =none= : always false
   $ =has FIELD= : true if policy data contains a field called FIELD
   $ =bool FIELD= : true if FIELD is true
   $ =match FIELD PATTERN1 [PATTERN2 ...]= : true if FIELD matches any of the patterns (globs)
   $ =compare FIELD OP NUMBER= : compare FIELD against a number. OP can be &lt;code&gt;&amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;=, =, !=&lt;/code&gt;

the following koji-specific tests are defined in =hub/kojihub.py=:
   $ =buildtag PATTERN1 [PATTERN2 ...]= : true if the build tag of a build matches a pattern
   $ =fromtag PATTERN1 [PATTERN2 ...]= : true if the tag we&#39;re moving a package from matches a pattern
   $ =has_perm PATTERN1 [PATTERN2 ...]= : true if user has any matching permission
   $ =hastag TAG= : true if the build has the tag TAG
   $ =imported= : true if the build was imported
   $ =is_build_owner= : true if the user doing this task owns the build
   $ =is_child_task= : true if the task is a child of some other task
   $ =is_new_package= : true if the package being looked at is new (i.e. doesn&#39;t have an &#39;id&#39; yet)
   $ =method PATTERN1 [PATTERN2 ...]= : true if the method matches a pattern
   $ =operation PATTERN1 [PATTERN2 ...]= : true if current operation matches any of the patterns
   $ =package PATTERN1 [PATTERN2 ...]= : true if the package name matches any of the patterns
   $ =policy POLICY= : true if the named policy is true
   $ =skip_tag= : true if the skip_tag option is true
   $ =source PATTERN1 [PATTERN2 ...]= : true if source matches patterns
   $ =tag PATTERN1 [PATTERN2 ...]= : true if the tag name matches any of the patterns
   $ =user PATTERN1 [PATTERN2 ...]= : true if username matches a pattern
   $ =user_in_group PATTERN1 [PATTERN2 ...]= : true if the user is in any matching group
   $ =vm_name PATTERN1 [PATTERN2 ...]= : true if vm name matches a pattern

The actions are:
   $ =allow= : allow the action
   $ =deny= : deny the action
   $ =req= : ?
   $ =parent= : ?
   $ =use default= : ?

---+++ Default permissions

These are the permissions that people can be given in koji:
   * =admin=
   * =build=
   * =repo=
   * =livecd=
   * =maven-import=
   * =win-import=
   * =win-admin=
   * =appliance=

As far as I can tell, additional permissions have to be manually added into the &#39;permissions&#39; table in postgres.

The following permissions are checked by name in the koji command-line utility (i.e. policies are not used):

   $ =admin= : =add-group=, =add-tag=, =add-target=, =clone-tag=, =edit-target=, =remove-tag=, =remove-target=, =wrapper-rpm=
   $ =maven-import= : =import-archive= with the =--type=maven= option
   $ =win-import= : =import-archive= with the =--type=win= option

=repo= is needed for =regen-repo=.

I haven&#39;t found out where some of the other permissions are used.


---+++ Adding permissions

Go into postgres and run
&lt;pre&gt;
insert into permissions values ((select nextval(&#39;permissions_id_seq&#39;)), &#39;NAME&#39;);
&lt;/pre&gt;
where NAME is the name of the permission you want to create.
You may now grant people that permission and use that name in policies.


---+++ Where policies are used and what policy data is passed on:

---++++!! build_from_srpm

*source:*
   $ =builder/kojid:BuildTask.handler= : used when source url points to an SRPM (as opposed to an scm) and the build is not a scratch build.

*policy data:*
   $ =user_id= : the owner of the task
   $ =source= : the url of the source file
   $ =task_id= : the id of the task
   $ =build_tag= : the id of the build tag
   $ =skip_tag= : true if we&#39;re not tagging this build (=--scratch= or =--skip-tag= passed on the command line)
   $ =target= : the build target (only if we have one?)
   $ =tag= : the destination tag (only if =skip_tag= is false)

---++++!! build_from_repo_id

*source:*
   $ =builder/kojid:BuildTask.handler= : used when the =--repo-id= option is passed to =koji build=

*policy data:*
same as =build_from_srpm=

---++++!! package_list

*source:*
   $ =hub/kojihub.py:pkglist_add= : =add-pkg=, =block-pkg=, =set-pkg-arches=, =set-pkg-owner= commands

*policy data:*
   $ =action= : &#39;add&#39;, &#39;update&#39;, &#39;block&#39; depending on what is being done
   $ =force= : true if =--force= is passed on the command line
   $ =package= : package info (the id I think?)
   $ =tag= : the id of the tag we&#39;re trying to add the package to/package is in

*source:*
   $ =hub/kojihub.py:pkglist_remove= : used internally by the =koji clone-tag= command?

*policy data:*
same as above, except =action= is &#39;remove&#39;

*source:*
   $ =hub/kojihub.py:pkglist_unblock= : =unblock-pkg= command

*policy data:*
same as above, except =action= is &#39;unblock&#39;

---++++!! tag

NOTE: !RootExports is the class containing functions exported via XMLRPC.
In general, each function corresponds to a koji task.

*source:*
   $ =hub/kojihub.py:RootExports.tagBuild= : tagging builds

*policy data:*
   $ =build= : the id of the build
   $ =fromtag= : the id of the tag we&#39;re moving the build from, if there is one
   $ =operation= : &#39;tag&#39; or &#39;move&#39;
   $ =tag= : the id of the tag

*source:*
   $ =hub/kojihub.py:RootExports.untagBuild= : untagging builds

*policy data:*
same as above, except =operation= is &#39;untag&#39;, and =tag= is None

*source:*
   $ =hub/kojihub.py:RootExports.moveAllBuilds= : moving all builds of a package from tag1 to tag2

*policy data:*
same as for =tagBuild=, except =operation= is &#39;move&#39;.
The policy is checked once for each build being moved.

*source:*
   $ =hub/kojihub.py:HostExports.tagBuild= : tagging builds (&quot;host version&quot; ?)

*policy data:*
same as for =tagBuild=, plus =user_id=

---++++!! vm

*source:*
   $ =hub/kojihub.py:RootExports.winBuild= : windows builds in a vm (=win-build= command)

*policy data:*
   $ =tag= : the destination tag
   $ =vm_name= : the name of the vm



---+++ Examples

---++++!! Let people with the &quot;build&quot; permission also add packages and build SRPMs

&lt;pre&gt;
package_list = 
    has_perm admin :: allow
    has_perm build &amp;&amp; match action add update :: allow
    all :: deny

build_from_srpm =
    has_perm admin build :: allow
    all :: deny
&lt;/pre&gt;


---++++!! Promotion policy for different teams

   * Software team members can tag any package as testing/release.
   * Operations team members can tag vo-clients as testing/release.
   * Security team members can tag CA packages as testing/release.

&lt;pre&gt;
promotion =
   has_perm software-team :: allow
   has_perm operations-team &amp;&amp; package vo-client :: allow
   has_perm security-team &amp;&amp; package *-ca-certs* :: allow
   all :: deny

tag =
    has_perm admin :: allow
    operation tag :: {
        tag *testing *release* &amp;&amp; policy promotion :: allow
        tag *testing *release* !! allow
    }
    operation untag :: {
        fromtag *testing *release* &amp;&amp; policy promotion :: allow
        fromtag *testing *release* !! allow
    }
    operation move :: {
        tag *testing *release* &amp;&amp; policy promotion :: allow
        fromtag *testing *release* &amp;&amp; policy promotion :: allow
        tag *testing *release* !! {
            fromtag *testing *release* !! allow
        }
    }
    all :: deny

&lt;/pre&gt;





-- Main.MatyasSelmeci - 05 Oct 2016
