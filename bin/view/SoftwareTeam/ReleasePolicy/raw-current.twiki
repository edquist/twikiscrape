---+ Software Release Policy

This document doesn&#39;t talk about technical details of how to do a release. [[SoftwareTeam.HowToCutRelease][The release process is discussed elsewhere]].

---++ 1.0 Software Repositories

The Software Team maintains five primary software repositories

   1. *osg-development*: This is the &quot;wild west&quot;, the place where software goes while it is being worked on by the software team.
   1. *osg-testing*: This is where software goes when it is ready for wide-spread testing.
   1. *osg-prerelease*: This is where software goes just before being released, for final verification.
   1. *osg-release*: This is the official, production release of the software stack. This is the main repository for end-users.
   1. *osg-contrib*: This is where software goes that is not officially supported by the OSG Software Team, but we provide as a convenience for software our users might find useful. 

We also create a repository per release, called *osg-release-VERSION* (such as osg-release-3.0.4). This is intended mostly for testing purposes, though users may occasionally find it useful.

Occasionally there may be other repositories for specific short-term purposes.

---++ 2.0 Version Numbers

There is a single version number that is used to summarize the contents of the _osg-release_ repository. Having a single version number is very useful for a variety of reasons, including:

   1. Every time changes are made to the _osg-release_ repository, we update the version number and write release notes.
   1. We have a shorthand for referring to the state of the repository; we can talk about specific releases. 

However, there are important caveats about the version number:

   i. Even if a user says they have installed Version X, it may not be an accurate reflection of what they have installed: they may have chosen to update some of their software from a previous version. To truly understand what they have installed, the entire set of RPMs installed on their computer must be considered.
   i. The version number is only meaningful in the _osg-release_ repository, though for technical reasons it&#39;s present (as an RPM) in other repositories. 

The version number is communicated in two ways:

   a. Every time a new release is made, the version number is updated. All release notes and communication to users about this release uses the new version number. 
   a. There is an _osg-version_ RPM that reports the version of the release. Major metapackages (osg-ce, osg-client, etc...) depend on this RPM. The RPM itself has the version number in it. It also provide a program that reports the version, and a text file that contains the version number. 

The version number will be of the form X.Y.Z. As of this writing, version numbers are 3.0.Z, where Z indicates a minor revision. 

---++ 3.0 Progression of repositories

This figure shows the progression of repositories that packages will go through:

&lt;verbatim&gt;

 osg-development -&gt; osg-testing -&gt; osg-prerelease -&gt; osg-release
                               \
                                -&gt; osg-contrib


&lt;/verbatim&gt;
&lt;!--
&lt;img src=&quot;%ATTACHURLPATH%/software-release-process.png&quot; alt=&quot;software-release-process.png&quot;/&gt;    
--&gt;

---++ 4.0 Release policies

---+++ 4.1 Adding packages to osg-development

New packages will only be added to _osg-development_ with the permission of the OSG Software Coordinator. Updates can be done at any time without permission, but developers should be careful if their updates might be significant, particularly if an update might cause series compatibility issues. In cases where there is uncertainty, discuss it with the Software Coordinator.

---+++ 4.2 Moving packages to osg-testing

A package may be moved from _osg-development_ to _osg-testing_ when the individual maintainer of that package decides that it is ready for widespread testing and when the package is eventually intended for a production release, and when approved by the OSG Software Coordinator. Approval is needed because this is when we first make packages available to people outside of the OSG Software Team.

In the past, every time the _osg-testing_ cache is updated, the [[SoftwareTeam.PreReleaseNotes][pre-release notes]] page was updated. This lists all of the new or changed RPMs that have put into the _osg-testing_ cache. This is important for our testers, so they can see what has changed. This page is now obsolete.

---+++ 4.3. Moving packages to osg-prerelease; Readying the release

When we are ready to make a production release, we first move the correct subset of packages from _osg-testing_ into _osg-prerelease_. This should be done after checking with the OSG Software Coordinator to verify that it&#39;s okay to release the software. The intention of _osg-prerelease_ is to do a final verification that we have the correct set of packages for release and that they really work together. This is important because the _osg-testing_ repository might contain a mix of packages that are ready for release with packages that are not ready for release. When moving packages to _osg-prerelease_, the team member doing the release will:

   * Update the osg-version RPM to reflect the new version. Push this RPM through _osg-development_, _osg-testing_, and into _osg-prerelease_.
   * Find the correct set of packages to push from _osg-testing_ into _osg-prerelease_.
   * At a minimum, run the automated test suite on the contents of _osg-prerelease_. In cases were more extensive testing is needed, or the test suite doesn&#39;t sufficiently cover the testing needs, do specific ad-hoc testing. (If appropriate, consider proposing extensions to the automated test suite.)

We expect that in most cases, this process of updating and testing the _osg-prelease_ repository will be less than one day. If there are urgent security updates to release, this process may be shortened.

Note that, except in exceptional circumstances, we release software on Tuesdays. Therefore the osg-prerelease cache is probably updated and readied on a Monday (or perhaps late the previous week).

---+++ 4.4 Moving packages to osg-release

Note that, except in exceptional circumstances, we release software on Tuesdays, so this process will only happen on Tuesdays.

When the _osg-prerelease_ repository has been updated and verified, all of the changed software can be moved into the _osg-release_ repository. As part of this move, two important tasks must be done:

   1. Record the complete set of packages in the new release repository.
   1. Update the [[Documentation.Release3.ReleaseNotes][Release Notes]]. Note that each release has a separate page to describe the release, and it&#39;s linked from the main page. The individual page lists the changes at a high level (i.e. Updated package X to version Y) and the complete set of RPMs that changed.
   1. Write an email about the release. Mail it both to =vdt-discuss@opensciencegrid.org= and the GOC. The GOC will distribute it to the right places. 

In addition, we will make another Koji tag/yum repository called _osg-release-VERSION_. All of the latest packages in osg-release will be tagged to be in this repository, and the tag will be locked. This will give us a reproducible way to install any given OSG Software release.

---+++ 4.5 Moving packages to osg-release-VERSION

When we make a specific release, we copy the osg-release repository to a versioned osg-release-VERSION repository. This allows us to do testing with specific versions and in rare cases allows users to use a specific release.

---+++ 4.6 Moving packages to osg-contrib

The _osg-contrib_ repository is loosely regulated. In most cases, the team member in charge of the package can decide when a package is updated in _osg-contrib_.
Contrib packages should be tested in _osg-testing_ first.

---+++ 4.7 Timing of releases

Normally, releases happen on Tuesdays.

Code freezes happen two business days in advance of the release (normally Friday). Specifically: RPM updates intended to be included in the next release (that is, pushed to the osg-release yum repo) must be in the osg-testing yum repo by noon Central Time two business days in advance of the release. This will allow time for final testing, discussions, reverts, etc.

We will make exceptions for urgent situations; consult with the software coordinator when needed.

---++ 5.0 Additional Notes

---+++ 5.1 CA Certificates

The OSG Security Team is in charge of the CA Certificate packages. Because they are in the same repositories as the rest of the software, they go through the same process for release. That means that the version number of the software stack will be incremented even if the only changes are in the CA certificate packages. The OSG Software Team is happy to help with the mechanics of the release, but the OSG Security Team is in charge of the timing and contents of the release.

---+++ 5.2 VO Client packages

The OSG Operations Team is in charge of the VO client packages, which contain files such as the =vomses= file, the =edg-mkgridmap.conf= file, and others. Because they are in the same repositories as the rest of the software, they go through the same process for release. That means that the version number of the software stack will be incremented even if the only changes are in the CA certificate packages. The OSG Software Team is happy to help with the mechanics of the release, but the OSG Operations Team is in charge of the timing and contents of the release.

