---+ Removing packages from our repositories / repository cleanup (WIP)

As we accumulate packages, eventually some of them will be deprecated.
We may also have packages that are half-built or have other errors that we never intend to ship.
This page deals with the detection and removal of these packages.

Removal should be manual (for now).
Packages that have already been released should not get removed until the next major release (that is, any package from 3.1.x should not get removed in 3.2),
since that would affect the contents of the existing production repo.
Builds and packages that are only in testing or development may be removed if nobody is using them.

The following are good reasons to remove a build or package:
   1. The software is unused and/or unmaintaible (e.g., glite-ce-monitor, which we can&#39;t rebuild)
   1. The package is only used to build either a package we no longer support, or an old version of a package (the dependency is eliminated in newer versions)
   1. The build is known to be broken in some fashion
   1. The version was never built for all distro versions
Exceptions may occur, especially for the last rule.

---++ List of packages to remove in 3.2

The following packages are no longer needed and should be removed in our next major release:

| *Package* | *Notes* |
| argus-parent | |
| argus-pep-api-java | |
| argus-pep-common | |
| axis2-bin | only for !CREAM |
| bouncycastle13 | |
| cog-jglobus | superseded by jglobus |
| cryptix | |
| cryptix-asn1 | |
| emi-delegation-java | |
| emi-trustmanager-axis2 | |
| glite-ce-common-java | only for !CREAM and !CEMon |
| glite-ce-cream | project never panned out |
| glite-ce-cream-api-java | only for !CREAM |
| glite-ce-monitor | software deprecated; replaced by osg-info-services |
| glite-ce-monitor-api-java | part of !CEMon |
| glite-ce-osg-ce-plugin | |
| glite-jdl-api-java | |
| java-getopt | |
| puretls | |

---++ Automated discovery

Certain cases, such as a mismatch in package builds between distro versions, could be detected by an automated tool.
This would consist of using koji and going through each latest build in an el5 tag, then searching the corresponding el6 tag for the corresponding el6 build.


&lt;!-- vim:ft=twiki
--&gt;
