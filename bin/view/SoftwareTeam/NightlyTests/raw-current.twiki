---+ OSG Nightly Test Infrastructure

*NOTE* This test infrastructure has been decomissioned as of 01/21/2014.
It has been replaced by automated tests based on HTCondor&#39;s VM universe.
This page is for archival only.

---++ Machine setup

The test machines are VMs, hosted by the Build and Test Lab at UW-Madision.
Currently, host-2.batlab.org is the host.
They are reimaged before each test with the following distributions:

| *Host* | *Distribution* |
| vdt-test-1.batlab.org | Scientific Linux 6 |
| vdt-test-2.batlab.org | RHEL 6 |
| vdt-test-3.batlab.org | !CentOS 6 |
| vdt-test-4.batlab.org | Scientific Linux 5 |
| vdt-test-5.batlab.org | RHEL 5 |
| vdt-test-6.batlab.org | !CentOS 5 |

---++ Test Sets

We test installs from the osg-testing and osg-release repositories against either the latest released version of osg-test or the version in svn trunk.
Here is when the each set of tests is run.

| *Time* | *OSG Repository* | *OSG-Test Version* |
|  10 pm| osg-testing | latest in osg-testing |
|  12 am| osg-release | latest in osg-testing |
|  2 am| osg-testing | SVN trunk |
|  4 am| osg-release | SVN trunk |

---++ Scripts

Helper scripts run to set up the VM to run the tests, execute the tests, and collect and report the results.
The scripts are found in SVN, in =new-test/trunk=.

---+++ pretest-script

When each VM is reimaged, =pretest-script= runs first.
=pretest-script= is actually part of the VM image that gets installed onto the machine, not downloaded separately.
In case changes are made to =pretest-script=, the Batlab infrastructure people have to be notified so that they can update the VM images.
Because of this, =pretest-script= does little more than fetch =osg-test-wrapper= from SVN.
The UW-Madison members of the software team are notified if the script fails.

---+++ osg-test-wrapper
=osg-test-wrapper= does most of the work in setting up the machine and launching tests.
The script sets the test parameters (e.g. the version of =osg-test= to use) based on time of day.
This is a hack, but it works for now and is not very complicated to set up.
Afterward, =osg-test-wrapper= fetches and runs =bootstrap-osg-test= from SVN, and runs it to install the EPEL and OSG repositories, and =osg-test= itself.
If we&#39;re using =osg-test= from SVN, =osg-test-wrapper= fetches it and installs it.
=osg-test-wrapper= then runs =osg-test=, does some parsing of the results, adds a summary to the test log, and sends the result back to a UW-Madison Comp Sci machine via SCP (or via email to the osg-software mailing list email if the SCP fails).

---+++ aggregator

The =aggregator/= directory contains multiple scripts that perform various operations on the test results that =osg-test-wrapper= creates.
The directory contains two library files, =parser.py= (used for parsing the test results) and =taglib.py= (helpers for generating html).
It also contains 4 scripts, all run from cron:

   * =archiver.py= moves fresh test results to an archive directory in AFS and deletes test results that are too old (currently defined as &quot;older than 28 days&quot;).
   * =reporter.py= creates the html summaries at http://vdt.cs.wisc.edu/software_testing/results/index.html
   * =emailer.py= creates the daily summary email and sends it out.
   * =dashboard.py= creates the OSG dashboard page at http://vdt.cs.wisc.edu/osg_dashboard.html

The scripts are run between 6 am and 7 am using cron as the =cndrutil= user on =ingwe.cs.wisc.edu=, from an SVN checkout of =new-test/trunk= located at =/p/condor/workspaces/vdt/new-test=. The checkout is updated before the scripts are run.

---++ osg-tested-internal

=osg-tested-internal= is a metapackage that depends on all the software that we test.
That is the package that gets installed during the nightlies.
Declaring the packages to test in a metapackage has the advantage of being simple; no code needs to be added to any of the test scripts.
It is also easy to use for when people want to duplicate the nightly tests on another machine, for example.
When we do a release, =osg-tested-internal= gets released along with everything else; this means that we won&#39;t have problems caused by forgetting to update which packages we test after a release.
The major downside to this method is that if any of the dependencies of the metapackage fail to install, then none of the dependencies will be installed and therefore no packages will be tested.
This will need to be addressed.

&lt;!-- vim:ft=twiki
--&gt;
