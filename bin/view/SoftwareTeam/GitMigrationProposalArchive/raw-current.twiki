---+ Switching RPM area (/native/redhat) to Git (on hold)
Note: This proposal is on hold. See SoftwareTeam.GitMigrationProposal for the proposal that&#39;s live.

---++ Additional Objectives
In addition to objectives listed in the software area migration topic,
these are also necessary:

   * Trusted contributors (people with Koji accounts) should be able to make scratch builds from non-authoritative repos
   * Only team members should be able to make non-scratch builds
   * Non-scratch builds should only be made from authoritative repos
   * Existing repo branch / tag safeguards (e.g. builds from =hcc= repo only accepted into the =hcc*= tags) must continue to function

---++ Architecture
Same architecture as the software area.

---++ Usage

---+++ Contributions
Same method as the software area.

---+++ Scratch Builds by Anyone From Anywhere

*TODO* Need to research how this is possible. We may not be able to enforce this
at the Koji level, but might have to do it in osg-build.

---+++ Non-Scratch Builds by Team Members Only From Authoritative Repos

This is how things currently are. We would need to make no changes other than
changing the repo URLs in the Koji configs. *TODO* Research if it is possible
to keep this restriction while still removing the scratch build restriction.

---+++ Repo / Tag Safeguards

Requires changes to osg-build. We can&#39;t completely lock things down, as all
osg-build safeguards can be bypassed by using Koji commands directly.

---+++ Documentation

We will need separate documentation for team members (read: people who
can merge pull requests), and for other contributors. We should have
information about branch layout, best practices, common workflows, etc.
Docs on how to submit builds might need to be updated.

---++ Migration

---+++ Difficulties

Our SVN repo contains many different projects, and generally each one has its
own set of =trunk/=, =branches/=, =tags/= directories. We can do this in SVN
because a branch or a tag is just another directory, and merges can happen
between any two directories.

In Git, such a structure is impossible. Branches and tags are global to the
entire repository and merges happen between branches, not between directories.
Therefore, the only way to migrate our SVN repo is to split it up into multiple
repos, one per project.

We should to create an =authors= file that maps the authors of SVN commits to
real names and email addresses.

We will need to rewrite any hooks that we have (such as the post-commit email).

We need to evaluate how well the conversion tools keep track of renames,
especially when an entire project gets renamed.

We will *not* remove the old SVN repo after conversion, but keep them for
historical reasons. We may disable commits to it, though. This also allows us
to skip migrating subtrees which are no longer in use.

---+++ Directories to Migrate

---++++ Software Area (/software/*)

The majority of projects here already have the standard SVN layout. Those that
don&#39;t have a single directory that corresponds to trunk. Git easily handles
either case.

---++++ /access, /pacman, /rsv.donotuse, /osg-edu, /sandbox, /utils


These will not be migrated. /access and /utils are empty. /pacman and
/rsv.donotuse may have historical value, but will not get new updates. /sandbox
is unnecessary: people have their own repos they can play around with.

---++++ /certs, /ligo, /nees-ft, /teragrid, /tests, /vdt

These are old projects and have not been committed to in years. We will evaluate
whether to migrate, not migrate, or defer migration to a later date.

---++++ /new-test

Has a standard SVN layout and will be its own repo.

---++++ /native

This directory has its own set of challenges. See &quot;Migrating the Native Area&quot;
below.

---+++ Available Software for Migration

---++++ git-svn

Part of the git suite. git-svn allows bidirectional communication between Git
and SVN, i.e. you can use git-svn to create a git repo from a subtree of an SVN
repo, make your changes in the git repo, and then push the changes back to SVN.
Some developers (Matyas Selmeci, Brian Lin) already do this.

The method, if we were to use this, would be to use git-svn to make Git repos
for each SVN subtree we want to convert, clone and commit to those repos and
_not_ push the commits back to SVN.

*Advantages:*
   * Package available in RHEL repositories, and also available in the CSL
   * Bidirectional support allows people to try it out before switching over
   * Lots of instructions on-line
   * This is more or less the way everyone does it

*Disadvantages:*
   * Apparently does not keep merge history
   * May be slow

---++++ !SubGit

A commercial software product specifically written to solve the limitations of
git-svn. Also bidirectional, but can do one-time imports as well. Free to
evaluate, has special licensing for Open Source projects. Matyas has used it
(albeit to do the reverse, convert from Git to SVN), and considers it very easy
to use.

The method, if we were to use this, would be to use their =subgit import=
command once per subtree. (This is their one-way conversion command).

*Advantages:*
   * Does everything git-svn does, but better

*Disadvantages:*
   * Not available everywhere -- Java app (though Matyas has been able to install it onto his CSL desktop)
   * Proprietary — may cost money and/or require proof of open-sourceness; however, there is an evaluation (nagware) version available, and if all we&#39;re doing is a one-time conversion, we could just install it, run it once, then uninstall it

---++ Migrating the Native Area

---+++ Background

The /native/redhat subtree of SVN is where we keep all of our packages and is
currently the most active subtree. Getting the migration and the layout of this
area right is therefore extremely important.

---+++ Problems

While on the surface, this subtree appears to have the standard SVN layout
(trunk, branches, tags), several of the &quot;branches&quot; here are used very
differently than in normal software projects.

In a normal software project, the contents of two branches are very similar --
they usually have the same set of files, plus or minus a few. This is true for
/native/redhat/trunk and /native/redhat/branches/osg-3.1, but *not* true for any
of our other branches.

For example, the upcoming branch contains only a handful of packages, each
package either specifically created in the upcoming directory, or copied over
from trunk. We completely empty the upcoming branch whenever we release a new
major version (after merging the changes into trunk).

The osg-internal branch contains a few packages that are used only for building,
and will *never* be merged into trunk. This is not at all how a branch in a
normal software project is used.

The advantage we have here is a mostly consistent mapping of packages in SVN and
packages in Koji tags.

Another advantage we get with SVN is the ability to do partial merges -- that
is, merge only a single directory. Git cannot merge between directories, only
between branches. While we encourage developers to make one commit per
directory, if case they do not, then it will take effort to split up their
commits.

---+++ Possible Layouts

---++++ 1. Normal project

In this layout, we treat the entire /native/redhat area as a normal
software project.  osg-3.1 will be a branch, as will upcoming. This is a
simple, obvious conversion to do. The problem will come with the
mostly-empty repos like upcoming. You won&#39;t be able to get an easy
overview of what is and what isn&#39;t in upcoming by doing an ls. At best
you can get a look at what has changed by doing &#39;git diff master&#39;. We
lose the 1-1 correspondence.

---++++ 2. Separate repos for separate tags

In this layout, we put /native/redhat/trunk and /native/redhat/branches/osg-3.1
in one repo, and we make separate repos for upcoming, osg-internal, and the
other.

We mostly keep the 1-1 mapping. The tricky bit is merging from upcoming to main.
We could either use git format-patch/git am, or just copy files. Either way,
merging is going to be a pain and history won&#39;t be as complete. *TODO*
elaborate on this

---++++ 3. One repo per package

This may sound excessive, but it is the approach that Fedora takes. Each
package lives in its own repo that has its own set of branches that we
must keep synchronized. We would have to build a lot of tooling around
this to keep the branches consistent (make sure that the repo for each
package that&#39;s supposed to be in upcoming has an upcoming branch, for
example). This lets us make individual checkouts of packages. It also
makes merges from upcoming to trunk, etc., easy because that is the way
Git is designed to work.

The downside is that it&#39;s more to maintain, and it&#39;s hard at a glance to
do things across all packages in a tag (for example, touch everything in
upcoming).

*TODO* would we have to make one !GitHub repo per package? Is that
allowed? Can we automate it? I notice that Fedora doesn&#39;t have a !GitHub
mirror, maybe that&#39;s why...

---++++ 4. Keep native/redhat as an SVN repo, make a !GitHub mirror of that

*TODO* Derek Weitzel (I think) already set something like that up at one
point. See if it&#39;s still up, and how he synchronizes it.

---++++ 5. Keep most of native/redhat as an SVN repo, but turn the contrib branch into its own Git repo

---++ Case Studies

---+++ Fedora / EPEL
http://pkgs.fedoraproject.org/cgit/ and https://fedoraproject.org/wiki/Using_Fedora_GIT
*TODO* brief description




-- Main.MatyasSelmeci - 12 Jun 2014

